{"version":3,"file":"static/js/6362.b049e730.js","mappings":"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","sources":["../node_modules/@antv/g2/src/interaction/action/data/filter.ts","../node_modules/@antv/g2/src/interaction/action/data/range-filter.ts","../node_modules/@antv/g2/src/interaction/action/data/sibling-filter.ts","../node_modules/@antv/g2/src/interaction/action/element/active.ts","../node_modules/@antv/g2/src/interaction/action/element/filter.ts","../node_modules/@antv/g2/src/interaction/action/element/highlight-by-color.ts","../node_modules/@antv/g2/src/interaction/action/element/highlight-by-x.ts","../node_modules/@antv/g2/src/interaction/action/element/highlight-util.ts","../node_modules/@antv/g2/src/interaction/action/element/highlight.ts","../node_modules/@antv/g2/src/interaction/action/element/link-by-color.ts","../node_modules/@antv/g2/src/interaction/action/element/range-active.ts","../node_modules/@antv/g2/src/interaction/action/element/range-highlight.ts","../node_modules/@antv/g2/src/interaction/action/element/range-selected.ts","../node_modules/@antv/g2/src/interaction/action/element/range-state.ts","../node_modules/@antv/g2/src/interaction/action/element/selected.ts","../node_modules/@antv/g2/src/interaction/action/element/sibling-filter.ts","../node_modules/@antv/g2/src/interaction/action/element/single-active.ts","../node_modules/@antv/g2/src/interaction/action/element/single-highlight.ts","../node_modules/@antv/g2/src/interaction/action/element/single-selected.ts","../node_modules/@antv/g2/src/interaction/action/element/single-state.ts","../node_modules/@antv/g2/src/interaction/action/element/state-base.ts","../node_modules/@antv/g2/src/interaction/action/element/state.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { View } from 'src/chart';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n\n/**\n * 数据过滤。\n * @ignore\n */\nclass DataFilter extends Action {\n  private filterView(view: View, field, filter) {\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, (subView) => {\n        this.filterView(subView, field, filter);\n      });\n    }\n  }\n  /**\n   * 过滤数据\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      const view = this.context.view;\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names: string[] = unCheckedItems.map((item) => item.name);\n          if (names.length) {\n            this.filterView(view, field, (value) => {\n              const text = scale.getText(value);\n              return !names.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        this.filterView(view, field, (value) => {\n          return value >= min && value <= max;\n        });\n        view.render(true);\n      }\n    }\n  }\n}\n\nexport default DataFilter;\n","import { Point, Scale } from '../../../dependents';\nimport { FilterCondition, EventPayload } from '../../../interface';\nimport { View, Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util';\n\n// 获取对应的 scale\nfunction getFilter(scale: Scale, dim: string, point1: Point, point2: Point): FilterCondition {\n  let min = Math.min(point1[dim], point2[dim]);\n  let max = Math.max(point1[dim], point2[dim]);\n  const [rangeMin, rangeMax] = scale.range;\n  // 约束值在 scale 的 range 之间\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n  if (max > rangeMax) {\n    max = rangeMax;\n  }\n  // 范围大于整个 view 的范围，则返回 null\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n  const minValue = scale.invert(min);\n  const maxValue = scale.invert(max);\n  if (scale.isCategory) {\n    const minIndex = scale.values.indexOf(minValue);\n    const maxIndex = scale.values.indexOf(maxValue);\n    const arr = scale.values.slice(minIndex, maxIndex + 1);\n    return (value) => {\n      return arr.includes(value);\n    };\n  } else {\n    return (value) => {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\nenum EVENTS {\n  FILTER = 'brush-filter-processing',\n  RESET = 'brush-filter-reset',\n  BEFORE_FILTER = 'brush-filter:beforefilter',\n  AFTER_FILTER = 'brush-filter:afterfilter',\n  BEFORE_RESET = 'brush-filter:beforereset',\n  AFTER_RESET = 'brush-filter:afterreset',\n}\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n\n/**\n * 范围过滤的 Action\n * @ignore\n */\nclass RangeFilter extends Action {\n  /** 允许外部传入 dims */\n  protected cfgFields: ['dims'];\n  /**\n   * 范围过滤生效的字段/维度，可以是 x, y\n   */\n  protected dims: string[] = ['x', 'y'];\n  /** 起始点 */\n  protected startPoint: Point = null;\n\n  private isStarted: boolean = false;\n\n  // x,y 是否生效\n  private hasDim(dim: string) {\n    return this.dims.includes(dim);\n  }\n\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n  public start() {\n    const context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  }\n\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n  public filter() {\n    let startPoint;\n    let currentPoint;\n    if (isMask(this.context)) {\n      const maskShape = this.context.event.target;\n      const bbox = maskShape.getCanvasBBox();\n      startPoint = { x: bbox.x, y: bbox.y };\n      currentPoint = { x: bbox.maxX, y: bbox.maxY };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n    const { view, event } = this.context;\n    const payload = { view, event, dims: this.dims };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n\n    const coord = view.getCoordinate();\n    const normalCurrent = coord.invert(currentPoint);\n    const normalStart = coord.invert(startPoint);\n    // 设置 x 方向的 filter\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      const filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    }\n    // 设置 y 方向的 filter\n    if (this.hasDim('y')) {\n      const yScale = view.getYScales()[0];\n      const filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n    this.reRender(view, { source: EVENTS.FILTER });\n\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n  }\n\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n  public reset() {\n    const view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n\n    this.isStarted = false;\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      const yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n    this.reRender(view, { source: EVENTS.RESET });\n\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  }\n\n  /**\n   * 对 view 进行过滤\n   */\n  protected filterView(view: View, field: string, filter: FilterCondition) {\n    view.filter(field, filter);\n  }\n\n  /**\n   * 重新渲染\n   * @param view\n   */\n  protected reRender(view: View, payload?: EventPayload) {\n    view.render(true, payload);\n  }\n}\n\nexport default RangeFilter;\n","import { each } from '@antv/util';\nimport { View } from '../../../chart';\nimport { FilterCondition } from '../../../interface';\nimport RangeFilter from './range-filter';\n\nimport { getSilbings } from '../util';\n\n/**\n * 数据范围过滤，但不在当前的 view 上生效，而在当前的 view 同一层级的其他 views 上生效，用于实现联动过滤。\n * @ignore\n */\nclass SiblingFilter extends RangeFilter {\n  /**\n   * 对 view 进行过滤\n   * @param view\n   * @param field\n   * @param filter\n   */\n  protected filterView(view: View, field: string, filter: FilterCondition) {\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      sibling.filter(field, filter);\n    });\n  }\n\n  /**\n   * 重新渲染\n   * @param view\n   */\n  protected reRender(view: View) {\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      sibling.render(true);\n    });\n  }\n}\n\nexport default SiblingFilter;\n","import StateAction from './state';\n\n/**\n * 元素 active 的 Action，允许多个元素同时 active\n * @class\n * @ignore\n */\nclass ElementActive extends StateAction {\n  protected stateName: string = 'active';\n  /**\n   * Active Element\n   */\n  public active() {\n    this.setState();\n  }\n}\n\nexport default ElementActive;\n","import { each } from '@antv/util';\nimport Action from '../base';\nimport {\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isList,\n  isSlider,\n  isMask,\n  getMaskedElements,\n} from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nclass ElementFilter extends Action {\n  /**\n   * 过滤\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    const view = this.context.view;\n    const elements = getElements(view);\n    if (isMask(this.context)) {\n      const maskElements = getMaskedElements(this.context, 10);\n      if (maskElements) {\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names = unCheckedItems.map((item) => item.name);\n          // 直接控制显示、隐藏\n          each(elements, (el) => {\n            const value = getElementValue(el, field);\n            const text = scale.getText(value);\n            if (names.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        each(elements, (el) => {\n          const value = getElementValue(el, field);\n          if (value >= min && value <= max) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * 清除过滤\n   */\n  public clear() {\n    const elements = getElements(this.context.view);\n    each(elements, (el) => {\n      el.show();\n    });\n  }\n\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  public reset() {\n    this.clear();\n  }\n}\n\nexport default ElementFilter;\n","import Element from '../../../geometry/element/';\nimport { getElements, getElementValue } from '../util';\nimport Highlight from './highlight';\n\n/**\n * Highlight color\n * @ignore\n */\nclass HighlightColor extends Highlight {\n  protected setStateByElement(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    const value = getElementValue(element, scale.field);\n    const elements = getElements(view);\n    const highlightElements = elements.filter((el) => {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, (el) => highlightElements.includes(el), enable);\n  }\n}\n\nexport default HighlightColor;\n","import Element from '../../../geometry/element/';\nimport { getElements, getElementValue, getCurrentElement } from '../util';\nimport Highlight, { STATUS_ACTIVE, STATUS_UNACTIVE, Callback } from './highlight';\n\n/**\n * Highlight x\n * @ignore\n */\nclass HighlightX extends Highlight {\n  // 不允许多选\n  protected setElementHighlight(el: Element, callback: Callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else {\n      el.setState(STATUS_UNACTIVE, true);\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n    }\n  }\n\n  protected setStateByElement(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const scale = view.getXScale();\n    const value = getElementValue(element, scale.field);\n    const elements = getElements(view);\n    const highlightElements = elements.filter((el) => {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, (el) => highlightElements.includes(el), enable);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setStateByElement(element, !hasState);\n    }\n  }\n}\n\nexport default HighlightX;\n","import { each } from '@antv/util';\nimport { View } from '../../../chart';\nimport Element from '../../../geometry/element/';\nimport { getElements } from '../util';\n\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\n\n/**\n * @ignore\n * 清理 highlight 效果\n * @param view View 或者 Chart\n */\nexport function clearHighlight(view: View) {\n  const elements = getElements(view);\n  each(elements, (el) => {\n    if (el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_ACTIVE, false);\n    }\n    if (el.hasState(STATUS_UNACTIVE)) {\n      el.setState(STATUS_UNACTIVE, false);\n    }\n  });\n}\n\ntype MatchCallback = (el: Element) => boolean;\n\n/**\n * @ignore\n * 设置多个元素的 highlight\n * @param elements 元素集合\n * @param callback 设置回调函数\n * @param enable 设置或者取消\n */\nexport function setHighlightBy(elements: Element[], callback: MatchCallback, enable: boolean) {\n  each(elements, (el) => {\n    // 需要处理 active 和 unactive 的互斥\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, enable);\n    } else {\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n      el.setState(STATUS_UNACTIVE, enable);\n    }\n  });\n}\n","import { each } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport { getElements, getElementsByState } from '../util';\nimport { clearHighlight } from './highlight-util';\nimport StateAction from './state';\n\nimport { ELEMENT_STATE } from '../../../constant';\n\nexport const STATUS_UNACTIVE = ELEMENT_STATE.INACTIVE;\nexport const STATUS_ACTIVE = ELEMENT_STATE.ACTIVE;\nexport type Callback = (el) => boolean;\n\n/**\n * @ignore\n * highlight，指定图形高亮，其他图形变暗\n */\nclass ElementHighlight extends StateAction {\n  protected stateName: string = STATUS_ACTIVE;\n\n  // 多个元素设置、取消 highlight\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    const callback = (el) => this.isMathItem(el, field, item);\n    this.setHighlightBy(elements, callback, enable);\n  }\n\n  // 设置元素的 highlight\n  protected setElementHighlight(el: Element, callback: Callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else if (!el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_UNACTIVE, true);\n    }\n  }\n\n  protected setHighlightBy(elements: Element[], callback: Callback, enable: boolean) {\n    if (enable) {\n      // 如果是设置 highlight ，则将匹配的 element 设置成 active，\n      // 其他如果不是 active，则设置成 unactive\n      each(elements, (el) => {\n        this.setElementHighlight(el, callback);\n      });\n    } else {\n      // 如果取消 highlight，则要检测是否全部取消 highlight\n      const activeElements = getElementsByState(this.context.view, STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测所有 activeElements 都要取消 highlight\n      each(activeElements, (el) => {\n        if (!callback(el)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        // 都要取消，则取消所有的 active，unactive 状态\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(elements, (el) => {\n          if (callback(el)) {\n            if (el.hasState(STATUS_ACTIVE)) {\n              el.setState(STATUS_ACTIVE, false);\n            }\n            el.setState(STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  // 单个元素设置和取消 highlight\n  protected setElementState(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const elements = getElements(view);\n    this.setHighlightBy(elements, (el) => element === el, enable);\n  }\n\n  public highlight() {\n    this.setState();\n  }\n\n  // 清理掉所有的 active， unactive 状态\n  public clear() {\n    const view = this.context.view;\n    clearHighlight(view);\n  }\n}\n\nexport default ElementHighlight;\n","import Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport Element from '../../../geometry/element/';\nimport { deepMix, each, isFunction } from '@antv/util';\nimport { LooseObject } from '../../../interface';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\n\ntype LinkActiveStyle = ShapeAttrs | ((style: ShapeAttrs, Element: Element) => ShapeAttrs);\n\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nclass LinkByColor extends Action {\n  private linkGroup: IGroup;\n  private cache: LooseObject = {};\n  // 获取颜色对应的 scale\n  private getColorScale(view, element) {\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }\n  // 获取连接的 path\n  private getLinkPath(element: Element, nextElement: Element) {\n    const view = this.context.view;\n    const { isTransposed } = view.getCoordinate();\n    const bbox = element.shape.getCanvasBBox();\n    const nextBBox = nextElement.shape.getCanvasBBox();\n    const path = isTransposed\n      ? [\n          ['M', bbox.minX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', nextBBox.maxX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.minY],\n          ['Z'],\n        ]\n      : [\n          ['M', bbox.maxX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.maxY],\n          ['Z'],\n        ];\n    return path;\n  }\n  // 添加连接的图形\n  private addLinkShape(group: IGroup, element: Element, nextElement: Element, activeStyle?: LinkActiveStyle) {\n    const style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill'),\n    };\n    group.addShape({\n      type: 'path',\n      attrs: {\n        ...deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle),\n        path: this.getLinkPath(element, nextElement),\n      },\n    });\n  }\n  // 使用图形连接\n  private linkByElement(element: Element, activeStyle?: LinkActiveStyle) {\n    const view = this.context.view;\n    const scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      const elements = getElementsByField(view, scale.field, value);\n      const linkGroup = this.linkGroup;\n      const group = linkGroup.addGroup();\n      this.cache[value] = group; // 缓存\n      const count = elements.length;\n      each(elements, (el, index) => {\n        if (index < count - 1) {\n          const nextEl = elements[index + 1];\n          this.addLinkShape(group, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }\n  // 移除连接\n  private removeLink(element) {\n    const scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  }\n\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  public link(args?: { style: LinkActiveStyle }) {\n    const context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false,\n      });\n    }\n    const element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args?.style);\n    }\n  }\n\n  /**\n   * 取消连接 elements\n   */\n  public unlink() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  }\n\n  /**\n   * 清除所有连接\n   */\n  public clear() {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    super.destroy();\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  }\n}\nexport default LinkByColor;\n","import ElementRangeState from './range-state';\n\n/**\n * @ignore\n * 图表元素区域 Active 的 Action\n */\nclass ElementRangeActive extends ElementRangeState {\n  protected stateName: string = 'active';\n  /**\n   * 图表元素 Active\n   */\n  public active() {\n    this.setState();\n  }\n}\n\nexport default ElementRangeActive;\n","import Element from '../../../geometry/element';\nimport { Event } from '../../../chart';\nimport { clearHighlight, setHighlightBy } from './highlight-util';\nimport ElementRangeState from './range-state';\n\nenum EVENTS {\n  BEFORE_HIGHLIGHT = 'element-range-highlight:beforehighlight',\n  AFTER_HIGHLIGHT = 'element-range-highlight:afterhighlight',\n  BEFORE_CLEAR = 'element-range-highlight:beforeclear',\n  AFTER_CLEAR = 'element-range-highlight:afterclear',\n}\n\nexport { EVENTS as ELEMENT_RANGE_HIGHLIGHT_EVENTS };\n\n/**\n * @ignore\n * 区域 highlight 的 Action\n */\nclass ElementRangeHighlight extends ElementRangeState {\n  protected stateName: string = 'active';\n\n  // 清理掉所有的 active， unactive 状态\n  protected clearViewState(view) {\n    clearHighlight(view);\n  }\n\n  /**\n   * 设置 highlight\n   */\n  public highlight() {\n    const { view, event } = this.context;\n    const elements = this.getIntersectElements();\n    const payload = { view, event, highlightElements: elements };\n    view.emit(EVENTS.BEFORE_HIGHLIGHT, Event.fromData(view, EVENTS.BEFORE_HIGHLIGHT, payload));\n    this.setState();\n    view.emit(EVENTS.AFTER_HIGHLIGHT, Event.fromData(view, EVENTS.AFTER_HIGHLIGHT, payload));\n  }\n\n  /**\n   * @overrider 添加事件\n   */\n  public clear() {\n    const view = this.context.view;\n    view.emit(EVENTS.BEFORE_CLEAR, Event.fromData(view, EVENTS.BEFORE_CLEAR, {}));\n    super.clear();\n    view.emit(EVENTS.AFTER_CLEAR, Event.fromData(view, EVENTS.AFTER_CLEAR, {}));\n  }\n\n  protected setElementsState(elements: Element[], enable: boolean, allElements: Element[]) {\n    setHighlightBy(allElements, (el) => elements.indexOf(el) >= 0, enable);\n  }\n}\n\nexport default ElementRangeHighlight;\n","import ElementRangeState from './range-state';\n\n/**\n * @ignore\n * 区域选中的 Action\n */\nclass ElementRangeSelected extends ElementRangeState {\n  protected stateName: string = 'selected';\n  /**\n   * 选中\n   */\n  public selected() {\n    this.setState();\n  }\n}\n\nexport default ElementRangeSelected;\n","import { each } from '@antv/util';\nimport Element from '../../../geometry/element/';\nimport {\n  getElements,\n  getIntersectElements,\n  getMaskedElements,\n  getSiblingMaskElements,\n  getSilbings,\n  isInRecords,\n  isMask,\n} from '../util';\nimport StateBase from './state-base';\n\n/**\n * @ignore\n * 区域设置状态的基础 Action\n */\nclass ElementRangeState extends StateBase {\n  private startPoint = null;\n  private endPoint = null;\n  private isStarted: boolean = false;\n  /**\n   * 是否作用于当前 view 的 siblings，默认是 false 仅作用于自己\n   */\n  protected effectSiblings = false;\n  /**\n   * 是否受 element 的数据影响，还是受包围盒的影响\n   */\n  protected effectByRecord = false;\n  // 获取当前的位置\n  private getCurrentPoint() {\n    const event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y,\n    };\n  }\n\n  /**\n   * 开始，记录开始选中的位置\n   */\n  public start() {\n    this.clear(); // 开始的时候清理之前的状态\n    this.startPoint = this.getCurrentPoint();\n    this.isStarted = true;\n  }\n\n  protected getIntersectElements() {\n    let elements = null;\n    if (isMask(this.context)) {\n      elements = getMaskedElements(this.context, 10);\n    } else {\n      const startPoint = this.startPoint;\n      const endPoint = this.isStarted ? this.getCurrentPoint() : this.endPoint;\n      // 如果没有开始，则不允许范围设置状态，保护性质\n      if (!startPoint || !endPoint) {\n        return;\n      }\n      // 计算框选区域\n      const box = {\n        minX: Math.min(startPoint.x, endPoint.x),\n        minY: Math.min(startPoint.y, endPoint.y),\n        maxX: Math.max(startPoint.x, endPoint.x),\n        maxY: Math.max(startPoint.y, endPoint.y),\n      };\n      // this.clear(); // 不全部清理，会导致闪烁\n      const view = this.context.view;\n      elements = getIntersectElements(view, box);\n    }\n    return elements;\n  }\n  /**\n   * 选中\n   */\n  public setStateEnable(enable: boolean) {\n    if (this.effectSiblings && !this.effectByRecord) {\n      this.setSiblingsState(enable);\n    } else {\n      const allElements = getElements(this.context.view);\n      const elements = this.getIntersectElements();\n      if (elements && elements.length) {\n        if (this.effectByRecord) {\n          this.setSiblingsStateByRecord(elements, enable);\n        } else {\n          this.setElementsState(elements, enable, allElements);\n        }\n      } else {\n        this.clear();\n      }\n    }\n  }\n  // 根据选中的 element 的数据进行设置状态\n  private setSiblingsStateByRecord(elements, enable) {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    const records = elements.map((el) => {\n      return el.getModel().data;\n    });\n    const xFiled = view.getXScale().field;\n    const yField = view.getYScales()[0].field;\n    each(siblings, (sibling) => {\n      const allElements = getElements(sibling);\n      const effectElements = allElements.filter((el) => {\n        const record = el.getModel().data;\n        return isInRecords(records, record, xFiled, yField);\n      });\n      this.setElementsState(effectElements, enable, allElements);\n    });\n  }\n\n  // 设置兄弟 view 的状态\n  private setSiblingsState(enable: boolean) {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    if (isMask(this.context)) {\n      // 受 mask 影响\n      each(siblings, (sibling) => {\n        const allElements = getElements(sibling);\n        const effectElements = getSiblingMaskElements(this.context, sibling, 10);\n        if (effectElements && effectElements.length) {\n          this.setElementsState(effectElements, enable, allElements);\n        } else {\n          this.clearViewState(sibling);\n        }\n      });\n    }\n  }\n\n  protected setElementsState(elements: Element[], enable, allElements: Element[]) {\n    each(allElements, (el) => {\n      if (!elements.includes(el)) {\n        this.setElementState(el, false);\n      } else {\n        this.setElementState(el, enable);\n      }\n    });\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n    this.endPoint = this.getCurrentPoint();\n  }\n\n  // 复写 clear\n  public clear() {\n    const view = this.context.view;\n    // 判断是否影响 siblings\n    if (this.effectSiblings) {\n      const siblings = getSilbings(view);\n      each(siblings, (sibling) => {\n        this.clearViewState(sibling);\n      });\n    } else {\n      this.clearViewState(view);\n    }\n  }\n}\n\nexport default ElementRangeState;\n","import StateAction from './state';\n\n/**\n * @ignore\n * 允许多选的 Action\n * @class\n */\nclass ElementMultipleSelected extends StateAction {\n  protected stateName: string = 'selected';\n  /**\n   * 选中节点，允许多选\n   */\n  public selected() {\n    this.setState();\n  }\n}\n\nexport default ElementMultipleSelected;\n","import { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n\n/**\n * Sibling filter\n * @ignore\n */\nclass SiblingFilter extends Action {\n  protected byRecord = false;\n  /**\n   * 过滤隐藏图形\n   */\n  public filter() {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  }\n  // 根据框选的记录来做过滤\n  private filterByRecord() {\n    const view = this.context.view;\n    const maskElements = getMaskedElements(this.context, 10);\n    if (!maskElements) {\n      return;\n    }\n    const xFiled = view.getXScale().field;\n    const yField = view.getYScales()[0].field;\n    const records = maskElements.map((el) => {\n      return el.getModel().data;\n    });\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        const record = el.getModel().data;\n        // records.includes(record) 不生效，应该是数据的引用被改了\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  }\n\n  // 根据被框选的包围盒做过滤\n  private filterByBBox() {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const maskElements = getSiblingMaskElements(this.context, sibling, 10);\n      const elements = getElements(sibling);\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * 清理所有隐藏的图形\n   */\n  public reset() {\n    const siblings = getSilbings(this.context.view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        el.show();\n      });\n    });\n  }\n}\n\nexport default SiblingFilter;\n","import ElementSingleState from './single-state';\n\n/**\n * @ignore\n * 仅允许单个 Element Active 的 Action\n */\nclass ElementSingleActive extends ElementSingleState {\n  protected stateName: string = 'active';\n  /**\n   * 当前事件相关的 Element Active\n   */\n  public active() {\n    this.setState();\n  }\n}\n\nexport default ElementSingleActive;\n","import Element from '../../../geometry/element/';\nimport { getElements } from '../util';\nimport { clearHighlight, setHighlightBy } from './highlight-util';\nimport ElementSingleState from './single-state';\n\n/**\n * @ignore\n * 单个 Element Highlight 的 Action\n */\nclass ElementSingleHighlight extends ElementSingleState {\n  protected stateName: string = 'active';\n\n  /**\n   * Element Highlight\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  protected setElementState(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const elements = getElements(view);\n    setHighlightBy(elements, (el) => element === el, enable);\n  }\n\n  // 清理掉所有的 active， unactive 状态\n  public clear() {\n    const view = this.context.view;\n    clearHighlight(view);\n  }\n}\n\nexport default ElementSingleHighlight;\n","import ElementSingleState from './single-state';\n\n/**\n * @ignore\n * 单选的 Action\n */\nclass ElementSingleSelected extends ElementSingleState {\n  protected stateName: string = 'selected';\n  /**\n   * 选中\n   */\n  public selected() {\n    this.setState();\n  }\n}\n\nexport default ElementSingleSelected;\n","import { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nclass ElementSingleState extends StateBase {\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  }\n\n  /**\n   * 切换选中，只允许选中一个\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementSingleState;\n","import { each } from '@antv/util';\nimport Element from '../../../geometry/element/';\nimport Action from '../base';\nimport { getElementsByState } from '../util';\n\n/**\n * 状态量 Action 的基类\n * @abstract\n * @class\n * @ignore\n */\nabstract class StateBase extends Action {\n  /**\n   * 状态名称\n   */\n  protected stateName: string = '';\n\n  /**\n   * 设置状态是否激活\n   * @param enable 状态值\n   */\n  protected abstract setStateEnable(enable: boolean);\n\n  /**\n   * 是否具有某个状态\n   * @param element 图表 Element 元素\n   */\n  protected hasState(element: Element): boolean {\n    return element.hasState(this.stateName);\n  }\n  /**\n   * 设置状态激活\n   * @param enable 状态值\n   */\n  protected setElementState(element: Element, enable: boolean) {\n    // 防止闪烁\n    element.setState(this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 清除所有 Element 的状态\n   */\n  public clear() {\n    const view = this.context.view;\n    this.clearViewState(view);\n  }\n\n  protected clearViewState(view) {\n    const elements = getElementsByState(view, this.stateName);\n    each(elements, (el: Element) => {\n      this.setElementState(el, false);\n    });\n  }\n}\n\nexport default StateBase;\n","import { each, isNil, get } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport {\n  getCurrentElement,\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isElementChange,\n  isList,\n} from '../util';\nimport StateBase from './state-base';\n\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\nclass ElementState extends StateBase {\n  protected ignoreListItemStates = ['unchecked'];\n\n  // 是否忽略触发的列表项\n  private isItemIgnore(item: ListItem, list) {\n    const states = this.ignoreListItemStates;\n    const filtered = states.filter((state) => {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  }\n\n  // 设置由组件选项导致的状态变化\n  private setStateByComponent(component, item: ListItem, enable: boolean) {\n    const view = this.context.view;\n    const field = component.get('field');\n    const elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  }\n\n  // 处理触发源由 element 导致的状态变化\n  protected setStateByElement(element: Element, enable: boolean) {\n    this.setElementState(element, enable);\n  }\n\n  /** 组件的选项是否同 element 匹配 */\n  protected isMathItem(element: Element, field: string, item: ListItem) {\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  }\n\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    each(elements, (el) => {\n      if (this.isMathItem(el, field, item)) {\n        el.setState(this.stateName, enable);\n      }\n    });\n  }\n\n  /** 设置状态是否激活 */\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      const delegateObject = getDelegationObject(this.context);\n      // 如果触发源时列表，图例、坐标轴\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (item && component && !this.isItemIgnore(item, component)) {\n          const event = this.context.event.gEvent;\n          // 防止闪烁\n          if (event && event.fromShape && event.toShape && getItem(event.fromShape) === getItem(event.toShape)) {\n            return;\n          }\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementState;\n"],"names":["__extends","DataFilter","view","field","filter","getScaleByField","views","length","each","subView","_this","filterView","delegateObject","getDelegationObject","this","context","component","get","isList","unCheckedItems","getItemsByState","scale_1","names_1","map","item","name","value","text","getText","includes","render","isSlider","range","getValue","min_1","max_1","Action","EVENTS","getFilter","scale","dim","point1","point2","min","Math","max","rangeMin","rangeMax","minValue","invert","maxValue","isCategory","minIndex","values","indexOf","maxIndex","arr_1","slice","RangeFilter","dims","isStarted","startPoint","getCurrentPoint","currentPoint","isMask","bbox","event","target","getCanvasBBox","x","y","maxX","maxY","abs","payload","emit","BEFORE_FILTER","Event","coord","getCoordinate","normalCurrent","normalStart","hasDim","xScale","getXScale","yScale","getYScales","reRender","source","FILTER","AFTER_FILTER","BEFORE_RESET","RESET","AFTER_RESET","SiblingFilter","siblings","getSilbings","sibling","ElementActive","setState","StateAction","ElementFilter","elements","getElements","maskElements_1","getMaskedElements","el","show","hide","field_1","getElementValue","clear","HighlightColor","element","enable","colorAttr","geometry","getAttribute","getFields","highlightElements","setHighlightBy","Highlight","HighlightX","callback","hasState","STATUS_UNACTIVE","STATUS_ACTIVE","getCurrentElement","stateName","setStateByElement","clearHighlight","ELEMENT_STATE","ElementHighlight","isMathItem","setElementHighlight","activeElements","getElementsByState","allCancel_1","LinkByColor","nextElement","isTransposed","shape","nextBBox","minX","minY","group","activeStyle","style","opacity","fill","attr","addShape","type","attrs","deepMix","isFunction","path","getLinkPath","getColorScale","cache","elements_1","getElementsByField","group_1","linkGroup","addGroup","count_1","index","nextEl","addLinkShape","remove","args","foregroundGroup","id","capture","linkByElement","removeLink","_super","destroy","call","ElementRangeActive","ElementRangeState","ElementRangeHighlight","getIntersectElements","BEFORE_HIGHLIGHT","AFTER_HIGHLIGHT","BEFORE_CLEAR","AFTER_CLEAR","allElements","ElementRangeSelected","endPoint","box","effectSiblings","effectByRecord","setSiblingsState","setSiblingsStateByRecord","setElementsState","records","getModel","data","xFiled","yField","effectElements","record","isInRecords","getSiblingMaskElements","clearViewState","setElementState","StateBase","ElementMultipleSelected","byRecord","filterByRecord","filterByBBox","maskElements","ElementSingleActive","ElementSingleState","ElementSingleHighlight","ElementSingleSelected","isElementChange","setStateEnable","getItem","ElementState","list","ignoreListItemStates","state","setElementsStateByItem","isNil","isItemIgnore","event_1","gEvent","fromShape","toShape","setStateByComponent"],"sourceRoot":""}