{"version":3,"file":"static/js/8506.fbf7c8a0.js","mappings":"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","sources":["../node_modules/@antv/g2/src/interaction/action/view/button.ts","../node_modules/@antv/g2/src/interaction/action/view/drag.ts","../node_modules/@antv/g2/src/interaction/action/view/mousewheel-scroll.ts","../node_modules/@antv/g2/src/interaction/action/view/move.ts","../node_modules/@antv/g2/src/interaction/action/view/scale-transform.ts","../node_modules/@antv/g2/src/interaction/action/view/scale-translate.ts","../node_modules/@antv/g2/src/interaction/action/view/scale-zoom.ts","../node_modules/@antv/g2/src/interaction/context.ts","../node_modules/@antv/g2/src/interaction/interaction.ts","../node_modules/@antv/g2/src/interaction/grammar-interaction.ts","../node_modules/@antv/g2/src/interaction/index.ts"],"sourcesContent":["import { LooseObject } from '../../../interface';\nimport { IGroup } from '@antv/g-base';\nimport { ext } from '@antv/matrix-util';\nimport { deepMix } from '@antv/util';\nimport { parsePadding } from '../../../util/padding';\nimport Action from '../base';\nconst PADDING_RIGHT = 10;\nconst PADDING_TOP = 5;\n\n/**\n * Button action\n * @ignore\n */\nclass ButtonAction extends Action {\n  private buttonGroup: IGroup = null;\n  private buttonCfg = {\n    name: 'button',\n    text: 'button',\n    textStyle: {\n      x: 0,\n      y: 0,\n      fontSize: 12,\n      fill: '#333333',\n      cursor: 'pointer',\n    },\n    padding: [8, 10],\n    style: {\n      fill: '#f7f7f7',\n      stroke: '#cccccc',\n      cursor: 'pointer',\n    },\n    activeStyle: {\n      fill: '#e6e6e6',\n    },\n  };\n  // mix 默认的配置和用户配置\n  private getButtonCfg(): LooseObject {\n    return deepMix(this.buttonCfg, this.cfg);\n  }\n  // 绘制 Button 和 文本\n  private drawButton() {\n    const config = this.getButtonCfg();\n    const group = this.context.view.foregroundGroup.addGroup({\n      name: config.name,\n    });\n    // 添加文本\n    const textShape = group.addShape({\n      type: 'text',\n      name: 'button-text',\n      attrs: {\n        text: config.text,\n        ...config.textStyle,\n      },\n    });\n    const textBBox = textShape.getBBox();\n    const padding = parsePadding(config.padding);\n    // 添加背景按钮\n    const buttonShape = group.addShape({\n      type: 'rect',\n      name: 'button-rect',\n      attrs: {\n        x: textBBox.x - padding[3],\n        y: textBBox.y - padding[0],\n        width: textBBox.width + padding[1] + padding[3],\n        height: textBBox.height + padding[0] + padding[2],\n        ...config.style,\n      },\n    });\n    buttonShape.toBack(); // 在后面\n    // active 效果内置\n    group.on('mouseenter', () => {\n      buttonShape.attr(config.activeStyle);\n    });\n    group.on('mouseleave', () => {\n      buttonShape.attr(config.style);\n    });\n    this.buttonGroup = group;\n  }\n\n  // 重置位置\n  private resetPosition() {\n    const view = this.context.view;\n    const coord = view.getCoordinate();\n    const point = coord.convert({ x: 1, y: 1 }); // 后面直接改成左上角\n    const buttonGroup = this.buttonGroup;\n    const bbox = buttonGroup.getBBox();\n    const matrix = ext.transform(null, [\n      ['t', point.x - bbox.width - PADDING_RIGHT, point.y + bbox.height + PADDING_TOP],\n    ]);\n    buttonGroup.setMatrix(matrix);\n  }\n\n  /**\n   * 显示\n   */\n  public show() {\n    if (!this.buttonGroup) {\n      this.drawButton();\n    }\n    this.resetPosition();\n    this.buttonGroup.show();\n  }\n\n  /**\n   * 隐藏\n   */\n  public hide() {\n    if (this.buttonGroup) {\n      this.buttonGroup.hide();\n    }\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    const buttonGroup = this.buttonGroup;\n    if (buttonGroup) {\n      buttonGroup.remove();\n    }\n    super.destroy();\n  }\n}\n\nexport default ButtonAction;\n","import { Point } from '../../../dependents';\nimport Action from '../base';\nimport { distance } from '../util';\n\nconst DISTANCE = 4; // 移动的最小距离\n\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\nclass Drag extends Action {\n  // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n  protected starting = false;\n  // 拖拽开始\n  protected dragStart = false;\n  // 开始的节点\n  protected startPoint: Point;\n\n  /**\n   * 开始\n   */\n  public start() {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  }\n\n  /**\n   * 拖拽\n   */\n  public drag() {\n    if (!this.startPoint) {\n      return;\n    }\n    const current = this.context.getCurrentPoint();\n    const view = this.context.view;\n    const event = this.context.event;\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y,\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    if (this.dragStart) {\n      const view = this.context.view;\n      const event = this.context.event;\n      view.emit('dragend', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n    this.starting = false;\n    this.dragStart = false;\n  }\n}\n\nexport default Drag;\n","import { clamp, size, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../../constant';\nimport { Action } from '..';\nimport { LooseObject } from '../../../interface';\n\nfunction isWheelDown(event: LooseObject) {\n  const wheelEvent = event.gEvent.originalEvent as WheelEvent;\n  return wheelEvent.deltaY > 0;\n}\n\nconst DEFAULT_WHEELDELTA = 1;\nclass MousewheelScroll extends Action {\n  public scroll(arg?) {\n    const { view, event } = this.context;\n\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n\n    const wheelDelta = arg?.wheelDelta || DEFAULT_WHEELDELTA;\n    const scrollbarController = view.getController('scrollbar');\n\n    const xScale = view.getXScale();\n    const data = view.getOptions().data;\n    const dataSize = size(valuesOfKey(data, xScale.field));\n    const step = size(xScale.values);\n\n    const currentRatio = scrollbarController.getValue();\n    const currentStart = Math.floor((dataSize - step) * currentRatio);\n\n    const nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    const correction = wheelDelta / (dataSize - step) / 10000;\n    const nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  }\n}\n\nexport default MousewheelScroll;\n","import { ext } from '@antv/matrix-util';\nimport { Action } from '..';\nimport { distance } from '../util';\n\nconst MIN_DISTANCE = 5;\n\n/**\n * @ignore\n * View 移动的 Action\n */\nclass Move extends Action {\n  private starting = false;\n  private isMoving = false;\n  // private cacheRange = null;\n  private startPoint = null;\n  private startMatrix = null;\n  /**\n   * 开始移动\n   */\n  public start() {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n    // 缓存开始时的矩阵，防止反复拖拽\n    this.startMatrix = this.context.view.middleGroup.getMatrix();\n  }\n\n  /**\n   * 移动\n   */\n  public move() {\n    if (!this.starting) {\n      return;\n    }\n    const startPoint = this.startPoint;\n    const currentPoint = this.context.getCurrentPoint();\n    const d = distance(startPoint, currentPoint);\n    if (d > MIN_DISTANCE && !this.isMoving) {\n      this.isMoving = true;\n    }\n    if (this.isMoving) {\n      const view = this.context.view;\n      const matrix = ext.transform(this.startMatrix, [\n        ['t', currentPoint.x - startPoint.x, currentPoint.y - startPoint.y],\n      ]);\n      view.backgroundGroup.setMatrix(matrix);\n      view.foregroundGroup.setMatrix(matrix);\n      view.middleGroup.setMatrix(matrix);\n    }\n  }\n\n  /**\n   * 结束移动\n   */\n  public end() {\n    if (this.isMoving) {\n      this.isMoving = false;\n    }\n    this.startMatrix = null;\n    this.starting = false;\n    this.startPoint = null;\n  }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    this.starting = false;\n    this.startPoint = null;\n    this.isMoving = false;\n\n    const view = this.context.view;\n    view.backgroundGroup.resetMatrix();\n    view.foregroundGroup.resetMatrix();\n    view.middleGroup.resetMatrix();\n    this.isMoving = false;\n  }\n}\n\nexport default Move;\n","import { Action } from '..';\n\nconst DIM_X = 'x';\nconst DIM_Y = 'y';\n\n/**\n * Scale translate\n * @ignore\n */\nclass ScaleTranslate extends Action {\n  protected dims = [DIM_X, DIM_Y];\n  protected cfgFields = ['dims'];\n  protected cacheScaleDefs = {};\n\n  // 是否支持对应字段的平移\n  protected hasDim(dim) {\n    return this.dims.includes(dim);\n  }\n\n  protected getScale(dim) {\n    const view = this.context.view;\n    if (dim === 'x') {\n      return view.getXScale();\n    } else {\n      return view.getYScales()[0];\n    }\n  }\n\n  private resetDim(dim) {\n    const view = this.context.view;\n    if (this.hasDim(dim) && this.cacheScaleDefs[dim]) {\n      const scale = this.getScale(dim);\n      view.scale(scale.field, this.cacheScaleDefs[dim]);\n      this.cacheScaleDefs[dim] = null;\n    }\n  }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    this.resetDim(DIM_X);\n    this.resetDim(DIM_Y);\n    const view = this.context.view;\n    view.render(true);\n  }\n}\n\nexport default ScaleTranslate;\n","import { each } from '@antv/util';\nimport { Point } from '../../../dependents';\nimport TransformAction from './scale-transform';\n\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  protected startPoint: Point = null;\n  protected starting = false;\n  private startCache = {};\n  /**\n   * 开始\n   */\n  public start() {\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      const scale = this.getScale(dim);\n      const { min, max, values } = scale;\n      this.startCache[dim] = { min, max, values };\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  }\n\n  /**\n   * 平移\n   */\n  public translate() {\n    if (!this.starting) {\n      return;\n    }\n    const startPoint = this.startPoint;\n    const coord = this.context.view.getCoordinate();\n    const currentPoint = this.context.getCurrentPoint();\n    const normalStart = coord.invert(startPoint);\n    const noramlCurrent = coord.invert(currentPoint);\n    const dx = noramlCurrent.x - normalStart.x;\n    const dy = noramlCurrent.y - normalStart.y;\n    const view = this.context.view;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.translateDim(dim, { x: dx * -1, y: dy * -1 });\n    });\n    view.render(true);\n  }\n\n  // 平移度量\n  private translateDim(dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private translateLinear(dim, scale, normalPoint) {\n    const view = this.context.view;\n    const { min, max } = this.startCache[dim];\n    const range = max - min;\n    const d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min,\n        max,\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d,\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    super.reset();\n    this.startPoint = null;\n    this.starting = false;\n  }\n}\n\nexport default ScaleTranslate;\n","import { each, throttle } from '@antv/util';\nimport TransformAction from './scale-transform';\n\n/**\n * 缩放 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  private zoomRatio = 0.05;\n  /**\n   * 缩小\n   */\n  public zoomIn() {\n    this.zoom(this.zoomRatio);\n  }\n\n  private zoom(scale) {\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.zoomDim(dim, scale);\n    });\n    this.context.view.render(true);\n  }\n\n  /**\n   * 放大\n   */\n  public zoomOut() {\n    this.zoom(-1 * this.zoomRatio);\n  }\n\n  // 缩放度量\n  private zoomDim(dim, dRatio) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.zoomLinear(dim, scale, dRatio);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.zoomCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private zoomLinear(dim, scale, dRatio) {\n    const view = this.context.view;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: scale.min,\n        max: scale.max,\n      };\n    }\n    // 使用使用原始度量作为缩放标准\n    const scaleDef = this.cacheScaleDefs[dim];\n    const range = scaleDef.max - scaleDef.min;\n    const { min, max } = scale;\n    const d = dRatio * range;\n    const toMin = min - d;\n    const toMax = max + d;\n    const curRange = toMax - toMin;\n    const scaled = curRange / range;\n    if (toMax > toMin && scaled < 100 && scaled > 0.01) {\n      view.scale(scale.field, {\n        // @ts-ignore\n        nice: false,\n        min: min - d,\n        max: max + d,\n      });\n    }\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n}\n\nexport default ScaleTranslate;\n","import { each, get } from '@antv/util';\nimport { View } from '../chart';\nimport { BBox, IShape, Point } from '../dependents';\nimport { IAction, IInteractionContext, LooseObject } from '../interface';\nimport { getComponents, isInBox } from './action/util';\n\n/**\n * 交互的上下文\n */\nexport default class Context implements IInteractionContext {\n  /** 当前所有的 Action */\n  public actions: IAction[] = [];\n  /** 当前 View 实例 */\n  public view: View;\n  /** 当前事件对象 */\n  public event: LooseObject = null;\n\n  private cacheMap: LooseObject = {};\n\n  constructor(view: View) {\n    this.view = view;\n  }\n\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  public cache(...params) {\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  }\n\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  public getAction(name: string): IAction {\n    return this.actions.find((action) => action.name === name);\n  }\n\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  public addAction(action: IAction) {\n    this.actions.push(action);\n  }\n\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  public removeAction(action: IAction) {\n    const actions = this.actions;\n    const index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  }\n\n  /**\n   * 获取当前的点\n   */\n  public getCurrentPoint(): Point {\n    const event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        const canvas = this.view.getCanvas();\n        const point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y,\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  public getCurrentShape(): IShape {\n    return get(this.event, ['gEvent', 'shape']);\n  }\n\n  /**\n   * 当前的触发是否在 View 内\n   */\n  public isInPlot() {\n    const point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  }\n\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  public isInShape(name) {\n    const shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  }\n\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  public isInComponent(name?: string) {\n    const components = getComponents(this.view);\n    const point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find((component) => {\n        const bbox = component.getBBox() as BBox;\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), (action) => {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  }\n}\n","import { View } from '../chart';\nimport { LooseObject } from '../interface';\n\nexport type InteractionConstructor = new (view: View, cfg: LooseObject) => Interaction;\n\n/**\n * 交互的基类。\n */\nexport default class Interaction {\n  /** view 或者 chart */\n  protected view: View;\n  /** 配置项 */\n  protected cfg: LooseObject;\n\n  constructor(view: View, cfg: LooseObject) {\n    this.view = view;\n    this.cfg = cfg;\n  }\n\n  /**\n   * 初始化。\n   */\n  public init() {\n    this.initEvents();\n  }\n\n  /**\n   * 绑定事件\n   */\n  protected initEvents() {}\n\n  /**\n   * 销毁事件\n   */\n  protected clearEvents() {}\n\n  /**\n   * 销毁。\n   */\n  public destroy() {\n    this.clearEvents();\n  }\n}\n","import { each, isArray, isFunction, isString, debounce, throttle } from '@antv/util';\nimport { View } from '../chart';\nimport { ActionCallback, IAction, IInteractionContext, LooseObject } from '../interface';\nimport { createAction, createCallbackAction } from './action/register';\nimport InteractionContext from './context';\nimport Interaction from './interaction';\n\n// 将字符串转换成 action\nexport function parseAction(actionStr: string, context: IInteractionContext, arg?: any): ActionObject {\n  const arr = actionStr.split(':');\n  const actionName = arr[0];\n  // 如果已经初始化过 action ，则直接引用之前的 action\n  const action = context.getAction(actionName) || createAction(actionName, context);\n  if (!action) {\n    throw new Error(`There is no action named ${actionName}`);\n  }\n  const methodName = arr[1];\n  return {\n    action,\n    methodName,\n    arg,\n  };\n}\n\n// 执行 Action\nfunction executeAction(actionObject: ActionObject) {\n  const { action, methodName, arg } = actionObject;\n  if (action[methodName]) {\n    action[methodName](arg);\n  } else {\n    throw new Error(`Action(${action.name}) doesn't have a method called ${methodName}`);\n  }\n}\n\nconst STEP_NAMES = {\n  START: 'start',\n  SHOW_ENABLE: 'showEnable',\n  END: 'end',\n  ROLLBACK: 'rollback',\n  PROCESSING: 'processing',\n};\n\n/** 交互环节的定义 */\nexport interface InteractionStep {\n  /**\n   * 触发事件，支持 view，chart 的各种事件，也支持 document、window 的事件\n   */\n  trigger: string;\n  /**\n   * 是否可以触发 action\n   * @param context - 交互的上下文\n   */\n  isEnable?: (context: IInteractionContext) => boolean;\n  /**\n   * 反馈，支持三种方式：\n   * - action:method : action 的名字和方法的组合\n   * - [’action1:method1‘, ’action2:method‘]\n   * - ActionCallback: 回调函数\n   */\n  action: string | string[] | ActionCallback;\n  /**\n   * 反馈，具体 action method 的参数：\n   * - 当传递多个 action 时，args 必须是一个数组\n   */\n  arg?: any | any[];\n  /**\n   * 回调函数，action 执行后执行\n   */\n  callback?: (context: IInteractionContext) => void;\n  /**\n   * @private\n   * 不需要用户传入，通过上面的属性计算出来的属性\n   */\n  actionObject?: ActionObject | ActionObject[];\n  /**\n   * 在一个环节内是否只允许执行一次\n   */\n  once?: boolean;\n  /**\n   * 是否增加节流\n   */\n  throttle?: ThrottleOption;\n  /**\n   * 是否延迟\n   */\n  debounce?: DebounceOption;\n}\n\n// action 执行时支持 debounce 和 throttle，可以参考：https://css-tricks.com/debouncing-throttling-explained-examples/\n/**\n * debounce 的配置\n */\nexport interface DebounceOption {\n  /**\n   * 等待时间\n   */\n  wait: number;\n  /**\n   * 是否马上执行\n   */\n  immediate?: boolean;\n}\n\n/**\n * throttle 的配置\n */\nexport interface ThrottleOption {\n  /**\n   * 等待时间\n   */\n  wait: number;\n  /**\n   * 马上就执行\n   */\n  leading?: boolean;\n  /**\n   * 执行完毕后再执行一次\n   */\n  trailing?: boolean;\n}\n\n/** 缓存 action 对象，仅用于当前文件 */\ninterface ActionObject {\n  /**\n   * 缓存的 action\n   */\n  action: IAction;\n  /**\n   * action 的方法\n   */\n  methodName: string;\n  /**\n   * 用户传递的 action 方法的参数\n   */\n  arg?: any;\n}\n\n/** 交互的所有环节 */\nexport interface InteractionSteps {\n  /**\n   * 显示交互可以进行\n   */\n  showEnable?: InteractionStep[];\n  /**\n   * 交互开始\n   */\n  start?: InteractionStep[];\n  /**\n   * 交互持续\n   */\n  processing?: InteractionStep[];\n  /**\n   * 交互结束\n   */\n  end?: InteractionStep[];\n  /**\n   * 交互回滚\n   */\n  rollback?: InteractionStep[];\n}\n\n/**\n * 支持语法的交互类\n */\nexport default class GrammarInteraction extends Interaction {\n  // 存储的交互环节\n  private steps: InteractionSteps;\n  /** 当前执行到的阶段 */\n  public currentStepName: string;\n  /**\n   * 当前交互的上下文\n   */\n  public context: IInteractionContext;\n\n  private callbackCaches: LooseObject = {};\n  // 某个触发和反馈在本环节是否执行或\n  private emitCaches: LooseObject = {};\n\n  constructor(view: View, steps: InteractionSteps) {\n    super(view, steps);\n    this.steps = steps;\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {\n    this.initContext();\n    super.init();\n  }\n\n  /**\n   * 清理资源\n   */\n  public destroy() {\n    super.destroy(); // 先清理事件\n    this.steps = null;\n    if (this.context) {\n      this.context.destroy();\n      this.context = null;\n    }\n\n    this.callbackCaches = null;\n    this.view = null;\n  }\n\n  /**\n   * 绑定事件\n   */\n  protected initEvents() {\n    each(this.steps, (stepArr, stepName) => {\n      each(stepArr, (step) => {\n        const callback = this.getActionCallback(stepName, step);\n        if (callback) {\n          // 如果存在 callback，才绑定，有时候会出现无 callback 的情况\n          this.bindEvent(step.trigger, callback);\n        }\n      });\n    });\n  }\n\n  /**\n   * 清理绑定的事件\n   */\n  protected clearEvents() {\n    each(this.steps, (stepArr, stepName) => {\n      each(stepArr, (step) => {\n        const callback = this.getActionCallback(stepName, step);\n        if (callback) {\n          this.offEvent(step.trigger, callback);\n        }\n      });\n    });\n  }\n\n  // 初始化上下文，并初始化 action\n  private initContext() {\n    const view = this.view;\n    const context = new InteractionContext(view);\n    this.context = context;\n    const steps = this.steps;\n    // 生成具体的 Action\n    each(steps, (subSteps: InteractionStep[]) => {\n      each(subSteps, (step: InteractionStep) => {\n        if (isFunction(step.action)) {\n          // 如果传入回调函数，则直接生成 CallbackAction\n          step.actionObject = {\n            action: createCallbackAction(step.action, context),\n            methodName: 'execute',\n          };\n        } else if (isString(step.action)) {\n          // 如果是字符串\n          step.actionObject = parseAction(step.action, context, step.arg);\n        } else if (isArray(step.action)) {\n          // 如果是数组\n          const actionArr = step.action;\n          const argArr = isArray(step.arg) ? step.arg : [step.arg];\n          step.actionObject = [];\n          each(actionArr, (actionStr, idx) => {\n            (step.actionObject as ActionObject[]).push(parseAction(actionStr, context, argArr[idx]));\n          });\n        }\n        // 如果 action 既不是字符串，也不是函数，则不会生成 actionObject\n      });\n    });\n  }\n\n  // 是否允许指定阶段名称执行\n  private isAllowStep(stepName: string): boolean {\n    const currentStepName = this.currentStepName;\n    const steps = this.steps;\n    // 相同的阶段允许同时执行\n    if (currentStepName === stepName) {\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.SHOW_ENABLE) {\n      // 示能在整个过程中都可用\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.PROCESSING) {\n      // 只有当前是 start 时，才允许 processing\n      return currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.START) {\n      // 如果当前是 processing，则无法 start，必须等待 end 后才能执行\n      return currentStepName !== STEP_NAMES.PROCESSING;\n    }\n\n    if (stepName === STEP_NAMES.END) {\n      return currentStepName === STEP_NAMES.PROCESSING || currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.ROLLBACK) {\n      if (steps[STEP_NAMES.END]) {\n        // 如果定义了 end, 只有 end 时才允许回滚\n        return currentStepName === STEP_NAMES.END;\n      } else if (currentStepName === STEP_NAMES.START) {\n        // 如果未定义 end, 则判断是否是开始\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // 具体的指定阶段是否允许执行\n  private isAllowExecute(stepName: string, step: InteractionStep): boolean {\n    if (this.isAllowStep(stepName)) {\n      const key = this.getKey(stepName, step);\n      // 如果是在本环节内仅允许触发一次，同时已经触发过，则不允许再触发\n      if (step.once && this.emitCaches[key]) {\n        return false;\n      }\n      // 如果是允许的阶段，则验证 isEnable 方法\n      if (step.isEnable) {\n        return step.isEnable(this.context);\n      }\n      return true; // 如果没有 isEnable 则允许执行\n    }\n    return false;\n  }\n\n  private enterStep(stepName: string) {\n    this.currentStepName = stepName;\n    this.emitCaches = {}; // 清除所有本环节触发的缓存\n  }\n\n  // 执行完某个触发和反馈（子环节）\n  private afterExecute(stepName: string, step) {\n    // show enable 不计入正常的流程，其他情况则设置当前的 step\n    if (stepName !== STEP_NAMES.SHOW_ENABLE && this.currentStepName !== stepName) {\n      this.enterStep(stepName);\n    }\n    const key = this.getKey(stepName, step);\n    // 一旦执行，则缓存标记为，一直保持到跳出改环节\n    this.emitCaches[key] = true;\n  }\n  // 获取某个环节的唯一的键值\n  private getKey(stepName, step) {\n    return stepName + step.trigger + step.action;\n  }\n\n  // 获取 step 的回调函数，如果已经生成，则直接返回，如果未生成，则创建\n  private getActionCallback(stepName: string, step: InteractionStep): (e: object) => void {\n    const context = this.context;\n    const callbackCaches = this.callbackCaches;\n    const actionObject = step.actionObject;\n    if (step.action && actionObject) {\n      const key = this.getKey(stepName, step);\n      if (!callbackCaches[key]) {\n        // 动态生成执行的方法，执行对应 action 的名称\n        const actionCallback = (event) => {\n          context.event = event; // 保证检测时的 event\n          if (this.isAllowExecute(stepName, step)) {\n            // 如果是数组时，则依次执行\n            if (isArray(actionObject)) {\n              each(actionObject, (obj: ActionObject) => {\n                context.event = event; // 可能触发新的事件，保证执行前的 context.event 是正确的\n                executeAction(obj);\n              });\n            } else {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              executeAction(actionObject);\n            }\n            this.afterExecute(stepName, step);\n            if (step.callback) {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              step.callback(context);\n            }\n          } else {\n            // 如果未通过验证，则事件不要绑定在上面\n            context.event = null;\n          }\n        };\n        // 如果设置了 debounce\n        if (step.debounce) {\n          callbackCaches[key] = debounce(actionCallback, step.debounce.wait, step.debounce.immediate);\n        } else if (step.throttle) {\n          // 设置 throttle\n          callbackCaches[key] = throttle(actionCallback, step.throttle.wait, {\n            leading: step.throttle.leading,\n            trailing: step.throttle.trailing,\n          });\n        } else {\n          // 直接设置\n          callbackCaches[key] = actionCallback;\n        }\n      }\n      return callbackCaches[key];\n    }\n    return null;\n  }\n\n  private bindEvent(eventName, callback) {\n    const nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.addEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.addEventListener(nameArr[1], callback);\n    } else {\n      this.view.on(eventName, callback);\n    }\n  }\n\n  private offEvent(eventName, callback) {\n    const nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.removeEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.removeEventListener(nameArr[1], callback);\n    } else {\n      this.view.off(eventName, callback);\n    }\n  }\n}\n","import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport { View } from '../chart';\nimport { LooseObject } from '../interface';\nimport GrammarInteraction, { InteractionSteps } from './grammar-interaction';\nimport { InteractionConstructor } from './interaction';\n\nconst Interactions: LooseObject = {};\n\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\nexport function getInteraction(name: string): InteractionSteps | InteractionConstructor {\n  return Interactions[lowerCase(name)];\n}\n\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\nexport function registerInteraction(name: string, interaction: InteractionSteps | InteractionConstructor) {\n  Interactions[lowerCase(name)] = interaction;\n}\n\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\nexport function createInteraction(name: string, view: View, cfg?: LooseObject) {\n  const interaciton = getInteraction(name);\n  if (!interaciton) {\n    return null;\n  }\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    const steps = mix(clone(interaciton), cfg) as InteractionSteps;\n    return new GrammarInteraction(view, steps);\n  } else {\n    const cls = interaciton as InteractionConstructor;\n    return new cls(view, cfg);\n  }\n}\n\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';\n"],"names":["_this","name","text","textStyle","x","y","fontSize","fill","cursor","padding","style","stroke","activeStyle","__extends","ButtonAction","deepMix","this","buttonCfg","cfg","config","getButtonCfg","group","context","view","foregroundGroup","addGroup","textBBox","addShape","type","attrs","getBBox","parsePadding","buttonShape","width","height","toBack","on","attr","buttonGroup","point","getCoordinate","convert","bbox","matrix","ext","setMatrix","drawButton","resetPosition","show","hide","remove","_super","destroy","call","Action","Drag","starting","startPoint","getCurrentPoint","current","event","dragStart","emit","target","distance","event_1","MousewheelScroll","arg","getOptions","scrollbar","wheelDelta","scrollbarController","getController","xScale","getXScale","data","dataSize","size","valuesOfKey","field","step","values","currentRatio","getValue","nextStart","Math","floor","gEvent","originalEvent","deltaY","isWheelDown","correction","nextRatio","clamp","setValue","Move","startMatrix","middleGroup","getMatrix","currentPoint","isMoving","backgroundGroup","resetMatrix","ScaleTranslate","dim","dims","includes","getYScales","hasDim","cacheScaleDefs","scale","getScale","resetDim","render","each","min","max","startCache","coord","normalStart","invert","noramlCurrent","dx","dy","translateDim","normalPoint","isLinear","translateLinear","range","d","nice","reset","TransformAction","zoom","zoomRatio","zoomDim","dRatio","zoomLinear","scaleDef","toMin","toMax","scaled","actions","cacheMap","Context","params","length","find","action","push","index","indexOf","splice","HTMLElement","getCanvas","getPointByClient","clientX","clientY","get","isPointInPlot","shape","getCurrentShape","components","getComponents","component","isInBox","slice","Interaction","initEvents","clearEvents","parseAction","actionStr","arr","split","actionName","getAction","createAction","Error","methodName","executeAction","actionObject","concat","STEP_NAMES","steps","GrammarInteraction","initContext","init","callbackCaches","stepArr","stepName","callback","getActionCallback","bindEvent","trigger","offEvent","InteractionContext","subSteps","isFunction","createCallbackAction","isString","isArray","actionArr","argArr_1","idx","currentStepName","isAllowStep","key","getKey","once","emitCaches","isEnable","enterStep","actionCallback","isAllowExecute","obj","afterExecute","debounce","wait","immediate","throttle","leading","trailing","eventName","nameArr","window","addEventListener","document","removeEventListener","off","Interactions","registerInteraction","interaction","lowerCase","createInteraction","interaciton","getInteraction","isPlainObject","mix","clone"],"sourceRoot":""}