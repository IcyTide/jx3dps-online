{"version":3,"file":"static/js/8613.c5d47f91.js","mappings":"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","sources":["../node_modules/@antv/g2/src/core.ts","../node_modules/@antv/g2/src/dependents.ts","../node_modules/@antv/g2/src/engine/index.ts","../node_modules/@antv/g2/src/facet/circle.ts","../node_modules/@antv/g2/src/facet/facet.ts","../node_modules/@antv/g2/src/facet/index.ts","../node_modules/@antv/g2/src/facet/list.ts","../node_modules/@antv/g2/src/facet/matrix.ts","../node_modules/@antv/g2/src/facet/mirror.ts","../node_modules/@antv/g2/src/facet/rect.ts","../node_modules/@antv/g2/src/facet/tree.ts"],"sourcesContent":["/* G2 的一个壳子，不包含 Geometry，由开发者自己定义和引入 */\n\nexport const VERSION = '4.2.10';\n\n// 核心基类导出\nexport { Chart, View, Event } from './chart'; // Chart, View 类\nexport { Controller as ComponentController } from './chart/controller/base'; // G2 组件基类\nexport { default as TooltipController } from './chart/controller/tooltip'; // G2 tooltip 组件基类\nexport { default as Geometry } from './geometry/base'; // Geometry 基类\nexport { default as Element } from './geometry/element'; // Element 类\nexport { default as GeometryLabel } from './geometry/label/base'; // Geometry Label 基类\nexport { Interaction, Action } from './interaction'; // Interaction, Action 基类\nexport { Facet } from './facet'; // Facet 基类\nexport { default as InteractionAction } from './interaction/action/base'; // Interaction Action 基类\n\n// 注册 ComponentController\nexport { registerComponentController } from './chart';\n\n// 注册 Geometry\nexport { registerGeometry } from './chart';\n\n// 注册 Geometry Shape\nexport { registerShape, registerShapeFactory, getShapeFactory } from './geometry/shape/base';\n\n// 注册 Geometry label 以及 Geometry Label 布局函数\nexport {\n  registerGeometryLabel,\n  registerGeometryLabelLayout,\n  getGeometryLabel,\n  getGeometryLabelLayout,\n} from './geometry/label';\n\n// 注册 interaction\nexport { getInteraction, registerInteraction, registerAction, getActionClass } from './interaction';\n\n// 注册 facet\nexport { getFacet, registerFacet } from './facet';\n\n// 注册主题\nexport { getTheme, registerTheme } from './theme';\n\n// G engine 管理相关\nexport { registerEngine, getEngine } from './engine';\n\n// 注册动画函数\nexport { registerAnimation, getAnimation } from './animate/animation';\n\nexport { LAYER, DIRECTION } from './constant';\n\n// 因为 typescript 部分版本不支持 export * as 语法。\nimport * as Types from './interface';\nexport type { Types };\n\nexport { IGroup, ShapeAttrs, Coordinate, Scale, ScaleConfig } from './dependents';\n\n// 一些工具方法导出\nimport { getMappingValue } from './util/attr';\nimport { getLegendItems } from './util/legend';\nimport { getAngle, getSectorPath, polarToCartesian } from './util/graphics';\nimport { rotate, transform, translate, zoom } from './util/transform';\nimport { getTooltipItems } from './util/tooltip';\nimport { getDelegationObject } from './interaction/action/util';\nimport { getPathPoints } from './geometry/shape/util/get-path-points';\nimport { getPath } from './geometry/shape/line';\n\nexport const Util = {\n  getLegendItems,\n  translate,\n  rotate,\n  zoom,\n  transform,\n  getAngle,\n  getSectorPath,\n  polarToCartesian,\n  getDelegationObject,\n  getTooltipItems,\n  getMappingValue,\n  // shape 的一些操作方法\n  getPath,\n  getPathPoints,\n};\n","/* 依赖的模块，在这里统一引入，方便打包优化 */\n\n// G\nexport {\n  ICanvas,\n  IElement,\n  IGroup,\n  IShape,\n  PathCommand,\n  BBox,\n  Point,\n  ShapeAttrs,\n  Event,\n  AbstractGroup,\n  AbstractShape,\n} from '@antv/g-base';\n// 需要有 G-base 提供 g engine 类型定义\nexport type IG = any;\n\n// adjust\nexport { registerAdjust, getAdjust, Adjust } from '@antv/adjust';\n\n// attr\nexport { getAttribute, Attribute } from '@antv/attr';\nexport { Color } from '@antv/attr';\n\n// coordinate\nexport { getCoordinate, registerCoordinate, Coordinate, CoordinateCfg } from '@antv/coord';\n\n// scale\nexport { getScale, registerScale, Scale, ScaleConfig, Tick } from '@antv/scale';\n\n// component\nimport {\n  Annotation,\n  Axis,\n  Component,\n  Crosshair,\n  Grid,\n  GroupComponent,\n  HtmlComponent,\n  Legend,\n  Slider,\n  Tooltip,\n  Scrollbar,\n} from '@antv/component';\n\nexport {\n  CategoryLegendCfg,\n  CircleAxisCfg,\n  LineAxisCfg,\n  GroupComponentCfg,\n  ListItem,\n  AxisLineCfg,\n  AxisTickLineCfg,\n  AxisSubTickLineCfg,\n  AxisTitleCfg,\n  AxisLabelCfg,\n  GridLineCfg,\n  LegendMarkerCfg,\n  LegendTitleCfg,\n  LegendBackgroundCfg,\n  LegendItemNameCfg,\n  LegendItemValueCfg,\n  LegendPageNavigatorCfg,\n  ContinueLegendCfg,\n  ContinueLegendTrackCfg,\n  ContinueLegendRailCfg,\n  ContinueLegendLabelCfg,\n  ContinueLegendHandlerCfg,\n  CrosshairLineCfg,\n  CrosshairTextCfg,\n  CrosshairTextBackgroundCfg,\n  SliderCfg,\n  TrendCfg,\n  EnhancedTextCfg,\n  LineAnnotationTextCfg,\n  IComponent,\n  IList,\n} from '@antv/component';\n\nexport { HtmlComponent, GroupComponent, Component, Crosshair };\nexport { Annotation };\n// axis\nconst { Line: LineAxis, Circle: CircleAxis } = Axis;\nexport { LineAxis, CircleAxis };\n// grid\nconst { Line: LineGrid, Circle: CircleGrid } = Grid;\nexport { LineGrid, CircleGrid };\n// legend\nconst { Category: CategoryLegend, Continuous: ContinuousLegend } = Legend;\nexport { CategoryLegend, ContinuousLegend };\n// Tooltip\nconst { Html: HtmlTooltip } = Tooltip;\nexport { HtmlTooltip };\n// Slider\nexport { Slider };\n// Scrollbar\nexport { Scrollbar };\n","import { IG } from '../dependents';\n\nconst ENGINES: Record<string, IG> = {};\n\n/**\n * 通过名字获取渲染 engine\n * @param name 渲染引擎名字\n * @returns G engine\n */\nexport function getEngine(name: string): IG {\n  const G = ENGINES[name];\n\n  if (!G) {\n    throw new Error(`G engine '${name}' is not exist, please register it at first.`);\n  }\n\n  return G;\n}\n\n/**\n * 注册渲染引擎\n * @param name\n * @param engine\n */\nexport function registerEngine(name: string, engine: IG) {\n  ENGINES[name] = engine;\n}\n","import { deepMix, each, filter, get } from '@antv/util';\nimport { AxisCfg, CircleCfg, CircleData, Datum } from '../interface';\n\nimport View from '../chart/view';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Circle extends Facet<CircleCfg, CircleData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'circle',\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  protected getRegion(count: number, index: number) {\n    const r = 1 / 2; // 画布半径\n    // 画布圆心\n    const center = { x: 0.5, y: 0.5 };\n    // 每隔分面间隔的弧度\n    const avgAngle = (Math.PI * 2) / count;\n\n    // 当前分面所在的弧度\n    const angle = (-1 * Math.PI) / 2 + avgAngle * index;\n    // TODO 没看懂\n    const facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    const middle = getAnglePoint(center, r - facetR, angle);\n    const startAngle = (Math.PI * 5) / 4; // 右上角\n    const endAngle = (Math.PI * 1) / 4; // 左下角\n\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle),\n    };\n  }\n\n  protected afterEachView(view: View, facet: CircleData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: CircleData) {}\n\n  protected generateFacets(data: Datum[]): CircleData[] {\n    const { fields, type } = this.cfg;\n    const [field] = fields;\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const values = this.getFieldValues(data, field);\n    const count = values.length;\n\n    const rst = [];\n    values.forEach((value: any, index: number) => {\n      const conditions = [{ field, value, values }];\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: CircleData = {\n        type,\n        data: facetData,\n        region: this.getRegion(count, index),\n\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1,\n      };\n      rst.push(facet);\n    });\n    return rst;\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: CircleData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n}\n","import { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { IGroup } from '../dependents';\nimport { AxisCfg, Condition, Datum, FacetCfg, FacetData, FacetDataFilter, Region } from '../interface';\n\nimport View from '../chart/view';\nimport { getAxisOption } from '../util/axis';\n\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nexport abstract class Facet<C extends FacetCfg<FacetData> = FacetCfg<FacetData>, F extends FacetData = FacetData> {\n  /** 分面所在的 view */\n  public view: View;\n  /** 分面容器 */\n  public container: IGroup;\n  /** 是否销毁 */\n  public destroyed: boolean = false;\n\n  /** 分面的配置项 */\n  protected cfg: C;\n  /** 分面之后的所有分面数据结构 */\n  protected facets: F[] = [];\n\n  constructor(view: View, cfg: C) {\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n\n  /**\n   * 初始化过程\n   */\n  public init() {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    }\n\n    // 生成分面布局信息\n    const data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  }\n\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n  public render() {\n    this.renderViews();\n  }\n\n  /**\n   * 更新 facet\n   */\n  public update() {\n    // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  }\n\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n  public clear() {\n    this.clearFacetViews();\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.clear();\n\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  }\n\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n  protected facetToView(facet: F): View {\n    const { region, data, padding = this.cfg.padding } = facet;\n\n    const view = this.view.createView({\n      region,\n      padding,\n    });\n\n    // 设置分面的数据\n    view.data(data || []);\n    facet.view = view;\n\n    // 前置钩子\n    this.beforeEachView(view, facet);\n\n    const { eachView } = this.cfg;\n    if (eachView) {\n      eachView(view, facet);\n    }\n\n    // 后置钩子\n    this.afterEachView(view, facet);\n\n    return view;\n  }\n\n  // 创建容器\n  private createContainer(): IGroup {\n    const foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  }\n\n  /**\n   * 初始化 view\n   */\n  private renderViews() {\n    this.createFacetViews();\n  }\n\n  /**\n   * 创建 分面 view\n   */\n  private createFacetViews(): View[] {\n    // 使用分面数据 创建分面 view\n    return this.facets.map((facet): View => {\n      return this.facetToView(facet);\n    });\n  }\n\n  /**\n   * 从 view 中清除 facetView\n   */\n  private clearFacetViews() {\n    // 从 view 中移除分面 view\n    each(this.facets, (facet) => {\n      if (facet.view) {\n        this.view.removeView(facet.view);\n        facet.view = undefined;\n      }\n    });\n  }\n\n  /**\n   * 解析 spacing\n   */\n  private parseSpacing() {\n    /**\n     * @example\n     *\n     * // 仅使用百分比或像素值\n     * // 横向间隔为 10%，纵向间隔为 10%\n     * ['10%', '10%']\n     * // 横向间隔为 10px，纵向间隔为 10px\n     * [10, 10]\n     *\n     * // 同时使用百分比和像素值\n     * ['10%', 10]\n     * // 横向间隔为 10%，纵向间隔为 10px\n     */\n    const { width, height } = this.view.viewBBox;\n    const { spacing } = this.cfg;\n    return spacing.map((s: number, idx: number) => {\n      if (isNumber(s)) return s / (idx === 0 ? width : height);\n      else return parseFloat(s) / 100;\n    });\n  }\n\n  // 其他一些提供给子类使用的方法\n\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n  protected getFieldValues(data: Datum[], field: string): string[] {\n    const rst = [];\n    const cache: Record<string, boolean> = {};\n\n    // 去重、去除 Nil 值\n    each(data, (d: Datum) => {\n      const value = d[field];\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n\n    return rst;\n  }\n\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number): Region {\n    const [xSpacing, ySpacing] = this.parseSpacing();\n    // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n    // 每个分面区域的横纵占比\n    /**\n     * ratio * num + spacing * (num - 1) = 1\n     * => ratio = (1 - (spacing * (num - 1))) / num\n     *          = (1 + spacing) / num - spacing\n     *\n     * num 对应 cols/rows\n     * spacing 对应 xSpacing/ySpacing\n     */\n    const xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n    const yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing;\n\n    // 得到第 index 个分面区域百分比位置\n    const start = {\n      x: (xRatio + xSpacing) * xIndex,\n      y: (yRatio + ySpacing) * yIndex,\n    };\n    const end = {\n      x: start.x + xRatio,\n      y: start.y + yRatio,\n    };\n    return { start, end };\n  }\n\n  protected getDefaultCfg() {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      spacing: [0, 0],\n      padding: 10,\n      fields: [],\n    };\n  }\n\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n  protected getDefaultTitleCfg() {\n    // @ts-ignore\n    const fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily,\n      },\n    };\n  }\n\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n  protected processAxis(view: View, facet: F) {\n    const options = view.getOptions();\n\n    const coordinateOption = options.coordinate;\n    const geometries = view.geometries;\n\n    const coordinateType = get(coordinateOption, 'type', 'rect');\n\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n      const axes = options.axes;\n\n      const [x, y] = geometries[0].getXYFields();\n\n      const xOption = getAxisOption(axes, x);\n      const yOption = getAxisOption(axes, y);\n\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  }\n\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n  protected getFacetDataFilter(conditions: Condition[]): FacetDataFilter {\n    return (datum: Datum) => {\n      // 过滤出全部满足条件的数据\n      return every(conditions, (condition) => {\n        const { field, value } = condition;\n\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n        return true;\n      });\n    };\n  }\n\n  /**\n   * @override 开始处理 eachView\n   * @param view\n   * @param facet\n   */\n  protected abstract beforeEachView(view: View, facet: F);\n\n  /**\n   * @override 处理 eachView 之后\n   * @param view\n   * @param facet\n   */\n  protected abstract afterEachView(view: View, facet: F);\n\n  /**\n   * @override 生成分面数据，包含布局\n   * @param data\n   */\n  protected abstract generateFacets(data: Datum[]): F[];\n\n  /**\n   * 获取 x 轴的配置\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected abstract getXAxisOption(x: string, axes: any, option: AxisCfg, facet: F): object;\n\n  /**\n   * 获取 y 轴的配置\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected abstract getYAxisOption(y: string, axes: any, option: AxisCfg, facet: F): object;\n}\n","import { lowerCase } from '@antv/util';\nimport { FacetCtor } from '../interface';\nexport { Facet } from './facet';\n\n/**\n * 所有的 Facet 类\n */\nconst Facets: Record<string, FacetCtor> = {};\n\n/**\n * 根据 type 获取 facet 类\n * @param type 分面类型\n */\nexport const getFacet = (type: string): FacetCtor => {\n  return Facets[lowerCase(type)];\n};\n\n/**\n * 注册一个 Facet 类\n * @param type 分面类型\n * @param ctor 分面类\n */\nexport const registerFacet = (type: string, ctor: FacetCtor) => {\n  Facets[lowerCase(type)] = ctor;\n};\n","import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, ListCfg, ListData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class List extends Facet<ListCfg, ListData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'list',\n      cols: null, // 默认显示一列\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: ListData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: ListData) {}\n\n  protected generateFacets(data: Datum[]): ListData[] {\n    const { fields } = this.cfg;\n    let { cols } = this.cfg;\n\n    const [columnField] = fields;\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const colValues = this.getFieldValues(data, columnField);\n\n    const count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n\n    // 总共有几行\n    const rows = this.getPageCount(count, cols);\n    const rst = [];\n\n    colValues.forEach((val, index) => {\n      // 当前 index 在那个行列\n      const { row, col } = this.getRowCol(index, cols);\n\n      const conditions = [{ field: columnField, value: val, values: colValues }];\n\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: ListData = {\n        type: this.cfg.type,\n        data: facetData,\n        region: this.getRegion(rows, cols, col, row),\n\n        columnValue: val,\n        rowValue: val,\n        columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n\n        total: count,\n      };\n\n      rst.push(facet);\n    });\n\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: ListData): object {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (\n      facet.rowIndex !== facet.rowValuesLength - 1 &&\n      facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total\n    ) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: ListData): object {\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: ListData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n  private getPageCount(total: number, pageSize: number): number {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  }\n\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n  private getRowCol(index: number, pageSize: number) {\n    const row = Math.floor(index / pageSize);\n    const col = index % pageSize;\n\n    return { row, col };\n  }\n}\n","import { deepMix, each, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, MatrixCfg, MatrixData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Matrix extends Facet<MatrixCfg, MatrixData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'matrix',\n      showTitle: false,\n      columnTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n      rowTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: MatrixData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: MatrixData) {}\n\n  protected generateFacets(data: Datum[]): MatrixData[] {\n    const { fields, type } = this.cfg;\n\n    // 矩阵中行列相等，等于指定的字段个数\n    const rowValuesLength = fields.length;\n    const columnValuesLength = rowValuesLength;\n\n    const rst = [];\n    for (let i = 0; i < columnValuesLength; i++) {\n      const columnField = fields[i];\n      for (let j = 0; j < rowValuesLength; j++) {\n        const rowField = fields[j];\n\n        const facet: MatrixData = {\n          type,\n          data,\n          region: this.getRegion(rowValuesLength, columnValuesLength, i, j),\n\n          columnValue: columnField,\n          rowValue: rowField,\n          columnField,\n          rowField,\n          columnIndex: i,\n          rowIndex: j,\n          columnValuesLength,\n          rowValuesLength,\n        };\n        rst.push(facet);\n      }\n    }\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: MatrixData): object {\n    // 最后一行显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: MatrixData): object {\n    // 第一列显示\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: MatrixData, facetIndex: number) => {\n      const { columnIndex, rowIndex, columnValuesLength, rowValuesLength, columnValue, rowValue, view } = facet;\n\n      // top\n      if (rowIndex === 0) {\n        const formatter = get(this.cfg.columnTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['50%', '0%'] as [string, string],\n            content: formatter ? formatter(columnValue) : columnValue,\n          },\n          getFactTitleConfig(DIRECTION.TOP),\n          this.cfg.columnTitle\n        );\n\n        view.annotation().text(config);\n      }\n      // right\n      if (columnIndex === columnValuesLength - 1) {\n        const formatter = get(this.cfg.rowTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['100%', '50%'] as [string, string],\n            content: formatter ? formatter(rowValue) : rowValue,\n          },\n          getFactTitleConfig(DIRECTION.RIGHT),\n          this.cfg.rowTitle\n        );\n\n        view.annotation().text(config);\n      }\n    });\n  }\n}\n","import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, MirrorCfg, MirrorData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Mirror extends Facet<MirrorCfg, MirrorData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'mirror',\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n      transpose: false,\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected beforeEachView(view: View, facet: MirrorData) {\n    // 做一下坐标系转化\n    if (this.cfg.transpose) {\n      if (facet.columnIndex % 2 === 0) {\n        view.coordinate().transpose().reflect('x');\n      } else {\n        view.coordinate().transpose();\n      }\n    } else {\n      if (facet.rowIndex % 2 !== 0) {\n        view.coordinate().reflect('y');\n      }\n    }\n  }\n\n  protected afterEachView(view: View, facet: MirrorData) {\n    this.processAxis(view, facet);\n  }\n\n  protected generateFacets(data: Datum[]): MirrorData[] {\n    const [f] = this.cfg.fields;\n\n    const rst = [];\n    let columnValuesLength = 1;\n    let rowValuesLength = 1;\n\n    let columnValues: string[] = [''];\n    let rowValues: string[] = [''];\n\n    let columnField;\n    let rowField;\n\n    if (this.cfg.transpose) {\n      columnField = f;\n      columnValues = this.getFieldValues(data, columnField).slice(0, 2); // 镜像最多两个\n      columnValuesLength = columnValues.length;\n    } else {\n      rowField = f;\n      rowValues = this.getFieldValues(data, rowField).slice(0, 2); // 镜像最多两个\n      rowValuesLength = rowValues.length;\n    }\n\n    // 获取每个维度对应的数据配置片段\n    columnValues.forEach((xVal, xIndex) => {\n      rowValues.forEach((yVal, yIndex) => {\n        const conditions = [\n          { field: columnField, value: xVal, values: columnValues },\n          { field: rowField, value: yVal, values: rowValues },\n        ];\n\n        const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n        const facet: MirrorData = {\n          type: this.cfg.type,\n          data: facetData,\n          region: this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),\n\n          columnValue: xVal,\n          rowValue: yVal,\n          columnField,\n          rowField,\n          columnIndex: xIndex,\n          rowIndex: yIndex,\n          columnValuesLength,\n          rowValuesLength,\n        };\n        rst.push(facet);\n      });\n    });\n\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: MirrorData): object {\n    // 非最后一行\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (facet.columnIndex === 1 || facet.rowIndex === 1) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: MirrorData): object {\n    // do nothing\n    return option;\n  }\n\n  private renderTitle() {\n    each(this.facets, (facet: MirrorData, facetIndex: number) => {\n      const { columnValue, rowValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      if (this.cfg.transpose) {\n        const config = deepMix(\n          {\n            position: ['50%', '0%'] as [string, string],\n            content: formatter ? formatter(columnValue) : columnValue,\n          },\n          getFactTitleConfig(DIRECTION.TOP),\n          this.cfg.title\n        );\n\n        view.annotation().text(config);\n      } else {\n        const config = deepMix(\n          {\n            position: ['100%', '50%'] as [string, string],\n            content: formatter ? formatter(rowValue) : rowValue,\n          },\n          getFactTitleConfig(DIRECTION.RIGHT),\n          this.cfg.title\n        );\n\n        view.annotation().text(config);\n      }\n    });\n  }\n}\n","import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, RectCfg, RectData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 矩阵分面\n */\nexport default class Rect extends Facet<RectCfg, RectData> {\n  protected afterEachView(view: View, facet: RectData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: RectData) {\n    // do nothing\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'rect',\n      columnTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n      rowTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  /**\n   * 生成矩阵分面的分面数据\n   * @param data\n   */\n  protected generateFacets(data: Datum[]): RectData[] {\n    const [columnField, rowField] = this.cfg.fields;\n\n    const rst = [];\n    let columnValuesLength = 1;\n    let rowValuesLength = 1;\n\n    let columnValues: string[] = [''];\n    let rowValues: string[] = [''];\n\n    if (columnField) {\n      columnValues = this.getFieldValues(data, columnField);\n      columnValuesLength = columnValues.length;\n    }\n    if (rowField) {\n      rowValues = this.getFieldValues(data, rowField);\n      rowValuesLength = rowValues.length;\n    }\n\n    // 获取每个维度对应的数据配置片段\n    columnValues.forEach((xVal, xIndex) => {\n      rowValues.forEach((yVal, yIndex) => {\n        const conditions = [\n          { field: columnField, value: xVal, values: columnValues },\n          { field: rowField, value: yVal, values: rowValues },\n        ];\n        const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n        const facet: RectData = {\n          type: this.cfg.type,\n          data: facetData,\n          region: this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),\n\n          columnValue: xVal,\n          rowValue: yVal,\n          columnField,\n          rowField,\n          columnIndex: xIndex,\n          rowIndex: yIndex,\n          columnValuesLength,\n          rowValuesLength,\n        };\n        rst.push(facet);\n      });\n    });\n\n    return rst;\n  }\n\n  private renderTitle(): void {\n    each(this.facets, (facet: RectData, facetIndex: number) => {\n      const { columnIndex, rowIndex, columnValuesLength, columnValue, rowValue, view } = facet;\n\n      // top\n      if (rowIndex === 0) {\n        const formatter = get(this.cfg.columnTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['50%', '0%'] as [string, string],\n            content: formatter ? formatter(columnValue) : columnValue,\n          },\n          getFactTitleConfig(DIRECTION.TOP),\n          this.cfg.columnTitle\n        );\n\n        view.annotation().text(config);\n      }\n      // right\n      if (columnIndex === columnValuesLength - 1) {\n        const formatter = get(this.cfg.rowTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['100%', '50%'] as [string, string],\n            content: formatter ? formatter(rowValue) : rowValue,\n          },\n          getFactTitleConfig(DIRECTION.RIGHT),\n          this.cfg.rowTitle\n        );\n\n        view.annotation().text(config);\n      }\n    });\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: RectData): object {\n    // 非最后一行\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    } else if (facet.columnIndex !== Math.floor((facet.columnValuesLength - 1) / 2)) {\n      // 不是中间列\n      return {\n        ...option,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: RectData): object {\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    } else if (facet.rowIndex !== Math.floor((facet.rowValuesLength - 1) / 2)) {\n      return {\n        ...option,\n        title: null,\n      };\n    }\n    return option;\n  }\n}\n","/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport View from '../chart/view';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { AxisCfg, Condition, Datum, TreeCfg, TreeData } from '../interface';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * Tree Facet\n */\nexport default class Tree extends Facet<TreeCfg, TreeData> {\n  protected afterEachView(view: View, facet: TreeData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: TreeData) {}\n\n  public init() {\n    super.init();\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd',\n        },\n        smooth: false,\n      },\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  protected generateFacets(data: Datum[]): TreeData[] {\n    const fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    const rst = [];\n    const rootFacet: TreeData = {\n      type: this.cfg.type,\n      data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: '',\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  }\n\n  private setRegion(facets: TreeData[]) {\n    this.forceColIndex(facets);\n    facets.forEach((facet) => {\n      // @ts-ignore 允许调整\n      facet.region = this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  }\n\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number) {\n    const xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    const yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    const start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex,\n    };\n\n    const end = {\n      x: start.x + xWidth,\n      y: start.y + (yWidth * 2) / 3, // 预留1/3的空隙，方便添加连接线\n    };\n    return {\n      start,\n      end,\n    };\n  }\n\n  private forceColIndex(facets: TreeData[]) {\n    const leafs: TreeData[] = [];\n    let index = 0;\n    facets.forEach((facet) => {\n      if (this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n\n    leafs.forEach((facet) => {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    const maxLevel = this.cfg.fields.length;\n    for (let i = maxLevel - 1; i >= 0; i--) {\n      const levelFacets = this.getFacetsByLevel(facets, i);\n      // var yIndex = maxLevel - i;\n      for (const facet of levelFacets) {\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex;\n          // @ts-ignore\n          facet.columnIndex = this.getRegionIndex(facet.children);\n          // @ts-ignore\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }\n\n  // get facet use level\n  private getFacetsByLevel(facets: TreeData[], level: number) {\n    const rst: TreeData[] = [];\n    facets.forEach((facet) => {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  // if the facet has children , make it's column index in the middle of it's children\n  private getRegionIndex(children: TreeData[]) {\n    const first = children[0];\n    const last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }\n\n  // is  a leaf without children\n  private isLeaf(facet: TreeData) {\n    return !facet.children || !facet.children.length;\n  }\n\n  private getRows() {\n    return this.cfg.fields.length + 1;\n  }\n\n  // get child\n  private getChildFacets(data: Datum[], level: number, arr: TreeData[]) {\n    // [ 'grade', 'class' ]\n    const fields = this.cfg.fields;\n    const length = fields.length;\n    if (length < level) {\n      return;\n    }\n    const rst = [];\n    // get fist level except root node\n    const field = fields[level - 1];\n    // get field value\n    const values = this.getFieldValues(data, field);\n    values.forEach((value, index) => {\n      const conditions = [{ field, value, values } as Condition];\n      const subData = data.filter(this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        const facet: TreeData = {\n          type: this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: this.getChildFacets(subData, level + 1, arr),\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  public render() {\n    super.render();\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  private afterChartRender = () => {\n    if (this.facets && this.cfg.line) {\n      this.container.clear();\n      this.drawLines(this.facets);\n    }\n  };\n\n  private renderTitle() {\n    each(this.facets, (facet: TreeData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  private drawLines(facets: TreeData[]) {\n    facets.forEach((facet) => {\n      if (!this.isLeaf(facet)) {\n        const children = facet.children;\n        this.addFacetLines(facet, children);\n      }\n    });\n  }\n\n  // add lines with it's children\n  private addFacetLines(facet: TreeData, children: TreeData[]) {\n    const view = facet.view;\n    const region = view.coordinateBBox;\n    // top, right, bottom, left\n    const start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height,\n    };\n\n    children.forEach((subFacet) => {\n      const subRegion = subFacet.view.coordinateBBox;\n      const end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y,\n      };\n\n      const middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2,\n      };\n      const middle2 = {\n        x: end.x,\n        y: middle1.y,\n      };\n      this.drawLine([start, middle1, middle2, end]);\n    });\n  }\n\n  private getPath(points) {\n    const path = [];\n    const smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }\n\n  // draw line width points\n  private drawLine(points) {\n    const path = this.getPath(points);\n    const line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign(\n        {\n          // @ts-ignore\n          path,\n        },\n        line\n      ),\n    });\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n}\n"],"names":["LineAxis","Axis","CircleAxis","LineGrid","Grid","CircleGrid","CategoryLegend","Legend","ContinuousLegend","HtmlTooltip","Tooltip","ENGINES","getEngine","name","G","Error","registerEngine","engine","__extends","Circle","deepMix","_super","getDefaultCfg","call","type","showTitle","title","getDefaultTitleCfg","render","this","cfg","renderTitle","count","index","avgAngle","Math","PI","angle","facetR","sin","middle","getAnglePoint","x","y","startAngle","endAngle","start","end","view","facet","processAxis","data","fields","field","values","getFieldValues","length","rst","forEach","value","conditions","facetData","filter","_this","getFacetDataFilter","region","getRegion","columnValue","columnField","columnIndex","columnValuesLength","rowValue","rowField","rowIndex","rowValuesLength","push","axes","option","each","facets","formatter","get","config","position","content","getFactTitleConfig","DIRECTION","annotation","text","Facet","destroyed","container","createContainer","getData","generateFacets","renderViews","clearFacetViews","clear","remove","undefined","_a","padding","createView","beforeEachView","eachView","afterEachView","getLayer","LAYER","addGroup","createFacetViews","map","facetToView","removeView","viewBBox","width","height","spacing","s","idx","isNumber","parseFloat","cache","d","isNil","rows","cols","xIndex","yIndex","parseSpacing","xSpacing","ySpacing","xRatio","yRatio","style","fontSize","fill","fontFamily","getTheme","options","getOptions","coordinateOption","coordinate","geometries","getXYFields","xOption","getAxisOption","yOption","getXAxisOption","getYAxisOption","datum","every","condition","Facets","getFacet","lowerCase","registerFacet","ctor","List","colValues","getPageCount","val","getRowCol","row","col","total","label","pageSize","floor","Matrix","columnTitle","rowTitle","i","j","facetIndex","Mirror","transpose","reflect","f","columnValues","rowValues","slice","xVal","yVal","Rect","line","drawLines","Tree","init","on","VIEW_LIFE_CIRCLE","afterChartRender","lineWidth","stroke","smooth","rootFacet","getRows","children","getChildFacets","setRegion","forceColIndex","xWidth","yWidth","leafs","isLeaf","levelFacets","getFacetsByLevel","levelFacets_1_1","originColIndex","getRegionIndex","level","first","arr","subData","addFacetLines","coordinateBBox","subFacet","subRegion","bl","tr","middle1","middle2","drawLine","points","path","point","getPath","addShape","attrs","assign"],"sourceRoot":""}