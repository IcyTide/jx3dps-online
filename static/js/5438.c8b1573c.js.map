{"version":3,"file":"static/js/5438.c8b1573c.js","mappings":"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","sources":["../node_modules/@antv/g2/src/chart/view.ts"],"sourcesContent":["import {\n  clone,\n  deepMix,\n  each,\n  filter,\n  find,\n  flatten,\n  get,\n  isBoolean,\n  isFunction,\n  isNil,\n  isObject,\n  isString,\n  isUndefined,\n  mix,\n  remove,\n  set,\n  size,\n  uniqueId,\n  isEqual,\n  isPlainObject,\n  reduce,\n} from '@antv/util';\nimport { Attribute, Coordinate, Event as GEvent, GroupComponent, ICanvas, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AxisOption,\n  ComponentOption,\n  CoordinateCfg,\n  CoordinateOption,\n  Data,\n  Datum,\n  FacetCfgMap,\n  FilterCondition,\n  GeometryOption,\n  LegendOption,\n  LooseObject,\n  Options,\n  Point,\n  Region,\n  ScaleOption,\n  TooltipOption,\n  ViewCfg,\n  ViewPadding,\n  ViewAppendPadding,\n  EventPayload,\n  Padding,\n} from '../interface';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { Facet, getFacet } from '../facet';\nimport Geometry from '../geometry/base';\nimport Element from '../geometry/element';\nimport { createInteraction, Interaction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport Chart from './chart';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport Annotation from './controller/annotation';\nimport { Controller } from './controller/base';\nimport CoordinateController from './controller/coordinate';\nimport Tooltip from './controller/tooltip';\nimport Slider from './controller/slider';\nimport Scrollbar from './controller/scrollbar';\nimport Axis from './controller/axis';\nimport Gesture from './controller/gesture';\nimport Legend from './controller/legend';\nimport Event from './event';\nimport defaultLayout, { Layout } from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n\n/**\n * G2 视图 View 类\n */\nexport class View extends Base {\n  /** view id，全局唯一。 */\n  public id: string;\n  /** 父级 view，如果没有父级，则为空。 */\n  public parent: View;\n  /** 所有的子 view。 */\n  public views: View[] = [];\n  /** 所有的 geometry 实例。 */\n  public geometries: Geometry[] = [];\n  /** 所有的组件 controllers。 */\n  public controllers: Controller[] = [];\n  /** 所有的 Interaction 实例。 */\n  public interactions: Record<string, Interaction> = {};\n\n  /** view 区域空间。 */\n  public viewBBox: BBox;\n  /** 坐标系的位置大小，ViewBBox - padding = coordinateBBox。 */\n  public coordinateBBox: BBox;\n  /** view 的 padding 大小，传入的配置（不是解析之后的值）。 */\n  public padding: ViewPadding;\n  /** padding的基础上增加的调整值 */\n  public appendPadding: ViewAppendPadding;\n  /** G.Canvas 实例。 */\n  public canvas: ICanvas;\n  /** 存储最终计算的 padding 结果 */\n  public autoPadding: PaddingCal;\n\n  /** 三层 Group 图形中的背景层。 */\n  public backgroundGroup: IGroup;\n  /** 三层 Group 图形中的中间层。 */\n  public middleGroup: IGroup;\n  /** 三层 Group 图形中的前景层。 */\n  public foregroundGroup: IGroup;\n  /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n  public limitInPlot: boolean = false;\n\n  /**\n   * 标记 view 的大小位置范围，均是 0 ~ 1 范围，便于开发者使用，起始点为左上角。\n   */\n  protected region: Region;\n  /** 主题配置，存储当前主题配置。 */\n  protected themeObject: LooseObject;\n\n  // 配置信息存储\n  protected options: Options = {\n    data: [],\n    animate: true, // 默认开启动画\n  }; // 初始化为空\n\n  /** 过滤之后的数据 */\n  protected filteredData: Data;\n\n  /** 配置开启的组件插件，默认为全局配置的组件。 */\n  private usedControllers: string[] = getComponentControllerNames();\n\n  /** 所有的 scales */\n  private scalePool: ScalePool = new ScalePool();\n\n  /** 布局函数 */\n  protected layoutFunc: Layout = defaultLayout;\n  /** 生成的坐标系实例，{@link https://github.com/antvis/coord/blob/master/src/coord/base.ts|Coordinate} */\n  protected coordinateInstance: Coordinate;\n  /** Coordinate 相关的控制器类，负责坐标系实例的创建、更新、变换等 */\n  protected coordinateController: CoordinateController;\n  /** 分面类实例 */\n  protected facetInstance: Facet;\n\n  /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n  private isPreMouseInPlot: boolean = false;\n  /** 默认标识位，用于判定数据是否更新 */\n  private isDataChanged: boolean = false;\n  /** 用于判断坐标系范围是否发生变化的标志位 */\n  private isCoordinateChanged: boolean = false;\n  /** 从当前这个 view 创建的 scale key */\n  private createdScaleKeys = new Map<string, boolean>();\n  /** 背景色样式的 shape */\n  private backgroundStyleRectShape;\n  /** 是否同步子 view 的 padding */\n  private syncViewPadding;\n\n  constructor(props: ViewCfg) {\n    super({ visible: props.visible });\n\n    const {\n      id = uniqueId('view'),\n      parent,\n      canvas,\n      backgroundGroup,\n      middleGroup,\n      foregroundGroup,\n      region = { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } },\n      padding,\n      appendPadding,\n      theme,\n      options,\n      limitInPlot,\n      syncViewPadding,\n    } = props;\n\n    this.parent = parent;\n    this.canvas = canvas;\n    this.backgroundGroup = backgroundGroup;\n    this.middleGroup = middleGroup;\n    this.foregroundGroup = foregroundGroup;\n    this.region = region;\n    this.padding = padding;\n    this.appendPadding = appendPadding;\n    // 接受父 view 传入的参数\n    this.options = { ...this.options, ...options };\n    this.limitInPlot = limitInPlot;\n    this.id = id;\n    this.syncViewPadding = syncViewPadding;\n\n    // 初始化 theme\n    this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n    this.init();\n  }\n\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n  public setLayout(layout: Layout) {\n    this.layoutFunc = layout;\n  }\n\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n  public init() {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox();\n\n    // 事件委托机制\n    this.initEvents();\n\n    // 初始化组件 controller\n    this.initComponentController();\n\n    this.initOptions();\n  }\n\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   * @param params render 事件参数\n   */\n  public render(isUpdate: boolean = false, payload?: EventPayload) {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload));\n    // 递归渲染\n    this.paint(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n  public clear() {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n    // 1. 清空缓存和计算数据\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    this.isCoordinateChanged = false; // 复位\n\n    // 2. 清空 geometries\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      geometries[i].clear();\n      // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n      geometries[i].container.remove(true);\n      geometries[i].labelsContainer.remove(true);\n    }\n    this.geometries = [];\n\n    // 3. 清空 controllers\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        (controllers[i] as Annotation).clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    }\n\n    // 4. 删除 scale 缓存\n    this.createdScaleKeys.forEach((v: boolean, k: string) => {\n      this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear();\n\n    // 递归处理子 view\n    const views = this.views;\n    for (let i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  }\n\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n  public destroy() {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    const interactions = this.interactions;\n    // 销毁 interactions\n    each(interactions, (interaction) => {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n\n    this.clear();\n\n    // 销毁 controller 中的组件\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.destroy();\n    }\n\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    super.destroy();\n  }\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n  public changeVisible(visible: boolean): View {\n    super.changeVisible(visible);\n\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible);\n\n    // group.set('visible', visible) 不会触发自动刷新\n    this.getCanvas().draw();\n\n    return this;\n  }\n\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n  public data(data: Data): View {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n  public source(data: Data): View {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  }\n\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n  public filter(field: string, condition: FilterCondition | null): View {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    }\n    // condition 为空，则表示删除过滤条件\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  }\n\n  /**\n   * 开启或者关闭坐标轴。\n   *\n   * ```ts\n   *  view.axis(false); // 不展示坐标轴\n   * ```\n   * @param field 坐标轴开关\n   */\n  public axis(field: boolean): View;\n  /**\n   * 对特定的某条坐标轴进行配置。\n   *\n   * @example\n   * ```ts\n   * view.axis('city', false); // 不展示 'city' 字段对应的坐标轴\n   *\n   * // 将 'city' 字段对应的坐标轴的标题隐藏\n   * view.axis('city', {\n   *   title: null,\n   * });\n   * ```\n   *\n   * @param field 要配置的坐标轴对应的字段名称\n   * @param axisOption 坐标轴具体配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   */\n  public axis(field: string, axisOption: AxisOption): View;\n  public axis(field: string | boolean, axisOption?: AxisOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  }\n\n  /**\n   * 对图例进行整体配置。\n   *\n   * ```ts\n   * view.legend(false); // 关闭图例\n   *\n   * view.legend({\n   *   position: 'right',\n   * }); // 图例进行整体配置\n   * ```\n   * @param field\n   * @returns View\n   */\n  public legend(field: LegendOption): View;\n  /**\n   * 对特定的图例进行配置。\n   *\n   * @example\n   * ```ts\n   * view.legend('city', false); // 关闭某个图例，通过数据字段名进行关联\n   *\n   * // 对特定的图例进行配置\n   * view.legend('city', {\n   *   position: 'right',\n   * });\n   * ```\n   *\n   * @param field 图例对应的数据字段名称\n   * @param legendOption 图例配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   * @returns View\n   */\n  public legend(field: string, legendOption: LegendOption): View;\n  public legend(field: string | LegendOption, legendOption?: LegendOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n      if (isPlainObject(legendOption) && legendOption?.selected) {\n        set(this.options, ['filters', field], (name: string) => {\n          return legendOption?.selected[name] ?? true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  }\n\n  /**\n   * 批量设置 scale 配置。\n   *\n   * ```ts\n   * view.scale({\n   *   sale: {\n   *     min: 0,\n   *     max: 100,\n   *   }\n   * });\n   * ```\n   * Scale 的详细配置项可以参考：https://github.com/antvis/scale#api\n   * @returns View\n   */\n  public scale(field: Record<string, ScaleOption>): View;\n  /**\n   * 为特性的数据字段进行 scale 配置。\n   *\n   * ```ts\n   * view.scale('sale', {\n   *   min: 0,\n   *   max: 100,\n   * });\n   * ```\n   *\n   * @returns View\n   */\n  public scale(field: string, scaleOption: ScaleOption): View;\n  public scale(field: string | Record<string, ScaleOption>, scaleOption?: ScaleOption): View {\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, (v: ScaleOption, k: string) => {\n        set(this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n  public tooltip(cfg: boolean | TooltipOption): View {\n    set(this.options, 'tooltip', cfg);\n\n    return this;\n  }\n\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n  public annotation(): Annotation {\n    return this.getController('annotation');\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n  public guide(): Annotation {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  }\n\n  /**\n   * 坐标系配置。\n   *\n   * @example\n   * ```ts\n   * view.coordinate({\n   *   type: 'polar',\n   *   cfg: {\n   *     radius: 0.85,\n   *   },\n   *   actions: [\n   *     [ 'transpose' ],\n   *   ],\n   * });\n   * ```\n   *\n   * @param option\n   * @returns\n   */\n  public coordinate(option?: CoordinateOption): CoordinateController;\n  /**\n   * 声明坐标系类型，并进行配置。\n   *\n   * ```ts\n   * // 直角坐标系，并进行转置变换\n   * view.coordinate('rect').transpose();\n   *\n   * // 默认创建直角坐标系\n   * view.coordinate();\n   * ```\n   *\n   * @param type 坐标系类型\n   * @param [coordinateCfg] 坐标系配置\n   * @returns\n   */\n  public coordinate(type: string, coordinateCfg?: CoordinateCfg): CoordinateController;\n  public coordinate(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', { type, cfg: coordinateCfg } as CoordinateOption);\n    } else {\n      set(this.options, 'coordinate', type);\n    }\n\n    // 更新 coordinate 配置\n    this.coordinateController.update(this.options.coordinate);\n\n    return this.coordinateController;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n  public coord(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n    // @ts-ignore\n    return this.coordinate(type, coordinateCfg);\n  }\n\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n  public facet<T extends keyof FacetCfgMap>(type: T, cfg: FacetCfgMap[T]): View {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    }\n\n    // 创建新的分面\n    const Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(`facet '${type}' is not exist!`);\n    }\n\n    this.facetInstance = new Ctor(this, { ...cfg, type });\n\n    return this;\n  }\n\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n  public animate(status: boolean): View {\n    set(this.options, 'animate', status);\n    return this;\n  }\n\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n  public updateOptions(options: Options) {\n    this.clear(); // 清空\n    mix(this.options, options);\n\n    // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n    this.views.forEach((view) => view.destroy());\n    this.views = [];\n\n    this.initOptions();\n    // 初始化坐标系大小，保证 padding 计算正确\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  }\n\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n  public option(name: string, opt: any): View {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(`Can't use built in variable name \"${name}\", please change another one.`);\n    }\n\n    // 存入到 option 中\n    set(this.options, name, opt);\n    return this;\n  }\n\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n  public theme(theme: string | LooseObject): View {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n\n    return this;\n  }\n\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n  public interaction(name: string, cfg?: LooseObject): View {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n    }\n\n    // 新建交互实例\n    const interaction = createInteraction(name, this, cfg);\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n    return this;\n  }\n\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n  public removeInteraction(name: string) {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  }\n\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n  public changeData(data: Data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 1. 保存数据\n    this.data(data);\n\n    // 2. 渲染\n    this.paint(true);\n\n    // 3. 遍历子 view 进行 change data\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  }\n\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n  public createView(cfg?: Partial<ViewCfg>): View {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    }\n\n    // 子 view 共享 options 配置数据\n    const sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible,\n    };\n\n    const v = new View({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: this.middleGroup.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: this.foregroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      theme: this.themeObject,\n      padding: this.padding,\n      ...cfg,\n      options: {\n        ...sharedOptions,\n        ...get(cfg, 'options', {}),\n      },\n    });\n\n    this.views.push(v);\n\n    return v;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n  public view(cfg?: Partial<ViewCfg>) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  }\n\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n  public removeView(view: View): View {\n    const removedView = remove(this.views, (v: View) => v === view)[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  }\n  /* end View 管理相关的 API */\n\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n  public getCoordinate() {\n    return this.coordinateInstance;\n  }\n\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n  public getTheme(): LooseObject {\n    return this.themeObject;\n  }\n\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n  public getXScale(): Scale {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    const g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  }\n\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n  public getYScales(): Scale[] {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    const tmpMap = {};\n    const yScales = [];\n    this.geometries.forEach((g: Geometry) => {\n      const yScale = g.getYScale();\n      const field = yScale.field;\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        yScales.push(yScale);\n      }\n    });\n    return yScales;\n  }\n\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n  public getScalesByDim(dimType: 'x' | 'y'): Record<string, Scale> {\n    const geometries = this.geometries;\n    const scales = {};\n\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      const scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  }\n\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n  public getScale(field: string, key?: string): Scale {\n    const defaultKey = key ? key : this.getScaleKey(field);\n    // 调用根节点 view 的方法获取\n    return this.getRootView().scalePool.getScale(defaultKey);\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Please use `getScale`.\n   */\n  public getScaleByField(field: string, key?: string): Scale {\n    return this.getScale(field, key);\n  }\n\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n  public getOptions(): Options {\n    return this.options;\n  }\n\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n  public getData() {\n    return this.filteredData;\n  }\n\n  /**\n   * 获取原始数据\n   * @returns 传入 G2 的原始数据\n   */\n  public getOriginalData() {\n    return this.options.data;\n  }\n\n  /**\n   * 获取布局后的边距 padding\n   * @returns\n   */\n  public getPadding(): Padding {\n    return this.autoPadding.getPadding();\n  }\n\n  /**\n   * 获取当前 view 有的 geometries\n   * @returns\n   */\n  public getGeometries() {\n    return this.geometries;\n  }\n\n  /**\n   * 获取 view 中的所有 geome\n   */\n  public getElements(): Element[] {\n    return reduce(\n      this.geometries,\n      (elements: Element[], geometry: Geometry) => {\n        return elements.concat(geometry.getElements());\n      },\n      []\n    );\n  }\n\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  public getElementsBy(condition: (element: Element) => boolean): Element[] {\n    return this.getElements().filter((el) => condition(el));\n  }\n\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n  public getLayer(layer: LAYER): IGroup {\n    return layer === LAYER.BG\n      ? this.backgroundGroup\n      : layer === LAYER.MID\n      ? this.middleGroup\n      : layer === LAYER.FORE\n      ? this.foregroundGroup\n      : this.foregroundGroup;\n  }\n\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n  public isPointInPlot(point: Point): boolean {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  }\n\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n  public getLegendAttributes(): Attribute[] {\n    return flatten(this.geometries.map((g: Geometry) => g.getGroupAttributes())) as unknown as Attribute[];\n  }\n\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n  public getGroupScales(): Scale[] {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    const scales = this.geometries.map((g: Geometry) => g.getGroupScales());\n    return uniq(flatten(scales));\n  }\n\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n  public getCanvas(): ICanvas {\n    return (this.getRootView() as unknown as Chart).canvas;\n  }\n\n  /**\n   * 获得根节点 view。\n   */\n  public getRootView(): View {\n    let v = this as View;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n      break;\n    }\n    return v;\n  }\n\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n  public getXY(data: Datum): Point {\n    const coordinate = this.getCoordinate();\n    const xScales = this.getScalesByDim('x');\n    const yScales = this.getScalesByDim('y');\n    let x;\n    let y;\n\n    each(data, (value, key) => {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({ x, y });\n    }\n  }\n\n  public getController(name: 'tooltip'): Tooltip;\n  public getController(name: 'axis'): Axis;\n  public getController(name: 'legend'): Legend;\n  public getController(name: 'scrollbar'): Scrollbar;\n  public getController(name: 'slider'): Slider;\n  public getController(name: 'annotation'): Annotation;\n  public getController(name: 'gestucre'): Gesture;\n  public getController(name: string): Controller;\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n  public getController(name: string): Controller {\n    return find(this.controllers, (c: Controller) => c.name === name);\n  }\n\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n  public showTooltip(point: Point): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n    return this;\n  }\n\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n  public hideTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n  public lockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n  public unlockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n  public isTooltipLocked() {\n    const tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  }\n\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n  public getTooltipItems(point: Point) {\n    const tooltip = this.getController('tooltip');\n\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  }\n\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n  public getSnapRecords(point: Point) {\n    const geometries = this.geometries;\n    let rst = [];\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geom = geometries[i];\n      const dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      let record;\n      for (let j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        const data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n        if (record) {\n          rst.push(record);\n        }\n      }\n    }\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      const snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n\n    return rst;\n  }\n\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n  public getComponents(): ComponentOption[] {\n    let components = [];\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n\n    return components;\n  }\n\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n  public filterData(data: Data): Data {\n    const { filters } = this.options;\n    // 不存在 filters，则不需要进行数据过滤\n    if (size(filters) === 0) {\n      return data;\n    }\n\n    // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n    return filter(data, (datum: Datum, idx: number) => {\n      // 所有的 filter 字段\n      const fields = Object.keys(filters);\n\n      // 所有的条件都通过，才算通过\n      return fields.every((field: string) => {\n        const condition = filters[field];\n\n        // condition 返回 true，则保留\n        return condition(datum[field], datum, idx);\n      });\n    });\n  }\n\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n  public filterFieldData(field: string, data: Data): Data {\n    const { filters } = this.options;\n    const condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n    return data.filter((datum: Datum, idx: number) => condition(datum[field], datum, idx));\n  }\n\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n  public adjustCoordinate() {\n    const { start: curStart, end: curEnd } = this.getCoordinate();\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n\n    // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false;\n      // 如果大小没有变化则不更新\n      return;\n    }\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  }\n\n  protected paint(isUpdate: boolean) {\n    this.renderDataRecursive(isUpdate);\n\n    // 处理 sync scale 的逻辑\n    this.syncScale();\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n\n    // 初始化图形、组件位置，计算 padding\n    this.renderPaddingRecursive(isUpdate);\n    // 布局图形、组件\n    this.renderLayoutRecursive(isUpdate);\n    // 背景色 shape\n    this.renderBackgroundStyleShape();\n    // 最终的绘制 render\n    this.renderPaintRecursive(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n\n    this.isDataChanged = false; // 渲染完毕复位\n  }\n\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n  private renderBackgroundStyleShape() {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n    const background = get(this.themeObject, 'background');\n    // 配置了背景色\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false,\n        });\n        this.backgroundStyleRectShape.toBack();\n      }\n\n      // 2. 有了 shape 之后设置背景，位置（更新的时候）\n      const { x, y, width, height } = this.viewBBox;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x,\n        y,\n        width,\n        height,\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  }\n\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderPaddingRecursive(isUpdate: boolean) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox();\n    // 2. 更新 coordinate\n    this.adjustCoordinate();\n    // 3. 初始化组件 component\n    this.initComponents(isUpdate);\n    // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n    // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate();\n\n    // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n    const tooltipController = this.controllers.find((c) => c.name === 'tooltip');\n    tooltipController.update();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderLayoutRecursive(isUpdate: boolean) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    const syncViewPaddingFn =\n      this.syncViewPadding === true\n        ? defaultSyncViewPadding\n        : isFunction(this.syncViewPadding)\n        ? this.syncViewPadding\n        : undefined;\n\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal);\n      // 同步 padding 之后，更新 coordinate\n      this.views.forEach((v: View) => {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    }\n\n    // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n    this.doLayout();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n  protected renderPaintRecursive(isUpdate: boolean) {\n    const middleGroup = this.middleGroup;\n    if (this.limitInPlot) {\n      const { type, attrs } = getCoordinateClipCfg(this.coordinateInstance);\n      middleGroup.setClip({\n        type,\n        attrs,\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    }\n\n    // 1. 渲染几何标记\n    this.paintGeometries(isUpdate);\n    // 2. 绘制组件\n    this.renderComponents(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  }\n\n  // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  protected createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    const currentScaleDef = get(this.options.scales, [field]);\n    const mergedScaleDef = { ...currentScaleDef, ...scaleDef };\n\n    // 2. 是否存在父 view，在则递归，否则创建\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    }\n\n    // 3. 在根节点 view 通过 scalePool 创建\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  }\n\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n  private renderDataRecursive(isUpdate: boolean) {\n    // 1. 处理数据\n    this.doFilterData();\n    // 2. 创建实例\n    this.createCoordinate();\n    // 3. 初始化 Geometry\n    this.initGeometries(isUpdate);\n    // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n    this.renderFacet(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n  private calculateViewBBox() {\n    let x;\n    let y;\n    let width;\n    let height;\n\n    if (this.parent) {\n      const bbox = this.parent.coordinateBBox;\n      // 存在 parent， 那么就是通过父容器大小计算\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    const { start, end } = this.region;\n\n    // 根据 region 计算当前 view 的 bbox 大小。\n    const viewBBox = new BBox(\n      x + width * start.x,\n      y + height * start.y,\n      width * (end.x - start.x),\n      height * (end.y - start.y)\n    );\n\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(\n        x + width * start.x,\n        y + height * start.y,\n        width * (end.x - start.x),\n        height * (end.y - start.y)\n      );\n    }\n\n    // 初始的 coordinate bbox 大小\n    this.coordinateBBox = this.viewBBox;\n  }\n\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n  private initEvents() {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n\n    this.canvas.on('*', this.onCanvasEvent);\n  }\n\n  private onCanvasEvent = (evt: GEvent): void => {\n    const name = evt.name;\n    if (!name.includes(':')) {\n      // 非委托事件\n      const e = this.createViewEvent(evt);\n      // 处理 plot 事件\n      this.doPlotEvent(e);\n      this.emit(name, e);\n    }\n  };\n\n  /**\n   * 初始化插件\n   */\n  private initComponentController() {\n    const usedControllers = this.usedControllers;\n    for (let i = 0, len = usedControllers.length; i < len; i++) {\n      const controllerName = usedControllers[i];\n      const Ctor = getComponentController(controllerName);\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  }\n\n  private createViewEvent(evt: GEvent) {\n    const { shape, name } = evt;\n\n    const data = shape ? shape.get('origin') : null;\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  }\n  /**\n   * 触发事件之后\n   * @param evt\n   */\n  private onDelegateEvents = (evt: GEvent): void => {\n    // 阻止继续冒泡，防止重复事件触发\n    // evt.preventDefault();\n    const { name } = evt;\n    if (!name.includes(':')) {\n      return;\n    }\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = this.createViewEvent(evt);\n\n    // 包含有基本事件、组合事件\n    this.emit(name, e);\n    // const currentTarget = evt.currentTarget as IShape;\n    // const inheritNames = currentTarget.get('inheritNames');\n    // if (evt.delegateObject || inheritNames) {\n    //   const events = this.getEvents();\n    //   each(inheritNames, (subName) => {\n    //     const eventName = `${subName}:${type}`;\n    //     if (events[eventName]) {\n    //       this.emit(eventName, e);\n    //     }\n    //   });\n    // }\n  };\n\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n  private doPlotEvent(e: Event) {\n    const { type, x, y } = e;\n\n    const point = { x, y };\n\n    const ALL_EVENTS = [\n      'mousedown',\n      'mouseup',\n      'mousemove',\n      'mouseleave',\n      'mousewheel',\n      'touchstart',\n      'touchmove',\n      'touchend',\n      'touchcancel',\n      'click',\n      'dblclick',\n      'contextmenu',\n    ];\n\n    if (ALL_EVENTS.includes(type)) {\n      const currentInPlot = this.isPointInPlot(point);\n      const newEvent = e.clone();\n\n      if (currentInPlot) {\n        const TYPE = `plot:${type}`; // 组合 plot 事件\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      }\n\n      // 对于 mouseenter, mouseleave 的计算处理\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        }\n        // 赋新的状态值\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }\n\n  // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n  private doFilterData() {\n    const { data } = this.options;\n    this.filteredData = this.filterData(data);\n  }\n\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n  private initGeometries(isUpdate: boolean) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales();\n    // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n    const coordinate = this.getCoordinate();\n    const scaleDefs = get(this.options, 'scales', {});\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      // 保持 scales 引用不要变化\n      geometry.scales = this.getGeometryScales();\n      const cfg = {\n        coordinate, // 使用 coordinate 引用，可以保持 coordinate 的同步更新\n        scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged,\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }\n\n    // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n    this.adjustScales();\n  }\n\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n  private createOrUpdateScales() {\n    const fields = this.getScaleFields();\n    const groupedFields = this.getGroupedFields();\n\n    const { data, scales = {} } = this.getOptions();\n    const filteredData = this.filteredData;\n\n    for (let i = 0, len = fields.length; i < len; i++) {\n      const field = fields[i];\n      const scaleDef = scales[field];\n\n      // 调用方法，递归去创建\n      const key = this.getScaleKey(field);\n      this.createScale(\n        field,\n        // 分组字段的 scale 使用未过滤的数据创建\n        groupedFields.includes(field) ? data : filteredData,\n        scaleDef,\n        key\n      );\n\n      // 缓存从当前 view 创建的 scale key\n      this.createdScaleKeys.set(key, true);\n    }\n  }\n\n  /**\n   * 处理 scale 同步逻辑\n   */\n  private syncScale() {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  }\n\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n  private getGeometryScales(): Record<string, Scale> {\n    const fields = this.getScaleFields();\n\n    const scales = {};\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n\n    return scales;\n  }\n\n  private getScaleFields() {\n    const fields = [];\n    const tmpMap = new Map();\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  private getGroupedFields() {\n    const fields = [];\n    const tmpMap = new Map();\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n  private adjustScales() {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  }\n\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n  private adjustCategoryScaleRange() {\n    const xyScales = [this.getXScale(), ...this.getYScales()].filter((e) => !!e);\n    const coordinate = this.getCoordinate();\n    const scaleOptions = this.options.scales;\n\n    each(xyScales, (scale: Scale) => {\n      const { field, values, isCategory, isIdentity } = scale;\n\n      // 分类或者 identity 的 scale 才进行处理\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, this.theme);\n        }\n      }\n    });\n  }\n\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n  private initComponents(isUpdate: boolean) {\n    // 先全部清空，然后 render\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      const controller = controllers[i];\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  }\n\n  private doLayout() {\n    this.layoutFunc(this);\n  }\n\n  /**\n   * 创建坐标系\n   * @private\n   */\n  private createCoordinate() {\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  }\n\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n  private paintGeometries(isUpdate: boolean) {\n    const doAnimation = this.options.animate;\n    // geometry 的 paint 阶段\n    const coordinate = this.getCoordinate();\n    const canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height,\n    };\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n      geometry.paint(isUpdate);\n    }\n  }\n\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n  private renderComponents(isUpdate: boolean) {\n    const components = this.getComponents();\n    // 先全部清空，然后 render\n    for (let i = 0; i < components.length; i++) {\n      const co = components[i];\n      (co.component as GroupComponent).render();\n    }\n  }\n\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n  private renderFacet(isUpdate: boolean) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear();\n        // 计算分面数据\n        this.facetInstance.init();\n        // 渲染组件和 views\n        this.facetInstance.render();\n      }\n    }\n  }\n\n  private initOptions() {\n    const {\n      geometries = [],\n      interactions = [],\n      views = [],\n      annotations = [],\n      coordinate,\n      events,\n      facets,\n    } = this.options;\n\n    // 设置坐标系\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    }\n\n    // 创建 geometry 实例\n    for (let i = 0; i < geometries.length; i++) {\n      const geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    }\n\n    // 创建 interactions 实例\n    for (let j = 0; j < interactions.length; j++) {\n      const interactionOption = interactions[j];\n      const { type, cfg } = interactionOption;\n      this.interaction(type, cfg);\n    }\n\n    // 创建 view 实例\n    for (let k = 0; k < views.length; k++) {\n      const viewOption = views[k];\n      this.createView(viewOption);\n    }\n\n    // 设置 annotation\n    const annotationComponent = this.getController('annotation');\n    for (let l = 0; l < annotations.length; l++) {\n      const annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    }\n\n    // 设置 events\n    if (events) {\n      each(events, (eventCallback, eventName) => {\n        this.on(eventName, eventCallback);\n      });\n    }\n\n    if (facets) {\n      each(facets, (facet) => {\n        const { type, ...rest } = facet;\n\n        this.facet(type, rest);\n      });\n    }\n  }\n\n  private createGeometry(geometryOption: GeometryOption) {\n    const { type, cfg = {} } = geometryOption;\n    if (this[type]) {\n      const geometry = this[type](cfg);\n      each(geometryOption, (v, k) => {\n        if (isFunction(geometry[k])) {\n          geometry[k](v);\n        }\n      });\n    }\n  }\n\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n  private getScaleKey(field: string): string {\n    return `${this.id}-${field}`;\n  }\n}\n\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name: string, Ctor: any) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg: any = {}) {\n    const props = {\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup(),\n      ...cfg,\n    };\n\n    const geometry = new Ctor(props);\n    this.geometries.push(geometry);\n\n    return geometry;\n  };\n}\n\nexport default View;\n"],"names":["props","_super","visible","_this","data","animate","getComponentControllerNames","ScalePool","defaultLayout","Map","evt","name","includes","e","createViewEvent","doPlotEvent","emit","id","uniqueId","_a","parent","canvas","backgroundGroup","middleGroup","foregroundGroup","_b","region","start","x","y","end","padding","appendPadding","theme","options","limitInPlot","syncViewPadding","__assign","themeObject","isObject","deepMix","getTheme","createTheme","init","__extends","View","layout","this","layoutFunc","calculateViewBBox","initEvents","initComponentController","initOptions","isUpdate","payload","VIEW_LIFE_CIRCLE","Event","paint","changeVisible","filteredData","coordinateInstance","undefined","isDataChanged","isCoordinateChanged","geometries","i","length","clear","container","remove","labelsContainer","controllers","createdScaleKeys","forEach","v","k","getRootView","scalePool","deleteScale","views","interactions","each","interaction","destroy","len","call","set","getCanvas","draw","console","warn","field","condition","isFunction","get","filters","axisOption","isBoolean","legendOption","isString","isPlainObject","selected","scaleOption","cfg","getController","annotation","type","coordinateCfg","coordinateController","update","coordinate","facetInstance","Ctor","getFacet","Error","status","mix","view","coordinateBBox","viewBBox","opt","prototype","existInteraction","createInteraction","changeData","sharedOptions","scales","clone","axes","getOption","tooltip","legends","addGroup","zIndex","GROUP_Z_INDEX","push","createView","removedView","g","getXScale","tmpMap","yScales","yScale","getYScale","dimType","geometry","scale","key","defaultKey","getScaleKey","getScale","autoPadding","getPadding","reduce","elements","concat","getElements","filter","el","layer","LAYER","point","isPointInCoordinate","getCoordinate","flatten","map","getGroupAttributes","getGroupScales","uniq","xScales","getScalesByDim","value","isNil","convert","find","c","showTooltip","hideTooltip","lockTooltip","unlockTooltip","isTooltipLocked","getTooltipItems","rst","geom","dataArray","sort","record","j","dataLen","findDataByPoint","snapRecords","getSnapRecords","components","controller","getComponents","size","datum","idx","Object","keys","every","isUndefined","curStart","curEnd","bl","tr","isEqual","adjust","renderDataRecursive","syncScale","renderPaddingRecursive","renderLayoutRecursive","renderBackgroundStyleShape","renderPaintRecursive","background","backgroundStyleRectShape","addShape","attrs","capture","toBack","width","height","attr","fill","adjustCoordinate","initComponents","calculatePadding","shrink","parsePadding","syncViewPaddingFn","defaultSyncViewPadding","PaddingCal","doLayout","getCoordinateClipCfg","setClip","paintGeometries","renderComponents","scaleDef","currentScaleDef","mergedScaleDef","createScale","doFilterData","createCoordinate","initGeometries","renderFacet","bbox","BBox","on","onDelegateEvents","onCanvasEvent","usedControllers","controllerName","getComponentController","shape","currentInPlot","isPointInPlot","newEvent","TYPE","isPreMouseInPlot","PLOT_EVENTS","filterData","createOrUpdateScales","scaleDefs","getGeometryScales","adjustScales","fields","getScaleFields","groupedFields","getGroupedFields","getOptions","sync","getScaleByField","geometryScales","groupFields","getGroupFields","adjustCategoryScaleRange","xyScales","__spreadArray","__read","getYScales","scaleOptions","values","isCategory","isIdentity","range","getDefaultCategoryScaleRange","render","create","doAnimation","canvasRegion","minX","minY","maxX","maxY","component","_c","_d","_e","annotations","events","facets","CoordinateController","geometryOption","createGeometry","interactionOption","viewOption","annotationComponent","l","annotationOption","eventCallback","eventName","facet","rest","geometry_1","Base","registerGeometry","toLowerCase"],"sourceRoot":""}