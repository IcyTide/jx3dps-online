{"version":3,"file":"static/js/9420.87951ba4.js","mappings":"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","sources":["../node_modules/@antv/g2/src/interaction/action/mask/base.ts","../node_modules/@antv/g2/src/interaction/action/mask/circle.ts","../node_modules/@antv/g2/src/interaction/action/mask/dim-rect.ts","../node_modules/@antv/g2/src/interaction/action/mask/multiple/base.ts","../node_modules/@antv/g2/src/interaction/action/mask/multiple/circle.ts","../node_modules/@antv/g2/src/interaction/action/mask/multiple/dim-rect.ts","../node_modules/@antv/g2/src/interaction/action/mask/multiple/path.ts","../node_modules/@antv/g2/src/interaction/action/mask/multiple/rect.ts","../node_modules/@antv/g2/src/interaction/action/mask/multiple/smooth-path.ts","../node_modules/@antv/g2/src/interaction/action/mask/path.ts","../node_modules/@antv/g2/src/interaction/action/mask/rect.ts","../node_modules/@antv/g2/src/interaction/action/mask/smooth-path.ts","../node_modules/@antv/g2/src/interaction/action/register.ts","../node_modules/@antv/g2/src/interaction/action/util.ts"],"sourcesContent":["import { deepMix, each } from '@antv/util';\nimport Action from '../base';\nimport { LooseObject } from '../../../interface';\n\n/**\n * @ignore\n * 辅助框 Action 的基类\n */\nabstract class MaskBase extends Action {\n  // mask 图形\n  protected maskShape = null;\n  // 组成 mask 的各个点\n  protected points = [];\n  // 开始 mask 的标记\n  protected starting = false;\n  // 开始移动的标记\n  protected moving = false;\n  protected preMovePoint = null;\n\n  protected shapeType = 'path';\n  // 获取当前的位置\n  protected getCurrentPoint() {\n    const event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y,\n    };\n  }\n  // 触发 mask 的事件\n  protected emitEvent(type) {\n    const eventName = `mask:${type}`;\n    const view = this.context.view;\n    const event = this.context.event;\n    view.emit(eventName, {\n      target: this.maskShape,\n      shape: this.maskShape,\n      points: this.points,\n      x: event.x,\n      y: event.y,\n    });\n  }\n\n  // 创建 mask\n  private createMask() {\n    const view = this.context.view;\n    const maskAttrs = this.getMaskAttrs();\n    const maskShape = view.foregroundGroup.addShape({\n      type: this.shapeType,\n      name: 'mask',\n      draggable: true,\n      attrs: {\n        fill: '#C5D4EB',\n        opacity: 0.3,\n        ...maskAttrs,\n      },\n    });\n    return maskShape;\n  }\n\n  protected abstract getMaskAttrs(): LooseObject;\n\n  // 生成 mask 的路径\n  protected getMaskPath() {\n    return [];\n  }\n\n  /**\n   * 显示\n   */\n  public show() {\n    if (this.maskShape) {\n      this.maskShape.show();\n      this.emitEvent('show');\n    }\n  }\n\n  /**\n   * 开始\n   */\n  public start(arg?: { maskStyle: LooseObject }) {\n    this.starting = true;\n    // 开始时，保证移动结束\n    this.moving = false;\n    this.points = [this.getCurrentPoint()];\n    if (!this.maskShape) {\n      this.maskShape = this.createMask();\n      // 开始时设置 capture: false，可以避免创建、resize 时触发事件\n      this.maskShape.set('capture', false);\n    }\n    this.updateMask(arg?.maskStyle);\n    this.emitEvent('start');\n  }\n\n  /**\n   * 开始移动\n   */\n  public moveStart() {\n    this.moving = true;\n    this.preMovePoint = this.getCurrentPoint();\n  }\n  /**\n   * 移动 mask\n   */\n  public move() {\n    if (!this.moving || !this.maskShape) {\n      return;\n    }\n    const currentPoint = this.getCurrentPoint();\n    const preMovePoint = this.preMovePoint;\n    const dx = currentPoint.x - preMovePoint.x;\n    const dy = currentPoint.y - preMovePoint.y;\n    const points = this.points;\n    each(points, (point) => {\n      point.x += dx;\n      point.y += dy;\n    });\n    this.updateMask();\n    this.emitEvent('change');\n    this.preMovePoint = currentPoint;\n  }\n\n  protected updateMask(maskStyle?: LooseObject) {\n    const attrs = deepMix({}, this.getMaskAttrs(), maskStyle);\n    this.maskShape.attr(attrs);\n  }\n\n  /**\n   * 结束移动\n   */\n  public moveEnd() {\n    this.moving = false;\n    this.preMovePoint = null;\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.starting = false;\n    this.emitEvent('end');\n    if (this.maskShape) {\n      this.maskShape.set('capture', true);\n    }\n  }\n\n  /**\n   * 隐藏\n   */\n  public hide() {\n    if (this.maskShape) {\n      this.maskShape.hide();\n      this.emitEvent('hide');\n    }\n  }\n\n  /**\n   * 大小变化\n   */\n  public resize() {\n    // 只有进行中，才会允许大小变化\n    if (this.starting && this.maskShape) {\n      this.points.push(this.getCurrentPoint());\n      this.updateMask();\n      this.emitEvent('change');\n    }\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.points = [];\n    if (this.maskShape) {\n      this.maskShape.remove();\n    }\n    this.maskShape = null;\n    this.preMovePoint = null;\n    super.destroy();\n  }\n}\n\nexport default MaskBase;\n","import { last } from '@antv/util';\nimport { distance } from '../util';\nimport MaskBase from './base';\n\nexport function getMaskAttrs(points) {\n  const currentPoint = last(points);\n  let r = 0;\n  let x = 0;\n  let y = 0;\n  if (points.length) {\n    const first = points[0];\n    r = distance(first, currentPoint) / 2;\n    x = (currentPoint.x + first.x) / 2;\n    y = (currentPoint.y + first.y) / 2;\n  }\n  return {\n    x,\n    y,\n    r,\n  };\n}\n\n/**\n * @ignore\n * 圆形辅助框 Action\n */\nclass CircleMask extends MaskBase {\n  protected shapeType = 'circle';\n  protected getMaskAttrs() {\n    return getMaskAttrs(this.points);\n  }\n}\n\nexport default CircleMask;\n","import { clamp, head, last } from '@antv/util';\nimport { Region } from '../../../interface';\nimport RectMask from './rect';\n\nfunction clampPoint(point) {\n  point.x = clamp(point.x, 0, 1);\n  point.y = clamp(point.y, 0, 1);\n}\n\nexport function getRegion(points, dim, inPlot, coord): Region {\n  let start = null;\n  let end = null;\n  const normalStart = coord.invert(head(points));\n  const normalEnd = coord.invert(last(points));\n  if (inPlot) {\n    // 约束到 0 - 1 范围内\n    clampPoint(normalStart);\n    clampPoint(normalEnd);\n  }\n  if (dim === 'x') {\n    // x 轴方向扩展, y 轴方向占满全部\n    start = coord.convert({\n      x: normalStart.x,\n      y: 0,\n    });\n    end = coord.convert({\n      x: normalEnd.x,\n      y: 1,\n    });\n  } else {\n    // y 轴方向扩展, x 轴方向占满全部\n    start = coord.convert({\n      x: 0,\n      y: normalStart.y,\n    });\n    end = coord.convert({\n      x: 1,\n      y: normalEnd.y,\n    });\n  }\n  return {\n    start,\n    end,\n  };\n}\n\n/**\n * @ignore\n */\nclass DimRect extends RectMask {\n  protected dim = 'x';\n  protected inPlot = true;\n  protected getRegion() {\n    const coord = this.context.view.getCoordinate();\n    return getRegion(this.points, this.dim, this.inPlot, coord);\n  }\n}\n\nexport default DimRect;\n","import { deepMix } from '@antv/util';\nimport Action from '../../base';\nimport { LooseObject } from '../../../../interface';\n\n/**\n * @ignore\n * 辅助框 Action 的基类\n */\nabstract class MultipleMaskBase extends Action {\n  // mask 图形\n  protected maskShapes = [];\n  // 开始 mask 的标记\n  protected starting = false;\n  // 开始移动的标记\n  protected moving = false;\n  // 记录 mask 节点\n  protected recordPoints = null;\n  protected preMovePoint = null;\n  protected shapeType = 'path';\n  protected maskType = 'multi-mask';\n\n  /**\n   * 获取当前的位置\n   */\n  protected getCurrentPoint() {\n    const event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y,\n    };\n  }\n\n  /**\n   * 触发 mask 的事件\n   * @param type\n   */\n  protected emitEvent(type) {\n    const eventName = `${this.maskType}:${type}`;\n    const view = this.context.view;\n    const event = this.context.event;\n    const target = {\n      type: this.shapeType,\n      name: this.maskType,\n      get: (key: string) => (target.hasOwnProperty(key) ? target[key] : undefined),\n    };\n    view.emit(eventName, {\n      target,\n      maskShapes: this.maskShapes,\n      multiPoints: this.recordPoints,\n      x: event.x,\n      y: event.y,\n    });\n  }\n\n  /**\n   * 创建 mask\n   * @param index\n   */\n  private createMask(index: number) {\n    const view = this.context.view;\n    const points = this.recordPoints[index];\n    const maskAttrs = this.getMaskAttrs(points);\n    const maskShape = view.foregroundGroup.addShape({\n      type: this.shapeType,\n      name: 'mask',\n      draggable: true,\n      attrs: {\n        fill: '#C5D4EB',\n        opacity: 0.3,\n        ...maskAttrs,\n      },\n    });\n    this.maskShapes.push(maskShape);\n  }\n\n  /**\n   * 获取 mask shape attributes\n   * @param points\n   */\n  protected abstract getMaskAttrs(points: number[]): LooseObject;\n\n  /**\n   * 生成 mask 的路径\n   */\n  protected getMaskPath(points) {\n    return [];\n  }\n\n  /**\n   * 显示\n   */\n  public show() {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach((maskShape) => maskShape.show());\n      this.emitEvent('show');\n    }\n  }\n\n  /**\n   * 开始\n   */\n  public start(arg?: { maskStyle: LooseObject }) {\n    this.recordPointStart();\n\n    this.starting = true;\n    // 开始时，保证移动结束\n    this.moving = false;\n    // 开始第 index 个 mask\n    const index = this.recordPoints.length - 1;\n    this.createMask(index);\n    // 开始时设置 capture: false，可以避免创建、resize 时触发事件\n    this.updateShapesCapture(false);\n    this.updateMask(arg?.maskStyle);\n    this.emitEvent('start');\n  }\n\n  /**\n   * 开始移动\n   */\n  public moveStart() {\n    this.moving = true;\n    this.preMovePoint = this.getCurrentPoint();\n    this.updateShapesCapture(false);\n  }\n\n  /**\n   * 移动 mask\n   */\n  public move() {\n    if (!this.moving || this.maskShapes.length === 0) {\n      return;\n    }\n    const currentPoint = this.getCurrentPoint();\n    const preMovePoint = this.preMovePoint;\n    const dx = currentPoint.x - preMovePoint.x;\n    const dy = currentPoint.y - preMovePoint.y;\n\n    // 只移动当前 event (x, y) 所在的某个 mask\n    const index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      this.recordPoints[index].forEach((point) => {\n        point.x += dx;\n        point.y += dy;\n      });\n      this.updateMask();\n      this.emitEvent('change');\n      this.preMovePoint = currentPoint;\n    }\n  }\n\n  /**\n   * 更新\n   * @param maskStyle\n   */\n  protected updateMask(maskStyle?: LooseObject) {\n    this.recordPoints.forEach((points, index) => {\n      const attrs = deepMix({}, this.getMaskAttrs(points), maskStyle);\n      this.maskShapes[index].attr(attrs);\n    });\n  }\n\n  /**\n   * 大小变化\n   */\n  public resize() {\n    if (this.starting && this.maskShapes.length > 0) {\n      this.recordPointContinue();\n\n      this.updateMask();\n      this.emitEvent('change');\n    }\n  }\n\n  /**\n   * 结束移动\n   */\n  public moveEnd() {\n    this.moving = false;\n    this.preMovePoint = null;\n    this.updateShapesCapture(true);\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.starting = false;\n    this.emitEvent('end');\n    this.updateShapesCapture(true);\n  }\n\n  /**\n   * 隐藏\n   */\n  public hide() {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach((maskShape) => maskShape.hide());\n      this.emitEvent('hide');\n    }\n  }\n\n  /**\n   * 清除某个 mask\n   */\n  public remove() {\n    const index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      // event (x, y) 在的某个 mask 区域内时，清除该 mask\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.updateShapesCapture(true);\n      this.emitEvent('change');\n    }\n  }\n\n  /**\n   * 清除全部 mask\n   */\n  public clearAll() {\n    this.recordPointClear();\n    this.maskShapes.forEach((maskShape) => maskShape.remove());\n    this.maskShapes = [];\n    this.preMovePoint = null;\n  }\n\n  /**\n   * 清除\n   */\n  public clear() {\n    const index = this.getCurMaskShapeIndex();\n    if (index === -1) {\n      this.recordPointClear();\n      this.maskShapes.forEach((maskShape) => maskShape.remove());\n      this.maskShapes = [];\n      this.emitEvent('clearAll');\n    } else {\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.emitEvent('clearSingle');\n    }\n    this.preMovePoint = null;\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.clear();\n    super.destroy();\n  }\n\n  /**\n   * 获取 mask 节点记录\n   */\n  protected getRecordPoints() {\n    return [...(this.recordPoints ?? [])];\n  }\n\n  /**\n   * 创建 mask 节点记录\n   */\n  protected recordPointStart() {\n    const recordPoints = this.getRecordPoints();\n    const currentPoint = this.getCurrentPoint();\n    this.recordPoints = [...recordPoints, [currentPoint]];\n  }\n\n  /**\n   * 持续记录 mask 节点\n   */\n  protected recordPointContinue() {\n    const recordPoints = this.getRecordPoints();\n    const currentPoint = this.getCurrentPoint();\n    const lastPoints = recordPoints.splice(-1, 1)[0] || [];\n    lastPoints.push(currentPoint);\n    this.recordPoints = [...recordPoints, lastPoints];\n  }\n\n  /**\n   * 清除 mask 节点 记录\n   */\n  protected recordPointClear() {\n    this.recordPoints = [];\n  }\n\n  /**\n   * 设置 capture\n   * false: 避免创建、resize 时触发事件\n   * true: 正常触发其它事件\n   * @param isCapture\n   */\n  protected updateShapesCapture(isCapture: boolean) {\n    this.maskShapes.forEach((maskShape) => maskShape.set('capture', isCapture));\n  }\n\n  /**\n   *\n   * @returns 获取当前 event (x, y) 所在 maskShape 的 index\n   */\n  protected getCurMaskShapeIndex() {\n    const currentPoint = this.getCurrentPoint();\n    return this.maskShapes.findIndex((maskShape) => {\n      const { width, height, r } = maskShape.attrs;\n      const isEmpty = width === 0 || height === 0 || r === 0;\n      return !isEmpty && maskShape.isHit(currentPoint.x, currentPoint.y);\n    });\n  }\n}\n\nexport default MultipleMaskBase;\n","import MultipleMaskBase from './base';\nimport { getMaskAttrs } from '../circle';\n\n/**\n * @ignore\n * 圆形辅助框 Action\n */\nclass CircleMultiMask extends MultipleMaskBase {\n  protected shapeType = 'circle';\n  protected getMaskAttrs = getMaskAttrs;\n}\n\nexport default CircleMultiMask;\n","import MultipleRectMask from './rect';\nimport { getRegion } from '../dim-rect';\n\n/**\n * @ignore\n */\nclass DimRectMultiMask extends MultipleRectMask {\n  protected dim = 'x';\n  protected inPlot = true;\n  protected getRegion(points) {\n    const coord = this.context.view.getCoordinate();\n    return getRegion(points, this.dim, this.inPlot, coord);\n  }\n}\n\nexport default DimRectMultiMask;\n","import MultipleMaskBase from './base';\nimport { getMaskAttrs, getMaskPath } from '../path';\n\n/**\n * @ignore\n * 多个点构成的 Path 辅助框 Action\n */\nclass PathMultiMask extends MultipleMaskBase {\n  protected getMaskPath = getMaskPath;\n  protected getMaskAttrs = getMaskAttrs;\n  public addPoint() {\n    this.resize();\n  }\n}\n\nexport default PathMultiMask;\n","import MultipleMaskBase from './base';\nimport { getRegion, getMaskAttrs } from '../rect';\n\n/**\n * @ignore\n * 矩形的辅助框 Action\n */\nclass RectMultiMask extends MultipleMaskBase {\n  protected shapeType = 'rect';\n  protected getRegion(points) {\n    return getRegion(points);\n  }\n  protected getMaskAttrs(points) {\n    const { start, end } = this.getRegion(points);\n    return getMaskAttrs(start, end);\n  }\n}\n\nexport default RectMultiMask;\n","import MultiplePathMask from './path';\nimport { getMaskPath, getMaskAttrs } from '../smooth-path';\n\n/**\n * Smooth path mask\n * @ignore\n */\nclass SmoothPathMultiMask extends MultiplePathMask {\n  protected getMaskPath = getMaskPath;\n  protected getMaskAttrs = getMaskAttrs;\n}\n\nexport default SmoothPathMultiMask;\n","import { each } from '@antv/util';\nimport MaskBase from './base';\n\n/**\n * 生成 mask 的路径\n * @param points\n * @returns\n */\nexport function getMaskPath(points) {\n  const path = [];\n  if (points.length) {\n    each(points, (point, index) => {\n      if (index === 0) {\n        path.push(['M', point.x, point.y]);\n      } else {\n        path.push(['L', point.x, point.y]);\n      }\n    });\n    path.push(['L', points[0].x, points[0].y]);\n  }\n  return path;\n}\n\nexport function getMaskAttrs(points) {\n  return {\n    path: getMaskPath(points),\n  };\n}\n\n/**\n * @ignore\n * 多个点构成的 Path 辅助框 Action\n */\nclass PathMask extends MaskBase {\n  protected getMaskPath() {\n    return getMaskPath(this.points);\n  }\n  protected getMaskAttrs() {\n    return getMaskAttrs(this.points);\n  }\n\n  /**\n   * 添加一个点\n   */\n  public addPoint() {\n    this.resize();\n  }\n}\n\nexport default PathMask;\n","import { head, last } from '@antv/util';\nimport { Region } from '../../../interface';\nimport MaskBase from './base';\n\nexport function getRegion(points): Region {\n  return {\n    start: head(points),\n    end: last(points),\n  };\n}\n\n/**\n * 添加图形\n * @param points\n * @returns\n */\nexport function getMaskAttrs(start, end) {\n  const x = Math.min(start.x, end.x);\n  const y = Math.min(start.y, end.y);\n  const width = Math.abs(end.x - start.x);\n  const height = Math.abs(end.y - start.y);\n  return {\n    x,\n    y,\n    width,\n    height,\n  };\n}\n\n/**\n * @ignore\n * 矩形的辅助框 Action\n */\nclass RectMask extends MaskBase {\n  protected shapeType = 'rect';\n  protected getRegion() {\n    return getRegion(this.points);\n  }\n  protected getMaskAttrs() {\n    const { start, end } = this.getRegion();\n    return getMaskAttrs(start, end);\n  }\n}\n\nexport default RectMask;\n","import { getSpline } from '../util';\nimport PathMask from './path';\n\n/**\n * 生成 mask 的路径\n * @param points\n * @returns\n */\nexport function getMaskPath(points) {\n  return getSpline(points, true);\n}\n\nexport function getMaskAttrs(points) {\n  return {\n    path: getMaskPath(points),\n  };\n}\n\n/**\n * Smooth path mask\n * @ignore\n */\nclass SmoothPathMask extends PathMask {\n  protected getMaskPath() {\n    return getMaskPath(this.points);\n  }\n  protected getMaskAttrs() {\n    return getMaskAttrs(this.points);\n  }\n}\n\nexport default SmoothPathMask;\n","import { ActionCallback, IInteractionContext, LooseObject } from '../../interface';\nimport Action from './base';\nimport CallbackAction from './callback';\nimport { get } from '@antv/util';\n\n/** Action 构造函数 */\ntype ActionConstructor = new (context: IInteractionContext, cfg?: LooseObject) => Action;\n\n/** @ignore */\ninterface ActionOption {\n  ActionClass: ActionConstructor;\n  cfg: LooseObject;\n}\n\n// Action 类的缓存\nconst ActionCache: Record<string, ActionOption> = {};\n\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createAction(actionName: string, context: IInteractionContext): Action {\n  const actionOption = ActionCache[actionName];\n  let action = null;\n  if (actionOption) {\n    const { ActionClass, cfg } = actionOption;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n  return action;\n}\n\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\nexport function getActionClass(actionName: string): ActionConstructor {\n  const actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\nexport function registerAction(actionName: string, ActionClass: ActionConstructor, cfg?: LooseObject) {\n  ActionCache[actionName] = {\n    ActionClass,\n    cfg,\n  };\n}\n\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\nexport function unregisterAction(actionName: string) {\n  delete ActionCache[actionName];\n}\n\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createCallbackAction(callback: ActionCallback, context: IInteractionContext): CallbackAction {\n  const action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}\n","import { each, isArray } from '@antv/util';\nimport { View } from '../../chart';\nimport { BBox, PathCommand, Point } from '../../dependents';\nimport Geometry from '../../geometry/base';\nimport Element from '../../geometry/element/';\nimport { catmullRom2bezier, getLinePath } from '../../geometry/shape/util/path';\nimport { toPoints } from '../../util/bbox';\nimport { isPolygonsIntersect } from '@antv/path-util';\nimport { ComponentOption, IInteractionContext, LooseObject } from '../../interface';\n\nfunction getMaskBBox(context: IInteractionContext, tolerance: number) {\n  const event = context.event;\n  const maskShape = event.target;\n  return getMaskBBoxByShape(maskShape, tolerance);\n}\n\n/**\n * 如果 mask BBox 过小则不返回\n */\nfunction isValidMaskBBox(maskShape, tolerance: number) {\n  const maskBBox = maskShape.getCanvasBBox();\n  const { width, height } = maskBBox;\n  return width > 0 && height > 0 && (width >= tolerance || height >= tolerance);\n}\n\n/**\n * 通过 maskShape 获取 mask 的 canvasBBox\n * @param maskShape\n * @param tolerance\n * @returns\n */\nfunction getMaskBBoxByShape(maskShape, tolerance: number) {\n  const maskBBox = maskShape.getCanvasBBox();\n  return isValidMaskBBox(maskShape, tolerance) ? maskBBox : null;\n}\n\n/**\n * 获取 multiple 模式下 mask 的 canvasBBox 数组\n * @param context 上下文\n * @param tolerance box 宽高小于则不返回\n * @returns\n */\nfunction getMultiMaskBBoxList(context: IInteractionContext, tolerance: number) {\n  const { maskShapes } = context.event;\n  return maskShapes.map((maskShape) => getMaskBBoxByShape(maskShape, tolerance)).filter((bBox) => !!bBox);\n}\n\nfunction getMaskPath(context: IInteractionContext, tolerance: number) {\n  const event = context.event;\n  const maskShape = event.target;\n  return getMaskPathByMaskShape(maskShape, tolerance);\n}\n\n/**\n * 通过 maskShape 获取 mask path\n * @param maskShape\n * @param tolerance box 宽高小于则不返回\n * @returns\n */\nfunction getMaskPathByMaskShape(maskShape, tolerance: number) {\n  return isValidMaskBBox(maskShape, tolerance) ? maskShape.attr('path') : null;\n}\n\n/**\n * 获取 multiple 模式下 mask path 数组\n * @param context 上下文\n * @param tolerance box 宽高小于则不返回\n * @returns\n */\nfunction getMultiMaskPathList(context: IInteractionContext, tolerance: number) {\n  const { maskShapes } = context.event;\n  return maskShapes.map((maskShape) => getMaskPathByMaskShape(maskShape, tolerance));\n}\n\n/**\n * 获取当前事件相关的图表元素\n * @param context 交互的上下文\n * @ignore\n */\nexport function getCurrentElement(context: IInteractionContext): Element {\n  const event = context.event;\n  let element;\n  const target = event.target;\n  if (target) {\n    element = target.get('element');\n  }\n  return element;\n}\n\n/**\n * 获取委托对象\n * @param context 上下文\n * @ignore\n */\nexport function getDelegationObject(context: IInteractionContext): LooseObject {\n  const event = context.event;\n  const target = event.target;\n  let delegateObject;\n  if (target) {\n    delegateObject = target.get('delegateObject');\n  }\n  return delegateObject;\n}\n\nexport function isElementChange(context: IInteractionContext) {\n  const event = context.event.gEvent;\n  // 在同一个 element 内部移动，label 和 shape 之间\n  if (event && event.fromShape && event.toShape && event.fromShape.get('element') === event.toShape.get('element')) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * 是否是列表组件\n * @param delegateObject 委托对象\n * @ignore\n */\nexport function isList(delegateObject: LooseObject): boolean {\n  return delegateObject && delegateObject.component && delegateObject.component.isList();\n}\n\n/**\n * 是否是滑块组件\n * @param delegateObject 委托对象\n * @ignore\n */\nexport function isSlider(delegateObject: LooseObject): boolean {\n  return delegateObject && delegateObject.component && delegateObject.component.isSlider();\n}\n\n/**\n * 是否由 mask 触发\n * @param context 上下文\n * @ignore\n */\nexport function isMask(context: IInteractionContext): boolean {\n  const event = context.event;\n  const target = event.target;\n  return (target && target?.get('name') === 'mask') || isMultipleMask(context);\n}\n\n/**\n * 是否由 multiple mask 触发\n * @param context\n * @returns\n */\nexport function isMultipleMask(context: IInteractionContext): boolean {\n  return context.event.target?.get('name') === 'multi-mask';\n}\n\n/**\n * 获取被遮挡的 elements\n * @param context 上下文\n * @ignore\n */\nexport function getMaskedElements(context: IInteractionContext, tolerance: number): Element[] {\n  const target = context.event.target;\n\n  // multiple 模式下\n  if (isMultipleMask(context)) {\n    return getMultiMaskedElements(context, tolerance);\n  }\n\n  // 正常模式下\n  if (target.get('type') === 'path') {\n    const maskPath = getMaskPath(context, tolerance);\n    if (!maskPath) {\n      return;\n    }\n    return getElementsByPath(context.view, maskPath);\n  }\n  const maskBBox = getMaskBBox(context, tolerance);\n  // 如果 bbox 过小则不返回\n  if (!maskBBox) {\n    return null;\n  }\n  return getIntersectElements(context.view, maskBBox);\n}\n\n/**\n * 获取 multiple 模式下被 mask 遮挡的 elements\n * @param context 上下文\n * @returns\n */\nfunction getMultiMaskedElements(context: IInteractionContext, tolerance: number): Element[] {\n  const { target } = context.event;\n  if (target.get('type') === 'path') {\n    const maskPathList = getMultiMaskPathList(context, tolerance);\n    if (maskPathList.length > 0) {\n      return maskPathList.flatMap((maskPath) => getElementsByPath(context.view, maskPath));\n    }\n    return null;\n  }\n  const maskBBoxList = getMultiMaskBBoxList(context, tolerance);\n  if (maskBBoxList.length > 0) {\n    return maskBBoxList.flatMap((maskBBox) => getIntersectElements(context.view, maskBBox));\n  }\n  return null;\n}\n\n/**\n * @ignore\n */\nexport function getSiblingMaskElements(context: IInteractionContext, sibling: View, tolerance: number) {\n  // multiple 模式下\n  if (isMultipleMask(context)) {\n    return getSiblingMultiMaskedElements(context, sibling, tolerance);\n  }\n\n  // 正常模式下\n  const maskBBox = getMaskBBox(context, tolerance);\n  // 如果 bbox 过小则不返回\n  if (!maskBBox) {\n    return null;\n  }\n  return getSiblingMaskElementsByBBox(maskBBox, context, sibling);\n}\n\n/**\n * 通过 mashBBox 获取 sibling 模式下被 mask 遮挡的 elements\n * @param maskBBox\n * @param context 上下文\n * @param sibling sibling view\n * @returns\n */\nfunction getSiblingMaskElementsByBBox(maskBBox, context: IInteractionContext, sibling: View) {\n  const view = context.view;\n  const start = getSiblingPoint(view, sibling, { x: maskBBox.x, y: maskBBox.y });\n  const end = getSiblingPoint(view, sibling, { x: maskBBox.maxX, y: maskBBox.maxY });\n  const box = {\n    minX: start.x,\n    minY: start.y,\n    maxX: end.x,\n    maxY: end.y,\n  };\n  return getIntersectElements(sibling, box);\n}\n\n/**\n * 获取 sibling 模式下被 multiple mask 遮挡的 elements\n * @param context 上下文\n * @param sibling sibling view\n * @param tolerance box 宽高小于则不返回\n * @returns\n */\nfunction getSiblingMultiMaskedElements(context: IInteractionContext, sibling: View, tolerance: number): Element[] {\n  const maskBBoxList = getMultiMaskBBoxList(context, tolerance);\n  if (maskBBoxList.length > 0) {\n    return maskBBoxList.flatMap((maskBBox) => getSiblingMaskElementsByBBox(maskBBox, context, sibling));\n  }\n  return null;\n}\n\n/**\n * 获取所有的图表元素\n * @param view View/Chart\n * @ignore\n */\nexport function getElements(view: View): Element[] {\n  const geometries = view.geometries;\n  let rst: Element[] = [];\n  each(geometries, (geom: Geometry) => {\n    const elements = geom.elements;\n    rst = rst.concat(elements);\n  });\n  if (view.views && view.views.length) {\n    each(view.views, (subView) => {\n      rst = rst.concat(getElements(subView));\n    });\n  }\n  return rst;\n}\n\n/**\n * 获取所有的图表元素\n * @param view View/Chart\n * @param field 字段名\n * @param value 字段值\n * @ignore\n */\nexport function getElementsByField(view: View, field: string, value: any) {\n  const elements = getElements(view);\n  return elements.filter((el) => {\n    return getElementValue(el, field) === value;\n  });\n}\n\n/**\n * 根据状态名获取图表元素\n * @param view View/Chart\n * @param stateName 状态名\n * @ignore\n */\nexport function getElementsByState(view: View, stateName: string): Element[] {\n  const geometries = view.geometries;\n  let rst: Element[] = [];\n  each(geometries, (geom: Geometry) => {\n    const elements = geom.getElementsBy((el) => el.hasState(stateName));\n    rst = rst.concat(elements);\n  });\n  return rst;\n}\n\n/**\n * 获取图表元素对应字段的值\n * @param element 图表元素\n * @param field 字段名\n * @ignore\n */\nexport function getElementValue(element: Element, field) {\n  const model = element.getModel();\n  const record = model.data;\n  let value;\n  if (isArray(record)) {\n    value = record[0][field];\n  } else {\n    value = record[field];\n  }\n  return value;\n}\n\n/**\n * 两个包围盒是否相交\n * @param box1 包围盒1\n * @param box2 包围盒2\n * @ignore\n */\nexport function intersectRect(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n\n/**\n * 获取包围盒内的图表元素\n * @param view View/Chart\n * @param box 包围盒\n * @ignore\n */\nexport function getIntersectElements(view: View, box) {\n  const elements = getElements(view);\n  const rst = [];\n  each(elements, (el) => {\n    const shape = el.shape;\n    const shapeBBox = shape.getCanvasBBox();\n    if (intersectRect(box, shapeBBox)) {\n      rst.push(el);\n    }\n  });\n  return rst;\n}\nfunction pathToPoints(path: any[]) {\n  const points = [];\n  each(path, (seg) => {\n    const command = seg[0];\n    if (command !== 'A') {\n      for (let i = 1; i < seg.length; i = i + 2) {\n        points.push([seg[i], seg[i + 1]]);\n      }\n    } else {\n      const length = seg.length;\n      points.push([seg[length - 2], seg[length - 1]]);\n    }\n  });\n  return points;\n}\n/**\n * 获取包围盒内的图表元素\n * @param view View/Chart\n * @param path 路径\n * @ignore\n */\nexport function getElementsByPath(view: View, path: any[]) {\n  const elements = getElements(view);\n  const points = pathToPoints(path);\n  const rst = elements.filter((el: Element) => {\n    const shape = el.shape;\n    let shapePoints;\n    if (shape.get('type') === 'path') {\n      shapePoints = pathToPoints(shape.attr('path'));\n    } else {\n      const shapeBBox = shape.getCanvasBBox();\n      shapePoints = toPoints(shapeBBox);\n    }\n    return isPolygonsIntersect(points, shapePoints);\n  });\n  return rst;\n}\n\n/**\n * 获取当前 View 的所有组件\n * @param view View/Chart\n * @ignore\n */\nexport function getComponents(view) {\n  return view.getComponents().map((co: ComponentOption) => co.component);\n}\n\n/** @ignore */\nexport function distance(p1: Point, p2: Point) {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/** @ignore */\nexport function getSpline(points: Point[], z: boolean): PathCommand[] {\n  if (points.length <= 2) {\n    return getLinePath(points, false);\n  }\n  const first = points[0];\n  const arr = [];\n  each(points, (point) => {\n    arr.push(point.x);\n    arr.push(point.y);\n  });\n  const path = catmullRom2bezier(arr, z, null);\n  path.unshift(['M', first.x, first.y]);\n  return path;\n}\n\n/**\n * 检测点是否在包围盒内\n * @param box 包围盒\n * @param point 点\n * @ignore\n */\nexport function isInBox(box: BBox, point: Point) {\n  return box.x <= point.x && box.maxX >= point.x && box.y <= point.y && box.maxY > point.y;\n}\n\n/**\n * 获取同 view 同一级的 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSilbings(view: View): View[] {\n  const parent = view.parent;\n  let siblings = null;\n  if (parent) {\n    siblings = parent.views.filter((sub) => sub !== view);\n  }\n  return siblings;\n}\n\nfunction point2Normalize(view: View, point: Point): Point {\n  const coord = view.getCoordinate();\n  return coord.invert(point);\n}\n/**\n * 将 view 上的一点转换成另一个 view 的点\n * @param view 当前的 view\n * @param sibling 同一层级的 view\n * @param point 指定点\n * @ignore\n */\nexport function getSiblingPoint(view: View, sibling: View, point: Point): Point {\n  const normalPoint = point2Normalize(view, point);\n  return sibling.getCoordinate().convert(normalPoint);\n}\n\n/**\n * 是否在记录中，临时因为所有的 view 中的数据不是引用，而使用的方法\n * 不同 view 上对数据的引用不相等，导致无法直接用 includes\n * 假设 x, y 值相等时是同一条数据，这个假设不完全正确，而改成 isEqual 则成本太高\n * 后面改成同一个引用时可以修改回来\n * @param records\n * @param record\n * @param xFiled\n * @param yField\n * @returns\n * @ignore\n */\nexport function isInRecords(records: object[], record: object, xFiled: string, yField: string) {\n  let isIn = false;\n  each(records, (r) => {\n    if (r[xFiled] === record[xFiled] && r[yField] === record[yField]) {\n      isIn = true;\n      return false;\n    }\n  });\n  return isIn;\n}\n\n// 级联获取 field 对应的 scale，如果 view 上没有，遍历子 view\nexport function getScaleByField(view: View, field: string) {\n  let scale = view.getScaleByField(field);\n  if (!scale && view.views) {\n    each(view.views, (subView) => {\n      scale = getScaleByField(subView, field);\n      if (scale) {\n        return false; // 终止循环\n      }\n    });\n  }\n  return scale;\n}\n"],"names":["_this","__extends","MaskBase","event","this","context","x","y","type","eventName","view","emit","target","maskShape","shape","points","maskAttrs","getMaskAttrs","foregroundGroup","addShape","shapeType","name","draggable","attrs","fill","opacity","show","emitEvent","arg","starting","moving","getCurrentPoint","createMask","set","updateMask","maskStyle","preMovePoint","currentPoint","dx","dy","each","point","deepMix","attr","hide","push","remove","_super","destroy","call","Action","last","r","length","first","distance","CircleMask","clampPoint","clamp","getRegion","dim","inPlot","coord","start","end","normalStart","invert","head","normalEnd","convert","DimRect","getCoordinate","RectMask","MultipleMaskBase","maskType","concat","get","key","hasOwnProperty","undefined","maskShapes","multiPoints","recordPoints","index","forEach","recordPointStart","updateShapesCapture","getCurMaskShapeIndex","recordPointContinue","splice","recordPointClear","clear","_a","getRecordPoints","__spreadArray","lastPoints","isCapture","findIndex","width","height","isHit","DimRectMultiMask","MultipleRectMask","getMaskPath","PathMultiMask","resize","RectMultiMask","MultiplePathMask","path","PathMask","Math","min","abs","getSpline","SmoothPathMask","ActionCache","createAction","actionName","actionOption","action","ActionClass","init","registerAction","cfg","createCallbackAction","callback","CallbackAction","getMaskBBox","tolerance","getMaskBBoxByShape","isValidMaskBBox","maskBBox","getCanvasBBox","getMultiMaskBBoxList","map","filter","bBox","getMaskPathByMaskShape","getCurrentElement","element","getDelegationObject","delegateObject","isElementChange","gEvent","fromShape","toShape","isList","component","isSlider","isMask","isMultipleMask","getMaskedElements","maskPathList","getMultiMaskPathList","flatMap","maskPath","getElementsByPath","maskBBoxList","getIntersectElements","getMultiMaskedElements","getSiblingMaskElements","sibling","getSiblingMaskElementsByBBox","getSiblingMultiMaskedElements","getSiblingPoint","maxX","maxY","minX","minY","getElements","geometries","rst","geom","elements","views","subView","getElementsByField","field","value","el","getElementValue","getElementsByState","stateName","getElementsBy","hasState","record","getModel","data","isArray","box","box1","box2","shapeBBox","pathToPoints","seg","i","length_1","shapePoints","toPoints","isPolygonsIntersect","getComponents","co","p1","p2","sqrt","z","getLinePath","arr","catmullRom2bezier","unshift","isInBox","getSilbings","parent","siblings","sub","normalPoint","point2Normalize","isInRecords","records","xFiled","yField","isIn","getScaleByField","scale"],"sourceRoot":""}