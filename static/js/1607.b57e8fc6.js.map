{"version":3,"file":"static/js/1607.b57e8fc6.js","mappings":"4eAGMA,EACJ,8HACIC,EAAe,IAAIC,OACvB,WAAWF,EAAM,wCAAwCA,EAAM,QAAQA,EAAM,QAC7E,MAEIG,EAAc,IAAID,OAAO,qCAAqCF,EAAM,QAAQA,EAAM,KAAM,MAExFI,EAAkB,SAAUC,GAChC,IAAKA,EACH,OAAO,KAGT,IAAIC,EAAAA,EAAAA,IAAQD,GACV,OAAOA,EAET,IAAME,EAAc,CAClBC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAECC,EAAO,GA6Bb,OA3BAC,OAAOjB,GAAYkB,QAAQtB,GAAc,SAACO,EAAGgB,EAAGf,GAC9C,IAAMgB,EAAS,GACXC,EAAOF,EAAEG,cAYb,GAXAlB,EAAEc,QAAQpB,GAAa,SAACK,EAAGgB,GACzBA,GAAKC,EAAOG,MAAMJ,EACnB,IACY,MAATE,GAAgBD,EAAOI,OAAS,IAClCR,EAAKO,KAAK,CAACJ,GAAGM,OAAOL,EAAOM,OAAO,EAAG,KACtCL,EAAO,IACPF,EAAU,MAANA,EAAY,IAAM,KAEX,MAATE,GAAkC,IAAlBD,EAAOI,QACzBR,EAAKO,KAAK,CAACJ,EAAGC,EAAO,KAEV,MAATC,EACFL,EAAKO,KAAK,CAACJ,GAAGM,OAAOL,SAErB,KAAOA,EAAOI,QAAUtB,EAAYmB,KAClCL,EAAKO,KAAK,CAACJ,GAAGM,OAAOL,EAAOM,OAAO,EAAGxB,EAAYmB,MAC7CnB,EAAYmB,MAKrB,OAAOrB,CACR,IAEMgB,CACR,EAGKW,EAAqB,SAAUC,EAAKb,GAGxC,IAFA,IAAMc,EAAI,GAEDC,EAAI,EAAGC,EAAOH,EAAIJ,OAAQO,EAAO,GAAKhB,EAAIe,EAAGA,GAAK,EAAG,CAC5D,IAAME,EAAI,CACR,CACEC,GAAIL,EAAIE,EAAI,GACZI,GAAIN,EAAIE,EAAI,IAEd,CACEG,GAAIL,EAAIE,GACRI,GAAIN,EAAIE,EAAI,IAEd,CACEG,GAAIL,EAAIE,EAAI,GACZI,GAAIN,EAAIE,EAAI,IAEd,CACEG,GAAIL,EAAIE,EAAI,GACZI,GAAIN,EAAIE,EAAI,KAGZf,EACGe,EAKMC,EAAO,IAAMD,EACtBE,EAAE,GAAK,CACLC,GAAIL,EAAI,GACRM,GAAIN,EAAI,IAEDG,EAAO,IAAMD,IACtBE,EAAE,GAAK,CACLC,GAAIL,EAAI,GACRM,GAAIN,EAAI,IAEVI,EAAE,GAAK,CACLC,GAAIL,EAAI,GACRM,GAAIN,EAAI,KAhBVI,EAAE,GAAK,CACLC,GAAIL,EAAIG,EAAO,GACfG,GAAIN,EAAIG,EAAO,IAkBfA,EAAO,IAAMD,EACfE,EAAE,GAAKA,EAAE,GACCF,IACVE,EAAE,GAAK,CACLC,GAAIL,EAAIE,GACRI,GAAIN,EAAIE,EAAI,KAIlBD,EAAEN,KAAK,CACL,MACES,EAAE,GAAGC,EAAI,EAAID,EAAE,GAAGC,EAAID,EAAE,GAAGC,GAAK,IAChCD,EAAE,GAAGE,EAAI,EAAIF,EAAE,GAAGE,EAAIF,EAAE,GAAGE,GAAK,GACjCF,EAAE,GAAGC,EAAI,EAAID,EAAE,GAAGC,EAAID,EAAE,GAAGC,GAAK,GAChCD,EAAE,GAAGE,EAAI,EAAIF,EAAE,GAAGE,EAAIF,EAAE,GAAGE,GAAK,EACjCF,EAAE,GAAGC,EACLD,EAAE,GAAGE,GAER,CAED,OAAOL,CACR,EAEKM,EAAc,SAAUF,EAAGC,EAAGE,EAAIC,EAAIlC,GAC1C,IAAImC,EAAM,GAQV,GAPU,OAANnC,GAAqB,OAAPkC,IAChBA,EAAKD,GAEPH,GAAKA,EACLC,GAAKA,EACLE,GAAMA,EACNC,GAAMA,EACI,OAANlC,EAAY,CACd,IAAMoC,EAAMC,KAAKC,GAAK,IAChBC,EAAKT,EAAIG,EAAKI,KAAKG,KAAKN,EAAKE,GAC7BK,EAAKX,EAAIG,EAAKI,KAAKG,KAAKxC,EAAIoC,GAGlCD,EAAM,CACJ,CAAC,IAAKI,EAHGR,EAAIE,EAAKI,KAAKK,KAAKR,EAAKE,IAIjC,CAAC,IAAKH,EAAIA,EAAI,IAAKjC,EAAIkC,EAAK,KAAM,EAAGO,EAH5BV,EAAIE,EAAKI,KAAKK,KAAK1C,EAAIoC,IAKnC,MACCD,EAAM,CAAC,CAAC,IAAKL,EAAGC,GAAI,CAAC,IAAK,GAAIG,GAAK,CAAC,IAAKD,EAAIC,EAAI,EAAG,EAAG,EAAG,EAAG,EAAIA,GAAK,CAAC,IAAKD,EAAIC,EAAI,EAAG,EAAG,EAAG,GAAI,EAAIA,GAAK,CAAC,MAE7G,OAAOC,CACR,EAEKQ,EAAiB,SAAUC,GAG/B,KAFAA,EAAYhD,EAAgBgD,MAETA,EAAUvB,OAC3B,MAAO,CAAC,CAAC,IAAK,EAAG,IAEnB,IAMIwB,EACAC,EAPAX,EAAM,GACNL,EAAI,EACJC,EAAI,EACJgB,EAAK,EACLC,EAAK,EACLC,EAAQ,EAGY,MAApBL,EAAU,GAAG,KAGfG,EAFAjB,GAAKc,EAAU,GAAG,GAGlBI,EAFAjB,GAAKa,EAAU,GAAG,GAGlBK,IACAd,EAAI,GAAK,CAAC,IAAKL,EAAGC,IAOpB,IALA,IAAMmB,EACiB,IAArBN,EAAUvB,QACU,MAApBuB,EAAU,GAAG,IACqB,MAAlCA,EAAU,GAAG,GAAGO,eACkB,MAAlCP,EAAU,GAAG,GAAGO,cACT7C,OAAC,EAAE8C,OAAE,EAAEzB,EAAIsB,EAAOI,EAAKT,EAAUvB,OAAQM,EAAI0B,EAAI1B,IAAK,CAI7D,GAHAQ,EAAIf,KAAMd,EAAI,KAEduC,GADAO,EAAKR,EAAUjB,IACN,MACGkB,EAAIM,cAEd,OADA7C,EAAE,GAAKuC,EAAIM,cACH7C,EAAE,IACR,IAAK,IACHA,EAAE,GAAK8C,EAAG,GACV9C,EAAE,GAAK8C,EAAG,GACV9C,EAAE,GAAK8C,EAAG,GACV9C,EAAE,GAAK8C,EAAG,GACV9C,EAAE,GAAK8C,EAAG,GACV9C,EAAE,IAAM8C,EAAG,GAAKtB,EAChBxB,EAAE,IAAM8C,EAAG,GAAKrB,EAChB,MACF,IAAK,IACHzB,EAAE,IAAM8C,EAAG,GAAKrB,EAChB,MACF,IAAK,IACHzB,EAAE,IAAM8C,EAAG,GAAKtB,EAChB,MACF,IAAK,IAEH,IAAK,IAAIwB,EAAI,EAAGC,GADhBT,EAAO,CAAChB,EAAGC,GAAGT,OAAO8B,EAAGI,MAAM,KACJnC,OAAQiC,EAAIC,EAAID,IACxCR,EAAKQ,IAAMR,EAAKQ,GAAKxB,EACrBgB,IAAOQ,IAAMR,EAAKQ,GAAKvB,EAEzBI,EAAIsB,MACJtB,EAAMA,EAAIb,OAAOE,EAAmBsB,EAAMI,IAC1C,MACF,IAAK,IACHf,EAAIsB,OACJX,EAAOd,EAAYF,EAAGC,EAAGqB,EAAG,GAAIA,EAAG,KAC9BhC,KAAK0B,EAAK,IACfX,EAAMA,EAAIb,OAAOwB,GACjB,MACF,IAAK,IACHX,EAAIsB,MACJtB,EAAMA,EAAIb,OAAOU,EAAYF,EAAGC,EAAGqB,EAAG,GAAIA,EAAG,GAAIA,EAAG,KACpD9C,EAAI,CAAC,KAAKgB,OAAOa,EAAIA,EAAId,OAAS,GAAGmC,OAAO,IAC5C,MACF,IAAK,IACHT,GAAMK,EAAG,GAAKtB,EACdkB,GAAMI,EAAG,GAAKrB,EACd,MACF,QACE,IAASuB,EAAI,EAAGC,EAAKH,EAAG/B,OAAQiC,EAAIC,EAAID,IACtChD,EAAEgD,IAAMF,EAAGE,IAAMA,EAAI,EAAIxB,EAAIC,QAG9B,GAAY,MAARc,EACTC,EAAO,CAAChB,EAAGC,GAAGT,OAAO8B,EAAGI,MAAM,IAC9BrB,EAAIsB,MACJtB,EAAMA,EAAIb,OAAOE,EAAmBsB,EAAMI,IAC1C5C,EAAI,CAAC,KAAKgB,OAAO8B,EAAGI,OAAO,SACtB,GAAY,MAARX,EACTV,EAAIsB,OACJX,EAAOd,EAAYF,EAAGC,EAAGqB,EAAG,GAAIA,EAAG,KAC9BhC,KAAK0B,EAAK,IACfX,EAAMA,EAAIb,OAAOwB,QACZ,GAAY,MAARD,EACTV,EAAIsB,MACJtB,EAAMA,EAAIb,OAAOU,EAAYF,EAAGC,EAAGqB,EAAG,GAAIA,EAAG,GAAIA,EAAG,KACpD9C,EAAI,CAAC,KAAKgB,OAAOa,EAAIA,EAAId,OAAS,GAAGmC,OAAO,SAE5C,IAAK,IAAIE,EAAI,EAAGC,EAAKP,EAAG/B,OAAQqC,EAAIC,EAAID,IACtCpD,EAAEoD,GAAKN,EAAGM,GAId,GAAY,OADZb,EAAMA,EAAIM,eAER,OAAQ7C,EAAE,IACR,IAAK,IACHwB,GAAKiB,EACLhB,GAAKiB,EACL,MACF,IAAK,IACHlB,EAAIxB,EAAE,GACN,MACF,IAAK,IACHyB,EAAIzB,EAAE,GACN,MACF,IAAK,IACHyC,EAAKzC,EAAEA,EAAEe,OAAS,GAClB2B,EAAK1C,EAAEA,EAAEe,OAAS,GAClB,MACF,QACES,EAAIxB,EAAEA,EAAEe,OAAS,GACjBU,EAAIzB,EAAEA,EAAEe,OAAS,GAGxB,CAED,OAAOc,CACR,EAEKyB,EAAM,SAAUrB,EAAIsB,EAAIpB,EAAIqB,GAChC,MAAO,CAACvB,EAAIsB,EAAIpB,EAAIqB,EAAIrB,EAAIqB,EAC7B,EAEKC,EAAM,SAAUxB,EAAIsB,EAAIG,EAAIC,EAAIxB,EAAIqB,GACxC,IAAMI,EAAM,EAAI,EACVC,EAAM,EAAI,EAChB,MAAO,CAACD,EAAM3B,EAAK4B,EAAMH,EAAIE,EAAML,EAAKM,EAAMF,EAAIC,EAAMzB,EAAK0B,EAAMH,EAAIE,EAAMJ,EAAKK,EAAMF,EAAIxB,EAAIqB,EACjG,EAEKM,EAAM,SAANA,EAAgB7B,EAAIsB,EAAI5B,EAAIC,EAAImC,EAAOC,EAAgBC,EAAY9B,EAAIqB,EAAIU,GAG3EvC,IAAOC,IACTD,GAAM,GAGR,IAGIwC,EACAC,EACAC,EACAC,EACAC,EAPEC,EAAkB,IAAVzC,KAAKC,GAAY,IACzBF,EAAOC,KAAKC,GAAK,MAAS+B,GAAS,GACrClC,EAAM,GAMJ4C,EAAS,SAAUjD,EAAGC,EAAGK,GAG7B,MAAO,CACLN,EAHQA,EAAIO,KAAKG,IAAIJ,GAAOL,EAAIM,KAAKK,IAAIN,GAIzCL,EAHQD,EAAIO,KAAKK,IAAIN,GAAOL,EAAIM,KAAKG,IAAIJ,GAK5C,EACD,GAAKoC,EA6CHE,EAAKF,EAAU,GACfG,EAAKH,EAAU,GACfI,EAAKJ,EAAU,GACfK,EAAKL,EAAU,OAhDD,CAEdjC,GADAkC,EAAKM,EAAOxC,EAAIsB,GAAKzB,IACbN,EACR+B,EAAKY,EAAG1C,EAERU,GADAgC,EAAKM,EAAOtC,EAAIqB,GAAK1B,IACbN,EACRgC,EAAKW,EAAG1C,EACJQ,IAAOE,GAAMoB,IAAOC,IAEtBrB,GAAM,EACNqB,GAAM,GAIR,IAAMhC,GAAKS,EAAKE,GAAM,EAChBV,GAAK8B,EAAKC,GAAM,EAClB3D,EAAK2B,EAAIA,GAAMG,EAAKA,GAAOF,EAAIA,GAAMG,EAAKA,GAC1C/B,EAAI,IAEN8B,GADA9B,EAAIkC,KAAK2C,KAAK7E,GAEd+B,GAAK/B,GAEP,IAAM8E,EAAMhD,EAAKA,EACXiD,EAAMhD,EAAKA,EACXwB,GACHY,IAAmBC,GAAc,EAAI,GACtClC,KAAK2C,KAAK3C,KAAK8C,KAAKF,EAAMC,EAAMD,EAAMlD,EAAIA,EAAImD,EAAMpD,EAAIA,IAAMmD,EAAMlD,EAAIA,EAAImD,EAAMpD,EAAIA,KACxF8C,EAAMlB,EAAIzB,EAAKF,EAAKG,GAAMK,EAAKE,GAAM,EACrCoC,EAAMnB,GAAKxB,EAAKJ,EAAKG,GAAM4B,EAAKC,GAAM,EAEtCY,EAAKrC,KAAK+C,OAAOvB,EAAKgB,GAAM3C,GAAImD,QAAQ,IAExCV,EAAKtC,KAAK+C,OAAOtB,EAAKe,GAAM3C,GAAImD,QAAQ,IAExCX,EAAKnC,EAAKqC,EAAKvC,KAAKC,GAAKoC,EAAKA,EAC9BC,EAAKlC,EAAKmC,EAAKvC,KAAKC,GAAKqC,EAAKA,EAC9BD,EAAK,IAAMA,EAAe,EAAVrC,KAAKC,GAASoC,GAC9BC,EAAK,IAAMA,EAAe,EAAVtC,KAAKC,GAASqC,GAC1BJ,GAAcG,EAAKC,IACrBD,GAAoB,EAAVrC,KAAKC,KAEZiC,GAAcI,EAAKD,IACtBC,GAAoB,EAAVtC,KAAKC,GAElB,CAMD,IAAIgD,EAAKX,EAAKD,EACd,GAAIrC,KAAK8C,IAAIG,GAAMR,EAAM,CACvB,IAAMS,EAAQZ,EACRa,EAAQ/C,EACRgD,EAAQ3B,EACda,EAAKD,EAAKI,GAAQP,GAAcI,EAAKD,EAAK,GAAK,GAG/CvC,EAAMiC,EAFN3B,EAAKmC,EAAK3C,EAAKI,KAAKG,IAAImC,GACxBb,EAAKe,EAAK3C,EAAKG,KAAKK,IAAIiC,GACN1C,EAAIC,EAAImC,EAAO,EAAGE,EAAYiB,EAAOC,EAAO,CAACd,EAAIY,EAAOX,EAAIC,GAC/E,CACDS,EAAKX,EAAKD,EACV,IAAMgB,EAAKrD,KAAKG,IAAIkC,GACdiB,EAAKtD,KAAKK,IAAIgC,GACdkB,EAAKvD,KAAKG,IAAImC,GACdkB,EAAKxD,KAAKK,IAAIiC,GACdlE,EAAI4B,KAAKyD,IAAIR,EAAK,GAClBS,EAAM,EAAI,EAAK9D,EAAKxB,EACpBuF,EAAM,EAAI,EAAK9D,EAAKzB,EACpBwF,EAAK,CAAC1D,EAAIsB,GACVqC,EAAK,CAAC3D,EAAKwD,EAAKJ,EAAI9B,EAAKmC,EAAKN,GAC9BS,EAAK,CAAC1D,EAAKsD,EAAKF,EAAI/B,EAAKkC,EAAKJ,GAC9BQ,EAAK,CAAC3D,EAAIqB,GAGhB,GAFAoC,EAAG,GAAK,EAAID,EAAG,GAAKC,EAAG,GACvBA,EAAG,GAAK,EAAID,EAAG,GAAKC,EAAG,GACnB1B,EACF,MAAO,CAAC0B,EAAIC,EAAIC,GAAI9E,OAAOa,GAI7B,IADA,IAAMkE,EAAS,GACN1E,EAAI,EAAG0B,GAFhBlB,EAAM,CAAC+D,EAAIC,EAAIC,GAAI9E,OAAOa,GAAKmE,OAAOC,MAAM,MAEnBlF,OAAQM,EAAI0B,EAAI1B,IACvC0E,EAAO1E,GAAKA,EAAI,EAAIoD,EAAO5C,EAAIR,EAAI,GAAIQ,EAAIR,GAAIS,GAAKL,EAAIgD,EAAO5C,EAAIR,GAAIQ,EAAIR,EAAI,GAAIS,GAAKN,EAE1F,OAAOuE,CACR,EAEKG,EAAc,SAAUC,EAAMC,GAClC,IA0BIrD,EA1BExB,EAAIc,EAAe8D,GACnBE,EAAKD,GAAS/D,EAAe+D,GAC7BE,EAAQ,CACZ9E,EAAG,EACHC,EAAG,EACH8E,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,EAAG,EACHC,GAAI,KACJC,GAAI,MAEAC,EAAS,CACbrF,EAAG,EACHC,EAAG,EACH8E,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,EAAG,EACHC,GAAI,KACJC,GAAI,MAEAE,EAAS,GACTC,EAAS,GACXC,EAAS,GACTC,EAAO,GAELC,EAAc,SAAUf,EAAM/E,EAAG6F,GACrC,IAAIE,EACAC,EACJ,IAAKjB,EACH,MAAO,CAAC,IAAK/E,EAAEI,EAAGJ,EAAEK,EAAGL,EAAEI,EAAGJ,EAAEK,EAAGL,EAAEI,EAAGJ,EAAEK,GAS1C,SANE0E,EAAK,IACL,CACEkB,EAAG,EACHC,EAAG,MAEDlG,EAAEuF,GAAKvF,EAAEwF,GAAK,MACZT,EAAK,IACX,IAAK,IACH/E,EAAEqF,EAAIN,EAAK,GACX/E,EAAEsF,EAAIP,EAAK,GACX,MACF,IAAK,IACHA,EAAO,CAAC,KAAKnF,OAAO8C,EAAIyD,MAAM,EAAG,CAACnG,EAAEI,EAAGJ,EAAEK,GAAGT,OAAOmF,EAAKjD,MAAM,MAC9D,MACF,IAAK,IACU,MAAT+D,GAAyB,MAATA,GAElBE,EAAW,EAAN/F,EAAEI,EAAQJ,EAAEmF,GACjBa,EAAW,EAANhG,EAAEK,EAAQL,EAAEoF,KAGjBW,EAAK/F,EAAEI,EACP4F,EAAKhG,EAAEK,GAET0E,EAAO,CAAC,IAAKgB,EAAIC,GAAIpG,OAAOmF,EAAKjD,MAAM,IACvC,MACF,IAAK,IACU,MAAT+D,GAAyB,MAATA,GAElB7F,EAAEuF,GAAW,EAANvF,EAAEI,EAAQJ,EAAEuF,GACnBvF,EAAEwF,GAAW,EAANxF,EAAEK,EAAQL,EAAEwF,KAGnBxF,EAAEuF,GAAKvF,EAAEI,EACTJ,EAAEwF,GAAKxF,EAAEK,GAEX0E,EAAO,CAAC,KAAKnF,OAAOyC,EAAIrC,EAAEI,EAAGJ,EAAEK,EAAGL,EAAEuF,GAAIvF,EAAEwF,GAAIT,EAAK,GAAIA,EAAK,KAC5D,MACF,IAAK,IACH/E,EAAEuF,GAAKR,EAAK,GACZ/E,EAAEwF,GAAKT,EAAK,GACZA,EAAO,CAAC,KAAKnF,OAAOyC,EAAIrC,EAAEI,EAAGJ,EAAEK,EAAG0E,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,KAClE,MACF,IAAK,IACHA,EAAO,CAAC,KAAKnF,OAAOsC,EAAIlC,EAAEI,EAAGJ,EAAEK,EAAG0E,EAAK,GAAIA,EAAK,KAChD,MACF,IAAK,IACHA,EAAO,CAAC,KAAKnF,OAAOsC,EAAIlC,EAAEI,EAAGJ,EAAEK,EAAG0E,EAAK,GAAI/E,EAAEK,IAC7C,MACF,IAAK,IACH0E,EAAO,CAAC,KAAKnF,OAAOsC,EAAIlC,EAAEI,EAAGJ,EAAEK,EAAGL,EAAEI,EAAG2E,EAAK,KAC5C,MACF,IAAK,IACHA,EAAO,CAAC,KAAKnF,OAAOsC,EAAIlC,EAAEI,EAAGJ,EAAEK,EAAGL,EAAEqF,EAAGrF,EAAEsF,IAK7C,OAAOP,CACR,EACKqB,EAAS,SAAUC,EAAIpG,GAC3B,GAAIoG,EAAGpG,GAAGN,OAAS,EAAG,CACpB0G,EAAGpG,GAAGqG,QAEN,IADA,IAAMC,EAAKF,EAAGpG,GACPsG,EAAG5G,QACR+F,EAAOzF,GAAK,IACZgF,IAAOU,EAAO1F,GAAK,KACnBoG,EAAGxG,OAAOI,IAAK,EAAG,CAAC,KAAKL,OAAO2G,EAAG1G,OAAO,EAAG,KAE9CwG,EAAGxG,OAAOI,EAAG,GACb0B,EAAKhB,KAAK6F,IAAIrG,EAAER,OAASsF,GAAMA,EAAGtF,QAAW,EAC9C,CACF,EACK8G,EAAO,SAAUC,EAAO1B,EAAO2B,EAAIC,EAAI3G,GACvCyG,GAAS1B,GAAyB,MAAhB0B,EAAMzG,GAAG,IAA8B,MAAhB+E,EAAM/E,GAAG,KACpD+E,EAAMnF,OAAOI,EAAG,EAAG,CAAC,IAAK2G,EAAGxG,EAAGwG,EAAGvG,IAClCsG,EAAGxB,GAAK,EACRwB,EAAGvB,GAAK,EACRuB,EAAGvG,EAAIsG,EAAMzG,GAAG,GAChB0G,EAAGtG,EAAIqG,EAAMzG,GAAG,GAChB0B,EAAKhB,KAAK6F,IAAIrG,EAAER,OAASsF,GAAMA,EAAGtF,QAAW,GAEhD,EACDgC,EAAKhB,KAAK6F,IAAIrG,EAAER,OAASsF,GAAMA,EAAGtF,QAAW,GAC7C,IAAK,IAAIM,EAAI,EAAGA,EAAI0B,EAAI1B,IAAK,CAC3BE,EAAEF,KAAO2F,EAASzF,EAAEF,GAAG,IAER,MAAX2F,IAEFF,EAAOzF,GAAK2F,EACZ3F,IAAM4F,EAAOH,EAAOzF,EAAI,KAE1BE,EAAEF,GAAK6F,EAAY3F,EAAEF,GAAIiF,EAAOW,GAEd,MAAdH,EAAOzF,IAAyB,MAAX2F,IAAgBF,EAAOzF,GAAK,KAIrDmG,EAAOjG,EAAGF,GAENgF,IAEFA,EAAGhF,KAAO2F,EAASX,EAAGhF,GAAG,IACV,MAAX2F,IACFD,EAAO1F,GAAK2F,EACZ3F,IAAM4F,EAAOF,EAAO1F,EAAI,KAE1BgF,EAAGhF,GAAK6F,EAAYb,EAAGhF,GAAIwF,EAAQI,GAEjB,MAAdF,EAAO1F,IAAyB,MAAX2F,IACvBD,EAAO1F,GAAK,KAGdmG,EAAOnB,EAAIhF,IAEbwG,EAAKtG,EAAG8E,EAAIC,EAAOO,EAAQxF,GAC3BwG,EAAKxB,EAAI9E,EAAGsF,EAAQP,EAAOjF,GAC3B,IAAM4G,EAAM1G,EAAEF,GACR6G,EAAO7B,GAAMA,EAAGhF,GAChB8G,EAASF,EAAIlH,OACbqH,EAAU/B,GAAM6B,EAAKnH,OAC3BuF,EAAM9E,EAAIyG,EAAIE,EAAS,GACvB7B,EAAM7E,EAAIwG,EAAIE,EAAS,GACvB7B,EAAMC,GAAK8B,WAAWJ,EAAIE,EAAS,KAAO7B,EAAM9E,EAChD8E,EAAME,GAAK6B,WAAWJ,EAAIE,EAAS,KAAO7B,EAAM7E,EAChDoF,EAAON,GAAKF,IAAOgC,WAAWH,EAAKE,EAAU,KAAOvB,EAAOrF,GAC3DqF,EAAOL,GAAKH,IAAOgC,WAAWH,EAAKE,EAAU,KAAOvB,EAAOpF,GAC3DoF,EAAOrF,EAAI6E,GAAM6B,EAAKE,EAAU,GAChCvB,EAAOpF,EAAI4E,GAAM6B,EAAKE,EAAU,EACjC,CAED,OAAO/B,EAAK,CAAC9E,EAAG8E,GAAM9E,CACvB,EAEK+G,EAAM,gBACNC,EAAiB,SAAUpC,GAC/B,OAAOA,EAAKH,KAAK,KAAKvF,QAAQ6H,EAAK,KACpC,EAEKE,EAAQ,SAAUrI,EAAGsI,EAAIpC,EAAIqC,EAAIC,GAGrC,OAAOxI,GADIA,IADC,EAAIsI,EAAK,EAAIpC,EAAK,EAAIqC,EAAK,EAAIC,GACvB,EAAIF,EAAK,GAAKpC,EAAK,EAAIqC,GAC3B,EAAID,EAAK,EAAIpC,CAC9B,EAEKuC,EAAS,SAAU3G,EAAIsB,EAAIpB,EAAIqB,EAAIqF,EAAIC,EAAIC,EAAIC,EAAI1I,GAC7C,OAANA,IACFA,EAAI,GAUN,IAPA,IAAM2I,GADN3I,EAAIA,EAAI,EAAI,EAAIA,EAAI,EAAI,EAAIA,GACb,EAET4I,EAAU,EACb,MAAQ,OAAS,MAAQ,OAAS,MAAQ,OAAS,MAAQ,OAAS,MAAQ,OAAS,MAAQ,OAE1FC,EAAU,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,OACrGC,EAAM,EACD/H,EAAI,EAAGA,EANN,GAMaA,IAAK,CAC1B,IAAMgI,EAAKJ,EAAKC,EAAQ7H,GAAK4H,EACvBK,EAAQd,EAAMa,EAAIpH,EAAIE,EAAI0G,EAAIE,GAC9BQ,EAAQf,EAAMa,EAAI9F,EAAIC,EAAIsF,EAAIE,GAC9BQ,EAAOF,EAAQA,EAAQC,EAAQA,EACrCH,GAAOD,EAAQ9H,GAAKU,KAAK2C,KAAK8E,EAC/B,CACD,OAAOP,EAAKG,CACb,EAEKK,EAAW,SAAUC,EAAIC,EAAI1H,EAAIsB,EAAIpB,EAAIqB,EAAIqF,EAAIC,GAQrD,IAPA,IAEIpJ,EACAgB,EACAf,EACAQ,EALEyJ,EAAU,GACVC,EAAS,CAAC,GAAI,IAMXxI,EAAI,EAAGA,EAAI,IAAKA,EAUvB,GATU,IAANA,GACFX,EAAI,EAAIgJ,EAAK,GAAKzH,EAAK,EAAIE,EAC3BzC,GAAK,EAAIgK,EAAK,EAAIzH,EAAK,EAAIE,EAAK,EAAI0G,EACpClJ,EAAI,EAAIsC,EAAK,EAAIyH,IAEjBhJ,EAAI,EAAIiJ,EAAK,GAAKpG,EAAK,EAAIC,EAC3B9D,GAAK,EAAIiK,EAAK,EAAIpG,EAAK,EAAIC,EAAK,EAAIsF,EACpCnJ,EAAI,EAAI4D,EAAK,EAAIoG,GAEf5H,KAAK8C,IAAInF,GAAK,MAAlB,CACE,GAAIqC,KAAK8C,IAAInE,GAAK,MAChB,UAEFP,GAAKR,EAAIe,GACD,GAAKP,EAAI,GACfyJ,EAAQ9I,KAAKX,EAGhB,KATD,CAUA,IAAM2J,EAAOpJ,EAAIA,EAAI,EAAIf,EAAID,EACvBqK,EAAWhI,KAAK2C,KAAKoF,GAC3B,KAAIA,EAAO,GAAX,CAGA,IAAME,IAAOtJ,EAAIqJ,IAAa,EAAIrK,GAC9BsK,EAAK,GAAKA,EAAK,GACjBJ,EAAQ9I,KAAKkJ,GAEf,IAAMC,IAAOvJ,EAAIqJ,IAAa,EAAIrK,GAC9BuK,EAAK,GAAKA,EAAK,GACjBL,EAAQ9I,KAAKmJ,EAPd,CALA,CAmBH,IAHA,IAEIC,EAFAlH,EAAI4G,EAAQ7I,OACVoJ,EAAOnH,EAENA,KAELkH,EAAK,GADL/J,EAAIyJ,EAAQ5G,IAEZ6G,EAAO,GAAG7G,GAAKkH,EAAKA,EAAKA,EAAKR,EAAK,EAAIQ,EAAKA,EAAK/J,EAAI8B,EAAK,EAAIiI,EAAK/J,EAAIA,EAAIgC,EAAKhC,EAAIA,EAAIA,EAAI0I,EAC5FgB,EAAO,GAAG7G,GAAKkH,EAAKA,EAAKA,EAAKP,EAAK,EAAIO,EAAKA,EAAK/J,EAAIoD,EAAK,EAAI2G,EAAK/J,EAAIA,EAAIqD,EAAKrD,EAAIA,EAAIA,EAAI2I,EAS9F,OANAe,EAAO,GAAGM,GAAQT,EAClBG,EAAO,GAAGM,GAAQR,EAClBE,EAAO,GAAGM,EAAO,GAAKtB,EACtBgB,EAAO,GAAGM,EAAO,GAAKrB,EACtBe,EAAO,GAAG9I,OAAS8I,EAAO,GAAG9I,OAASoJ,EAAO,EAEtC,CACLC,IAAK,CACH5I,EAAGO,KAAKqI,IAAI7C,MAAM,EAAGsC,EAAO,IAC5BpI,EAAGM,KAAKqI,IAAI7C,MAAM,EAAGsC,EAAO,KAE9BjC,IAAK,CACHpG,EAAGO,KAAK6F,IAAIL,MAAM,EAAGsC,EAAO,IAC5BpI,EAAGM,KAAK6F,IAAIL,MAAM,EAAGsC,EAAO,KAGjC,EAEKQ,EAAY,SAAUpI,EAAIsB,EAAIpB,EAAIqB,EAAIqF,EAAIC,EAAIC,EAAIC,GACtD,KACEjH,KAAK6F,IAAI3F,EAAIE,GAAMJ,KAAKqI,IAAIvB,EAAIE,IAChChH,KAAKqI,IAAInI,EAAIE,GAAMJ,KAAK6F,IAAIiB,EAAIE,IAChChH,KAAK6F,IAAIrE,EAAIC,GAAMzB,KAAKqI,IAAItB,EAAIE,IAChCjH,KAAKqI,IAAI7G,EAAIC,GAAMzB,KAAK6F,IAAIkB,EAAIE,IAJlC,CAQA,IAEMsB,GAAerI,EAAKE,IAAO2G,EAAKE,IAAOzF,EAAKC,IAAOqF,EAAKE,GAE9D,GAAKuB,EAAL,CAGA,IAAMC,IAPMtI,EAAKuB,EAAKD,EAAKpB,IAAO0G,EAAKE,IAAO9G,EAAKE,IAAO0G,EAAKG,EAAKF,EAAKC,IAOzDuB,EACVE,IAPMvI,EAAKuB,EAAKD,EAAKpB,IAAO2G,EAAKE,IAAOzF,EAAKC,IAAOqF,EAAKG,EAAKF,EAAKC,IAOzDuB,EACVG,GAAOF,EAAGxF,QAAQ,GAClB2F,GAAOF,EAAGzF,QAAQ,GACxB,KACE0F,GAAO1I,KAAKqI,IAAInI,EAAIE,GAAI4C,QAAQ,IAChC0F,GAAO1I,KAAK6F,IAAI3F,EAAIE,GAAI4C,QAAQ,IAChC0F,GAAO1I,KAAKqI,IAAIvB,EAAIE,GAAIhE,QAAQ,IAChC0F,GAAO1I,KAAK6F,IAAIiB,EAAIE,GAAIhE,QAAQ,IAChC2F,GAAO3I,KAAKqI,IAAI7G,EAAIC,GAAIuB,QAAQ,IAChC2F,GAAO3I,KAAK6F,IAAIrE,EAAIC,GAAIuB,QAAQ,IAChC2F,GAAO3I,KAAKqI,IAAItB,EAAIE,GAAIjE,QAAQ,IAChC2F,GAAO3I,KAAK6F,IAAIkB,EAAIE,GAAIjE,QAAQ,IAIlC,MAAO,CACLvD,EAAG+I,EACH9I,EAAG+I,EAnBJ,CAPA,CA4BF,EAEKG,EAAoB,SAAUC,EAAMpJ,EAAGC,GAC3C,OAAOD,GAAKoJ,EAAKpJ,GAAKA,GAAKoJ,EAAKpJ,EAAIoJ,EAAKC,OAASpJ,GAAKmJ,EAAKnJ,GAAKA,GAAKmJ,EAAKnJ,EAAImJ,EAAKE,MACrF,EAEKC,EAAW,SAAUvJ,EAAGC,EAAGuJ,EAAGnL,EAAGG,GACrC,GAAIA,EACF,MAAO,CACL,CAAC,KAAMwB,IAAKxB,EAAGyB,GACf,CAAC,IAAKuJ,EAAQ,EAAJhL,EAAO,GACjB,CAAC,IAAKA,EAAGA,EAAG,EAAG,EAAG,EAAGA,EAAGA,GACxB,CAAC,IAAK,EAAGH,EAAQ,EAAJG,GACb,CAAC,IAAKA,EAAGA,EAAG,EAAG,EAAG,GAAIA,EAAGA,GACzB,CAAC,IAAS,EAAJA,EAAQgL,EAAG,GACjB,CAAC,IAAKhL,EAAGA,EAAG,EAAG,EAAG,GAAIA,GAAIA,GAC1B,CAAC,IAAK,EAAO,EAAJA,EAAQH,GACjB,CAAC,IAAKG,EAAGA,EAAG,EAAG,EAAG,EAAGA,GAAIA,GACzB,CAAC,MAGL,IAAM6B,EAAM,CAAC,CAAC,IAAKL,EAAGC,GAAI,CAAC,IAAKuJ,EAAG,GAAI,CAAC,IAAK,EAAGnL,GAAI,CAAC,KAAMmL,EAAG,GAAI,CAAC,MAGnE,OADAnJ,EAAI0G,eAAiBA,EACd1G,CACR,EAEKoJ,EAAM,SAAUzJ,EAAIC,EAAIoJ,EAAQC,GAUpC,OATU,OAANtJ,IACFA,EAAIC,EAAIoJ,EAAQC,EAAS,GAEjB,OAANrJ,IACFA,EAAID,EAAEC,EACNoJ,EAAQrJ,EAAEqJ,MACVC,EAAStJ,EAAEsJ,OACXtJ,EAAIA,EAAEA,GAED,CACLA,EAAC,EACDC,EAAC,EACDoJ,MAAK,EACLG,EAAGH,EACHC,OAAM,EACNjL,EAAGiL,EACH3I,GAAIX,EAAIqJ,EACRrH,GAAI/B,EAAIqJ,EACRxG,GAAI9C,EAAIqJ,EAAQ,EAChBtG,GAAI9C,EAAIqJ,EAAS,EACjBI,GAAInJ,KAAKqI,IAAIS,EAAOC,GAAU,EAC9BK,GAAIpJ,KAAK6F,IAAIiD,EAAOC,GAAU,EAC9BM,GAAIrJ,KAAK2C,KAAKmG,EAAQA,EAAQC,EAASA,GAAU,EACjD3E,KAAM4E,EAASvJ,EAAGC,EAAGoJ,EAAOC,GAC5BO,GAAI,CAAC7J,EAAGC,EAAGoJ,EAAOC,GAAQ9E,KAAK,KAElC,EAmBKsF,EAAa,SAAUC,EAAKC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,IAC/DtM,EAAAA,EAAAA,IAAQ+L,KACXA,EAAM,CAACA,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,IAE5C,IAAMlB,EAAOnB,EAASlC,MAAM,KAAMgE,GAClC,OAAON,EAAIL,EAAKR,IAAI5I,EAAGoJ,EAAKR,IAAI3I,EAAGmJ,EAAKhD,IAAIpG,EAAIoJ,EAAKR,IAAI5I,EAAGoJ,EAAKhD,IAAInG,EAAImJ,EAAKR,IAAI3I,EACnF,EAEKsK,EAAoB,SAAUR,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAK3L,GAC1E,IAAM6J,EAAK,EAAI7J,EACT6L,EAAMjK,KAAKkK,IAAIjC,EAAI,GACnBkC,EAAMnK,KAAKkK,IAAIjC,EAAI,GACnBC,EAAK9J,EAAIA,EACTgM,EAAKlC,EAAK9J,EAGVsC,EAAK8I,EAAM,EAAIpL,GAAKsL,EAAMF,GAAOtB,GAAM0B,EAAM,EAAIF,EAAMF,GACvD7I,EAAK8I,EAAM,EAAIrL,GAAKuL,EAAMF,GAAOvB,GAAM2B,EAAM,EAAIF,EAAMF,GACvDrE,EAAKsE,EAAM,EAAItL,GAAKwL,EAAMF,GAAOxB,GAAM4B,EAAM,EAAIF,EAAMF,GACvDrE,EAAKsE,EAAM,EAAIvL,GAAKyL,EAAMF,GAAOzB,GAAM6B,EAAM,EAAIF,EAAMF,GAO7D,MAAO,CACLlK,EAbQwK,EAAMT,EAAY,EAANW,EAAU/L,EAAIsL,EAAW,EAALzB,EAAS7J,EAAIA,EAAIwL,EAAMQ,EAAKN,EAcpEpK,EAbQuK,EAAMR,EAAY,EAANU,EAAU/L,EAAIuL,EAAW,EAAL1B,EAAS7J,EAAIA,EAAIyL,EAAMO,EAAKL,EAcpE/L,EAAG,CACDyB,EAAGiB,EACHhB,EAAGiB,GAEL0J,EAAG,CACD5K,EAAG2F,EACH1F,EAAG2F,GAELzE,MAAO,CACLnB,EAlBOwI,EAAKuB,EAAMpL,EAAIsL,EAmBtBhK,EAlBOuI,EAAKwB,EAAMrL,EAAIuL,GAoBxBW,IAAK,CACH7K,EApBOwI,EAAK2B,EAAMxL,EAAI0L,EAqBtBpK,EApBOuI,EAAK4B,EAAMzL,EAAI2L,GAsBxBQ,MArBY,GAAqC,IAA/BvK,KAAKwK,MAAM9J,EAAK0E,EAAIzE,EAAK0E,GAAarF,KAAKC,GAuBhE,EAEKwK,EAAc,SAAUC,EAAMC,EAAMC,GAGxC,IArEsB,SAAUC,EAAOC,GAGvC,OAFAD,EAAQ3B,EAAI2B,GACZC,EAAQ5B,EAAI4B,GAEVlC,EAAkBkC,EAAOD,EAAMpL,EAAGoL,EAAMnL,IACxCkJ,EAAkBkC,EAAOD,EAAMzK,GAAIyK,EAAMnL,IACzCkJ,EAAkBkC,EAAOD,EAAMpL,EAAGoL,EAAMpJ,KACxCmH,EAAkBkC,EAAOD,EAAMzK,GAAIyK,EAAMpJ,KACzCmH,EAAkBiC,EAAOC,EAAMrL,EAAGqL,EAAMpL,IACxCkJ,EAAkBiC,EAAOC,EAAM1K,GAAI0K,EAAMpL,IACzCkJ,EAAkBiC,EAAOC,EAAMrL,EAAGqL,EAAMrJ,KACxCmH,EAAkBiC,EAAOC,EAAM1K,GAAI0K,EAAMrJ,MACtCoJ,EAAMpL,EAAIqL,EAAM1K,IAAMyK,EAAMpL,EAAIqL,EAAMrL,GAAOqL,EAAMrL,EAAIoL,EAAMzK,IAAM0K,EAAMrL,EAAIoL,EAAMpL,KAClFoL,EAAMnL,EAAIoL,EAAMrJ,IAAMoJ,EAAMnL,EAAIoL,EAAMpL,GAAOoL,EAAMpL,EAAImL,EAAMpJ,IAAMqJ,EAAMpL,EAAImL,EAAMnL,EAE1F,CAsDMqL,CAFSxB,EAAWmB,GACXnB,EAAWoB,IAEvB,OAAOC,EAAY,EAAI,GAUzB,IARA,IAEMI,KAFKnE,EAAOrB,MAAM,EAAGkF,GAER,GACbO,KAFKpE,EAAOrB,MAAM,EAAGmF,GAER,GACbO,EAAQ,GACRC,EAAQ,GACR/I,EAAK,CAAC,EACRtC,EAAM8K,EAAY,EAAI,GACjBtL,EAAI,EAAGA,EAAI0L,EAAK,EAAG1L,IAAK,CAC/B,IAAMD,EAAI2K,EAAkBxE,MAAM,EAAGkF,EAAKzL,OAAOK,EAAI0L,IACrDE,EAAMnM,KAAK,CACTU,EAAGJ,EAAEI,EACLC,EAAGL,EAAEK,EACLtB,EAAGkB,EAAI0L,GAEV,CACD,IAAS1L,EAAI,EAAGA,EAAI2L,EAAK,EAAG3L,IAAK,CACzBD,EAAI2K,EAAkBxE,MAAM,EAAGmF,EAAK1L,OAAOK,EAAI2L,IACrDE,EAAMpM,KAAK,CACTU,EAAGJ,EAAEI,EACLC,EAAGL,EAAEK,EACLtB,EAAGkB,EAAI2L,GAEV,CACD,IAAS3L,EAAI,EAAGA,EAAI0L,EAAI1L,IACtB,IAAK,IAAI2B,EAAI,EAAGA,EAAIgK,EAAIhK,IAAK,CAC3B,IAAMmK,EAAKF,EAAM5L,GACX+L,EAAMH,EAAM5L,EAAI,GAChBgM,EAAKH,EAAMlK,GACXsK,EAAMJ,EAAMlK,EAAI,GAChBuK,EAAKxL,KAAK8C,IAAIuI,EAAI5L,EAAI2L,EAAG3L,GAAK,KAAQ,IAAM,IAC5CgM,EAAKzL,KAAK8C,IAAIyI,EAAI9L,EAAI6L,EAAG7L,GAAK,KAAQ,IAAM,IAC5CiM,EAAKpD,EAAU8C,EAAG3L,EAAG2L,EAAG1L,EAAG2L,EAAI5L,EAAG4L,EAAI3L,EAAG4L,EAAG7L,EAAG6L,EAAG5L,EAAG6L,EAAI9L,EAAG8L,EAAI7L,GACtE,GAAIgM,EAAI,CACN,GAAItJ,EAAGsJ,EAAGjM,EAAEuD,QAAQ,MAAQ0I,EAAGhM,EAAEsD,QAAQ,GACvC,SAEFZ,EAAGsJ,EAAGjM,EAAEuD,QAAQ,IAAM0I,EAAGhM,EAAEsD,QAAQ,GACnC,IAAMiF,EAAKmD,EAAGhN,EAAI4B,KAAK8C,KAAK4I,EAAGF,GAAMJ,EAAGI,KAAQH,EAAIG,GAAMJ,EAAGI,MAASH,EAAIjN,EAAIgN,EAAGhN,GAC3E8J,EAAKoD,EAAGlN,EAAI4B,KAAK8C,KAAK4I,EAAGD,GAAMH,EAAGG,KAAQF,EAAIE,GAAMH,EAAGG,MAASF,EAAInN,EAAIkN,EAAGlN,GAC7E6J,GAAM,GAAKA,GAAM,GAAKC,GAAM,GAAKA,GAAM,IACrC0C,EAEF9K,GAAO,EAGPA,EAAIf,KAAK,CACPU,EAAGiM,EAAGjM,EACNC,EAAGgM,EAAGhM,EACNuI,GAAE,EACFC,GAAE,IAIT,CACF,CAEH,OAAOpI,CACR,EAoEK6L,EAAe,SAAU5F,EAAO1B,GACpC,OAnEsB,SAAU0B,EAAO1B,EAAOuG,GAG9C,IAAI1K,EACAsB,EACApB,EACAqB,EACAmK,EACAC,EACAC,EACAC,EACArB,EACAC,EAXJ5E,EAAQ5B,EAAY4B,GACpB1B,EAAQF,EAAYE,GAYpB,IADA,IAAIvE,EAAM8K,EAAY,EAAI,GACjBtL,EAAI,EAAG0B,EAAK+E,EAAM/G,OAAQM,EAAI0B,EAAI1B,IAAK,CAC9C,IAAMsG,EAAKG,EAAMzG,GACjB,GAAc,MAAVsG,EAAG,GACL1F,EAAK0L,EAAMhG,EAAG,GACdpE,EAAKqK,EAAMjG,EAAG,OACT,CACS,MAAVA,EAAG,IACL8E,EAAO,CAACxK,EAAIsB,GAAIvC,OAAO2G,EAAGzE,MAAM,IAChCjB,EAAKwK,EAAK,GACVlJ,EAAKkJ,EAAK,KAEVA,EAAO,CAACxK,EAAIsB,EAAItB,EAAIsB,EAAIoK,EAAKC,EAAKD,EAAKC,GACvC3L,EAAK0L,EACLpK,EAAKqK,GAEP,IAAK,IAAI5K,EAAI,EAAGC,EAAKmD,EAAMrF,OAAQiC,EAAIC,EAAID,IAAK,CAC9C,IAAM+K,EAAK3H,EAAMpD,GACjB,GAAc,MAAV+K,EAAG,GACL5L,EAAK0L,EAAME,EAAG,GACdvK,EAAKsK,EAAMC,EAAG,OACT,CACS,MAAVA,EAAG,IACLrB,EAAO,CAACvK,EAAIqB,GAAIxC,OAAO+M,EAAG7K,MAAM,IAChCf,EAAKuK,EAAK,GACVlJ,EAAKkJ,EAAK,KAEVA,EAAO,CAACvK,EAAIqB,EAAIrB,EAAIqB,EAAIqK,EAAKC,EAAKD,EAAKC,GACvC3L,EAAK0L,EACLrK,EAAKsK,GAEP,IAAME,EAAOxB,EAAYC,EAAMC,EAAMC,GACrC,GAAIA,EAEF9K,GAAOmM,MACF,CAEL,IAAK,IAAI5K,EAAI,EAAGC,EAAK2K,EAAKjN,OAAQqC,EAAIC,EAAID,IACxC4K,EAAK5K,GAAG6K,SAAW5M,EACnB2M,EAAK5K,GAAG8K,SAAWlL,EACnBgL,EAAK5K,GAAGqJ,KAAOA,EACfuB,EAAK5K,GAAGsJ,KAAOA,EAGjB7K,EAAMA,EAAIb,OAAOgN,EAClB,CACF,CACF,CACF,CACF,CACD,OAAOnM,CACR,CAGQsM,CAAgBrG,EAAO1B,EAC/B,EAED,SAASgI,EAAYC,EAAQlO,GAC3B,IAAMmO,EAAO,GACPC,EAAQ,GA0Bd,OAHIF,EAAOtN,QArBX,SAASyN,EAAQH,EAAQlO,GACvB,GAAsB,IAAlBkO,EAAOtN,OACTuN,EAAKxN,KAAKuN,EAAO,IACjBE,EAAMzN,KAAKuN,EAAO,QACb,CAEL,IADA,IAAMI,EAAe,GACZpN,EAAI,EAAGA,EAAIgN,EAAOtN,OAAS,EAAGM,IAC3B,IAANA,GACFiN,EAAKxN,KAAKuN,EAAO,IAEfhN,IAAMgN,EAAOtN,OAAS,GACxBwN,EAAMzN,KAAKuN,EAAOhN,EAAI,IAExBoN,EAAapN,GAAK,EACf,EAAIlB,GAAKkO,EAAOhN,GAAG,GAAKlB,EAAIkO,EAAOhN,EAAI,GAAG,IAC1C,EAAIlB,GAAKkO,EAAOhN,GAAG,GAAKlB,EAAIkO,EAAOhN,EAAI,GAAG,IAG/CmN,EAAQC,EAActO,EACvB,CACF,CAECqO,CAAQH,EAAQlO,GAEX,CAAEmO,KAAI,EAAEC,MAAOA,EAAMG,UAC7B,CAmDD,IAAMC,EAAe,SAAUhM,EAAO0J,EAAKuC,GACzC,GAAc,IAAVA,EACF,MAAO,CAAC,GAAG5N,OAAO2B,IAEpB,IAAIkM,EAAW,GACf,GAAe,MAAXxC,EAAI,IAAyB,MAAXA,EAAI,IAAyB,MAAXA,EAAI,GAC1CwC,EAAWA,EAAS7N,OAvDxB,SAAoB2B,EAAO0J,EAAKuC,GAC9B,IAAMP,EAAS,CAAC,CAAC1L,EAAM,GAAIA,EAAM,KACjCiM,EAAQA,GAAS,EACjB,IAAMC,EAAW,GACF,MAAXxC,EAAI,IACNgC,EAAOvN,KAAKuL,EAAI,IAChBgC,EAAOvN,KAAKuL,EAAI,KACI,MAAXA,EAAI,IACbgC,EAAOvN,KAAK,CAACuL,EAAI,GAAIA,EAAI,KACzBgC,EAAOvN,KAAK,CAACuL,EAAI,GAAIA,EAAI,KACzBgC,EAAOvN,KAAK,CAACuL,EAAI,GAAIA,EAAI,MACL,MAAXA,EAAI,IAAyB,MAAXA,EAAI,IAC/BgC,EAAOvN,KAAK,CAACuL,EAAI,GAAIA,EAAI,KACzBgC,EAAOvN,KAAK,CAACuL,EAAI,GAAIA,EAAI,MAEzBgC,EAAOvN,KAAK,CAACuL,EAAI,GAAIA,EAAI,KAM3B,IAHA,IAAIyC,EAAeT,EACblO,EAAI,EAAIyO,EAELvN,EAAI,EAAGA,EAAIuN,EAAQ,EAAGvN,IAAK,CAClC,IACM4E,EAAQmI,EAAYU,EADf3O,GAAK,EAAIA,EAAIkB,IAExBwN,EAAS/N,KAAKmF,EAAMqI,MACpBQ,EAAe7I,EAAMsI,KACtB,CAoBD,OAnBAM,EAAS/N,KAAKgO,GACCD,EAASE,KAAI,SAACC,GAC3B,IAAIC,EAAM,GAeV,OAduB,IAAnBD,EAAQjO,SACVkO,EAAInO,KAAK,KACTmO,EAAMA,EAAIjO,OAAOgO,EAAQ,KAEvBA,EAAQjO,QAAU,IACG,IAAnBiO,EAAQjO,QACVkO,EAAInO,KAAK,KAEXmO,EAAMA,EAAIjO,OAAOgO,EAAQ,KAEJ,IAAnBA,EAAQjO,QACVkO,EAAInO,KAAK,KAELmO,EAAIjO,OAAOgO,EAAQA,EAAQjO,OAAS,GAE3C,GAEF,CAQ8BmO,CAAWvM,EAAO0J,EAAKuC,QAC7C,CACL,IAAMO,EAAO,GAAGnO,OAAO2B,GACP,MAAZwM,EAAK,KACPA,EAAK,GAAK,KAEZ,IAAK,IAAI9N,EAAI,EAAGA,GAAKuN,EAAQ,EAAGvN,IAC9BwN,EAAS/N,KAAKqO,EAEjB,CACD,OAAON,CACR,EAEKO,EAAW,SAAUC,EAAQC,GACjC,GAAsB,IAAlBD,EAAOtO,OACT,OAAOsO,EAET,IAAME,EAAYF,EAAOtO,OAAS,EAC5ByO,EAAYF,EAAOvO,OAAS,EAC5B0O,EAAQF,EAAYC,EACpBE,EAAiB,GACvB,GAAsB,IAAlBL,EAAOtO,QAAiC,MAAjBsO,EAAO,GAAG,GAAY,CAC/C,IAAK,IAAIhO,EAAI,EAAGA,EAAImO,EAAYD,EAAWlO,IACzCgO,EAAOvO,KAAKuO,EAAO,IAErB,OAAOA,CACR,CACD,IAAShO,EAAI,EAAGA,EAAImO,EAAWnO,IAAK,CAClC,IAAMsO,EAAQ5N,KAAK6N,MAAMH,EAAQpO,GACjCqO,EAAeC,IAAUD,EAAeC,IAAU,GAAK,CACxD,CACD,IAAME,EAASH,EAAeI,QAAO,SAACD,EAAQjB,EAAOvN,GACnD,OAAIA,IAAMkO,EACDM,EAAO7O,OAAOqO,EAAOE,IAEvBM,EAAO7O,OAAO2N,EAAaU,EAAOhO,GAAIgO,EAAOhO,EAAI,GAAIuN,GAC7D,GAAE,IAKH,OAJAiB,EAAOE,QAAQV,EAAO,IACI,MAAtBC,EAAOE,IAA4C,MAAtBF,EAAOE,IACtCK,EAAO/O,KAAK,KAEP+O,CACR,EAEKG,EAAU,SAAUC,EAAMC,GAC9B,GAAID,EAAKlP,SAAWmP,EAAKnP,OACvB,OAAO,EAET,IAAIoP,GAAS,EAOb,OANAC,EAAAA,EAAAA,IAAKH,GAAM,SAACI,EAAMhP,GAChB,GAAIgP,IAASH,EAAK7O,GAEhB,OADA8O,GAAS,GACF,CAEV,IACMA,CACR,EACD,SAASG,EAAWC,EAAKC,EAAKC,GAC5B,IAAIC,EAAO,KACPtG,EAAMqG,EASV,OARID,EAAMpG,IACRA,EAAMoG,EACNE,EAAO,OAELH,EAAMnG,IACRA,EAAMmG,EACNG,EAAO,OAEF,CACLA,KAAI,EACJtG,IAAG,EAEN,CAMD,IAoCMuG,EAAiB,SAAUtB,EAAQC,GACvC,IAAMsB,EArCoB,SAAUvB,EAAQC,GAC5C,IAEIuB,EACAC,EAHEvB,EAAYF,EAAOtO,OACnByO,EAAYF,EAAOvO,OAGrBoO,EAAO,EACX,GAAkB,IAAdI,GAAiC,IAAdC,EACrB,OAAO,KAGT,IADA,IAAMuB,EAAO,GACJ1P,EAAI,EAAGA,GAAKkO,EAAWlO,IAC9B0P,EAAK1P,GAAK,GACV0P,EAAK1P,GAAG,GAAK,CAAE+I,IAAK/I,GAEtB,IAAK,IAAI2B,EAAI,EAAGA,GAAKwM,EAAWxM,IAC9B+N,EAAK,GAAG/N,GAAK,CAAEoH,IAAKpH,GAGtB,IAAS3B,EAAI,EAAGA,GAAKkO,EAAWlO,IAE9B,IADAwP,EAAgBxB,EAAOhO,EAAI,GAClB2B,EAAI,EAAGA,GAAKwM,EAAWxM,IAAK,CACnC8N,EAAgBxB,EAAOtM,EAAI,GAEzBmM,EADEa,EAAQa,EAAeC,GAClB,EAEA,EAET,IAAMP,EAAMQ,EAAK1P,EAAI,GAAG2B,GAAGoH,IAAM,EAC3BoG,EAAMO,EAAK1P,GAAG2B,EAAI,GAAGoH,IAAM,EAC3BqG,EAASM,EAAK1P,EAAI,GAAG2B,EAAI,GAAGoH,IAAM+E,EACxC4B,EAAK1P,GAAG2B,GAAKsN,EAAWC,EAAKC,EAAKC,EACnC,CAEH,OAAOM,CACR,CAGoBC,CAAoB3B,EAAQC,GAC3CC,EAAYF,EAAOtO,OACjByO,EAAYF,EAAOvO,OACnBkQ,EAAU,GACZtB,EAAQ,EACRuB,EAAS,EAEb,GAAIN,EAAWrB,GAAWC,GAAWpF,MAAQmF,EAAW,CAEtD,IAAK,IAAIlO,EAAI,EAAGA,GAAKkO,EAAWlO,IAAK,CACnC,IAAI+I,EAAMwG,EAAWvP,GAAGA,GAAG+I,IAC3B8G,EAAS7P,EACT,IAAK,IAAI2B,EAAI2M,EAAO3M,GAAKwM,EAAWxM,IAC9B4N,EAAWvP,GAAG2B,GAAGoH,IAAMA,IACzBA,EAAMwG,EAAWvP,GAAG2B,GAAGoH,IACvB8G,EAASlO,GAGb2M,EAAQuB,EACJN,EAAWvP,GAAGsO,GAAOe,MACvBO,EAAQnQ,KAAK,CAAE6O,MAAOtO,EAAI,EAAGqP,KAAME,EAAWvP,GAAGsO,GAAOe,MAE3D,CAED,IAASrP,EAAI4P,EAAQlQ,OAAS,EAAGM,GAAK,EAAGA,IACvCsO,EAAQsB,EAAQ5P,GAAGsO,MACK,QAApBsB,EAAQ5P,GAAGqP,KACbrB,EAAOpO,OAAO0O,EAAO,EAAG,GAAG3O,OAAOqO,EAAOM,KAEzCN,EAAOpO,OAAO0O,EAAO,EAG1B,CAGD,IAAMwB,EAAO3B,GADbD,EAAYF,EAAOtO,QAEnB,GAAIwO,EAAYC,EACd,IAASnO,EAAI,EAAGA,EAAI8P,EAAM9P,IACS,MAA7BgO,EAAOE,EAAY,GAAG,IAA2C,MAA7BF,EAAOE,EAAY,GAAG,GAC5DF,EAAOpO,OAAOsO,EAAY,EAAG,EAAGF,EAAOE,EAAY,IAEnDF,EAAOvO,KAAKuO,EAAOE,EAAY,IAEjCA,GAAa,EAGjB,OAAOF,CACR,EAGD,SAAS+B,EAAa/C,EAAQgD,EAAQzC,GAKpC,IAJA,IACIe,EADEQ,EAAS,GAAGnP,OAAOqN,GAErBlO,EAAI,GAAKyO,EAAQ,GACf0C,EAAYC,EAAkBF,GAAQ,GACnChQ,EAAI,EAAGA,GAAKuN,EAAOvN,IAC1BlB,GAAKkB,EAES,KADdsO,EAAQ5N,KAAK6N,MAAMvB,EAAOtN,OAASZ,IAEjCgQ,EAAOJ,QAAQ,CAACuB,EAAU,GAAKnR,EAAIkO,EAAOsB,GAAO,IAAM,EAAIxP,GAAImR,EAAU,GAAKnR,EAAIkO,EAAOsB,GAAO,IAAM,EAAIxP,KAE1GgQ,EAAOlP,OAAO0O,EAAO,EAAG,CACtB2B,EAAU,GAAKnR,EAAIkO,EAAOsB,GAAO,IAAM,EAAIxP,GAC3CmR,EAAU,GAAKnR,EAAIkO,EAAOsB,GAAO,IAAM,EAAIxP,KAIjD,OAAOgQ,CACR,CAQD,SAASoB,EAAkBvC,GACzB,IAAMX,EAAS,GACf,OAAQW,EAAQ,IACd,IAAK,IAGL,IAAK,IAUL,IAAK,IACHX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjC,MATF,IAAK,IACHX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjC,MACF,IAAK,IAYL,IAAK,IACHX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjCX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjC,MARF,IAAK,IACHX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjCX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjCX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KACjC,MAKF,IAAK,IAGL,IAAK,IACHX,EAAOvN,KAAK,CAACkO,EAAQ,GAAIA,EAAQ,KAIrC,OAAOX,CACR,CAED,IAAMmD,EAAa,SAAUC,EAAUC,GACrC,GAAID,EAAS1Q,QAAU,EACrB,OAAO0Q,EAGT,IADA,IAAIpD,EACKhN,EAAI,EAAGA,EAAIqQ,EAAO3Q,OAAQM,IACjC,GAAIoQ,EAASpQ,GAAG,KAAOqQ,EAAOrQ,GAAG,GAG/B,OADAgN,EAASkD,EAAkBE,EAASpQ,IAC5BqQ,EAAOrQ,GAAG,IAChB,IAAK,IACHoQ,EAASpQ,GAAK,CAAC,KAAKL,OAAOqN,EAAO,IAClC,MACF,IAAK,IACHoD,EAASpQ,GAAK,CAAC,KAAKL,OAAOqN,EAAO,IAClC,MACF,IAAK,IACHoD,EAASpQ,GAAK,GAAGL,OAAO0Q,EAAOrQ,IAC/BoQ,EAASpQ,GAAG,GAAKgN,EAAO,GAAG,GAC3BoD,EAASpQ,GAAG,GAAKgN,EAAO,GAAG,GAC3B,MACF,IAAK,IACH,GAAIA,EAAOtN,OAAS,EAAG,CACrB,KAAIM,EAAI,GAED,CACLoQ,EAASpQ,GAAKqQ,EAAOrQ,GACrB,KACD,CAJCgN,EAAS+C,EAAa/C,EAAQoD,EAASpQ,EAAI,GAAI,EAKlD,CACDoQ,EAASpQ,GAAK,CAAC,KAAKL,OAClBqN,EAAOyB,QAAO,SAAC6B,EAAKtQ,GAClB,OAAOsQ,EAAI3Q,OAAOK,EACnB,GAAE,KAEL,MACF,IAAK,IACHoQ,EAASpQ,GAAK,CAAC,KAAKL,OAAOqN,EAAO,IAClC,MACF,IAAK,IACH,GAAIA,EAAOtN,OAAS,EAAG,CACrB,KAAIM,EAAI,GAED,CACLoQ,EAASpQ,GAAKqQ,EAAOrQ,GACrB,KACD,CAJCgN,EAAS+C,EAAa/C,EAAQoD,EAASpQ,EAAI,GAAI,EAKlD,CACDoQ,EAASpQ,GAAK,CAAC,KAAKL,OAClBqN,EAAOyB,QAAO,SAAC6B,EAAKtQ,GAClB,OAAOsQ,EAAI3Q,OAAOK,EACnB,GAAE,KAEL,MACF,IAAK,IACH,GAAIgN,EAAOtN,OAAS,EAAG,CACrB,KAAIM,EAAI,GAED,CACLoQ,EAASpQ,GAAKqQ,EAAOrQ,GACrB,KACD,CAJCgN,EAAS+C,EAAa/C,EAAQoD,EAASpQ,EAAI,GAAI,EAKlD,CACDoQ,EAASpQ,GAAK,CAAC,KAAKL,OAClBqN,EAAOyB,QAAO,SAAC6B,EAAKtQ,GAClB,OAAOsQ,EAAI3Q,OAAOK,EACnB,GAAE,KAEL,MACF,QACEoQ,EAASpQ,GAAKqQ,EAAOrQ,GAI7B,OAAOoQ,CACR,C","sources":["../node_modules/@antv/g-base/src/util/path.ts"],"sourcesContent":["import { each, isArray } from '@antv/util';\nimport { PathCommand } from '../types';\n\nconst SPACES =\n  '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nconst PATH_COMMAND = new RegExp(\n  `([a-z])[${SPACES},]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[${SPACES}]*,?[${SPACES}]*)+)`,\n  'ig'\n);\nconst PATH_VALUES = new RegExp(`(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[${SPACES}]*,?[${SPACES}]*`, 'ig');\n// Parse given path string into an array of arrays of path segments\nconst parsePathString = function (pathString: string): PathCommand[] {\n  if (!pathString) {\n    return null;\n  }\n\n  if (isArray(pathString)) {\n    return pathString as unknown as PathCommand[];\n  }\n  const paramCounts = {\n    a: 7,\n    c: 6,\n    o: 2,\n    h: 1,\n    l: 2,\n    m: 2,\n    r: 4,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    u: 3,\n    z: 0,\n  };\n  const data = [];\n\n  String(pathString).replace(PATH_COMMAND, (a, b, c) => {\n    const params = [];\n    let name = b.toLowerCase();\n    c.replace(PATH_VALUES, (a, b) => {\n      b && params.push(+b);\n    });\n    if (name === 'm' && params.length > 2) {\n      data.push([b].concat(params.splice(0, 2)));\n      name = 'l';\n      b = b === 'm' ? 'l' : 'L';\n    }\n    if (name === 'o' && params.length === 1) {\n      data.push([b, params[0]]);\n    }\n    if (name === 'r') {\n      data.push([b].concat(params));\n    } else {\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    }\n    return pathString;\n  });\n\n  return data;\n};\n\n// http://schepers.cc/getting-to-the-point\nconst catmullRomToBezier = function (crp, z) {\n  const d = [];\n  // @ts-ignore\n  for (let i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n    const p = [\n      {\n        x: +crp[i - 2],\n        y: +crp[i - 1],\n      },\n      {\n        x: +crp[i],\n        y: +crp[i + 1],\n      },\n      {\n        x: +crp[i + 2],\n        y: +crp[i + 3],\n      },\n      {\n        x: +crp[i + 4],\n        y: +crp[i + 5],\n      },\n    ];\n    if (z) {\n      if (!i) {\n        p[0] = {\n          x: +crp[iLen - 2],\n          y: +crp[iLen - 1],\n        };\n      } else if (iLen - 4 === i) {\n        p[3] = {\n          x: +crp[0],\n          y: +crp[1],\n        };\n      } else if (iLen - 2 === i) {\n        p[2] = {\n          x: +crp[0],\n          y: +crp[1],\n        };\n        p[3] = {\n          x: +crp[2],\n          y: +crp[3],\n        };\n      }\n    } else {\n      if (iLen - 4 === i) {\n        p[3] = p[2];\n      } else if (!i) {\n        p[0] = {\n          x: +crp[i],\n          y: +crp[i + 1],\n        };\n      }\n    }\n    d.push([\n      'C',\n      (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n      (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n      (p[1].x + 6 * p[2].x - p[3].x) / 6,\n      (p[1].y + 6 * p[2].y - p[3].y) / 6,\n      p[2].x,\n      p[2].y,\n    ]);\n  }\n\n  return d;\n};\n\nconst ellipsePath = function (x, y, rx, ry, a?) {\n  let res = [];\n  if (a === null && ry === null) {\n    ry = rx;\n  }\n  x = +x;\n  y = +y;\n  rx = +rx;\n  ry = +ry;\n  if (a !== null) {\n    const rad = Math.PI / 180;\n    const x1 = x + rx * Math.cos(-ry * rad);\n    const x2 = x + rx * Math.cos(-a * rad);\n    const y1 = y + rx * Math.sin(-ry * rad);\n    const y2 = y + rx * Math.sin(-a * rad);\n    res = [\n      ['M', x1, y1],\n      ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2],\n    ];\n  } else {\n    res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];\n  }\n  return res;\n};\n\nconst pathToAbsolute = function (pathArray) {\n  pathArray = parsePathString(pathArray);\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  let res = [];\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  let start = 0;\n  let pa0;\n  let dots;\n  if (pathArray[0][0] === 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n  const crz =\n    pathArray.length === 3 &&\n    pathArray[0][0] === 'M' &&\n    pathArray[1][0].toUpperCase() === 'R' &&\n    pathArray[2][0].toUpperCase() === 'Z';\n  for (let r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push((r = []));\n    pa = pathArray[i];\n    pa0 = pa[0];\n    if (pa0 !== pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n      switch (r[0]) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n        case 'R':\n          dots = [x, y].concat(pa.slice(1));\n          for (let j = 2, jj = dots.length; j < jj; j++) {\n            dots[j] = +dots[j] + x;\n            dots[++j] = +dots[j] + y;\n          }\n          res.pop();\n          res = res.concat(catmullRomToBezier(dots, crz));\n          break;\n        case 'O':\n          res.pop();\n          dots = ellipsePath(x, y, pa[1], pa[2]);\n          dots.push(dots[0]);\n          res = res.concat(dots);\n          break;\n        case 'U':\n          res.pop();\n          res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n          r = ['U'].concat(res[res.length - 1].slice(-2));\n          break;\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n          break; // for lint\n        default:\n          for (let j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n      }\n    } else if (pa0 === 'R') {\n      dots = [x, y].concat(pa.slice(1));\n      res.pop();\n      res = res.concat(catmullRomToBezier(dots, crz));\n      r = ['R'].concat(pa.slice(-2));\n    } else if (pa0 === 'O') {\n      res.pop();\n      dots = ellipsePath(x, y, pa[1], pa[2]);\n      dots.push(dots[0]);\n      res = res.concat(dots);\n    } else if (pa0 === 'U') {\n      res.pop();\n      res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n      r = ['U'].concat(res[res.length - 1].slice(-2));\n    } else {\n      for (let k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n    if (pa0 !== 'O') {\n      switch (r[0]) {\n        case 'Z':\n          x = +mx;\n          y = +my;\n          break;\n        case 'H':\n          x = r[1];\n          break;\n        case 'V':\n          y = r[1];\n          break;\n        case 'M':\n          mx = r[r.length - 2];\n          my = r[r.length - 1];\n          break; // for lint\n        default:\n          x = r[r.length - 2];\n          y = r[r.length - 1];\n      }\n    }\n  }\n\n  return res;\n};\n\nconst l2c = function (x1, y1, x2, y2) {\n  return [x1, y1, x2, y2, x2, y2];\n};\n\nconst q2c = function (x1, y1, ax, ay, x2, y2) {\n  const _13 = 1 / 3;\n  const _23 = 2 / 3;\n  return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n};\n\nconst a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  if (rx === ry) {\n    rx += 1;\n  }\n\n  const _120 = (Math.PI * 120) / 180;\n  const rad = (Math.PI / 180) * (+angle || 0);\n  let res = [];\n  let xy;\n  let f1;\n  let f2;\n  let cx;\n  let cy;\n  const rotate = function (x, y, rad) {\n    const X = x * Math.cos(rad) - y * Math.sin(rad);\n    const Y = x * Math.sin(rad) + y * Math.cos(rad);\n    return {\n      x: X,\n      y: Y,\n    };\n  };\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n    if (x1 === x2 && y1 === y2) {\n      // 若弧的起始点和终点重叠则错开一点\n      x2 += 1;\n      y2 += 1;\n    }\n    // const cos = Math.cos(Math.PI / 180 * angle);\n    // const sin = Math.sin(Math.PI / 180 * angle);\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n    const k =\n      (large_arc_flag === sweep_flag ? -1 : 1) *\n      Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n    cx = (k * rx * y) / ry + (x1 + x2) / 2;\n    cy = (k * -ry * x) / rx + (y1 + y2) / 2;\n    // @ts-ignore\n    f1 = Math.asin(((y1 - cy) / ry).toFixed(9));\n    // @ts-ignore\n    f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    f1 < 0 && (f1 = Math.PI * 2 + f1);\n    f2 < 0 && (f2 = Math.PI * 2 + f2);\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n  let df = f2 - f1;\n  if (Math.abs(df) > _120) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = (4 / 3) * rx * t;\n  const hy = (4 / 3) * ry * t;\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  }\n  res = [m2, m3, m4].concat(res).join().split(',');\n  const newres = [];\n  for (let i = 0, ii = res.length; i < ii; i++) {\n    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n  }\n  return newres;\n};\n\nconst pathToCurve = function (path, path2?) {\n  const p = pathToAbsolute(path);\n  const p2 = path2 && pathToAbsolute(path2);\n  const attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null,\n  };\n  const attrs2 = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null,\n  };\n  const pcoms1 = []; // path commands of original path p\n  const pcoms2 = []; // path commands of original path p2\n  let pfirst = ''; // temporary holder for original path command\n  let pcom = ''; // holder for previous path command of original path\n  let ii;\n  const processPath = function (path, d, pcom) {\n    let nx;\n    let ny;\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n    !(\n      path[0] in\n      {\n        T: 1,\n        Q: 1,\n      }\n    ) && (d.qx = d.qy = null);\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n      case 'A':\n        path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n        break;\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In \"S\" case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n        path = ['C', nx, ny].concat(path.slice(1));\n        break;\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In \"T\" case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n          d.qy = d.y * 2 - d.qy; // to case \"S\".\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n        path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n        break;\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n        break;\n      case 'L':\n        path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));\n        break;\n      case 'H':\n        path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));\n        break;\n      case 'V':\n        path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));\n        break;\n      case 'Z':\n        path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));\n        break;\n      default:\n        break;\n    }\n    return path;\n  };\n  const fixArc = function (pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      const pi = pp[i];\n      while (pi.length) {\n        pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved\n        p2 && (pcoms2[i] = 'A'); // the same as above\n        pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n      pp.splice(i, 1);\n      ii = Math.max(p.length, (p2 && p2.length) || 0);\n    }\n  };\n  const fixM = function (path1, path2, a1, a2, i) {\n    if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {\n      path2.splice(i, 0, ['M', a2.x, a2.y]);\n      a1.bx = 0;\n      a1.by = 0;\n      a1.x = path1[i][1];\n      a1.y = path1[i][2];\n      ii = Math.max(p.length, (p2 && p2.length) || 0);\n    }\n  };\n  ii = Math.max(p.length, (p2 && p2.length) || 0);\n  for (let i = 0; i < ii; i++) {\n    p[i] && (pfirst = p[i][0]); // save current path command\n\n    if (pfirst !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      pcoms1[i] = pfirst; // Save current path command\n      i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n    }\n    p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n    if (pcoms1[i] !== 'A' && pfirst === 'C') pcoms1[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n    if (p2) {\n      // the same procedures is done to p2\n      p2[i] && (pfirst = p2[i][0]);\n      if (pfirst !== 'C') {\n        pcoms2[i] = pfirst;\n        i && (pcom = pcoms2[i - 1]);\n      }\n      p2[i] = processPath(p2[i], attrs2, pcom);\n\n      if (pcoms2[i] !== 'A' && pfirst === 'C') {\n        pcoms2[i] = 'C';\n      }\n\n      fixArc(p2, i);\n    }\n    fixM(p, p2, attrs, attrs2, i);\n    fixM(p2, p, attrs2, attrs, i);\n    const seg = p[i];\n    const seg2 = p2 && p2[i];\n    const seglen = seg.length;\n    const seg2len = p2 && seg2.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n    attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n    attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n    attrs2.x = p2 && seg2[seg2len - 2];\n    attrs2.y = p2 && seg2[seg2len - 1];\n  }\n\n  return p2 ? [p, p2] : p;\n};\n\nconst p2s = /,?([a-z]),?/gi;\nconst parsePathArray = function (path) {\n  return path.join(',').replace(p2s, '$1');\n};\n\nconst base3 = function (t, p1, p2, p3, p4) {\n  const t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;\n  const t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n};\n\nconst bezlen = function (x1, y1, x2, y2, x3, y3, x4, y4, z) {\n  if (z === null) {\n    z = 1;\n  }\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n  const z2 = z / 2;\n  const n = 12;\n  const Tvalues = [\n    -0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816,\n  ];\n  const Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const ct = z2 * Tvalues[i] + z2;\n    const xbase = base3(ct, x1, x2, x3, x4);\n    const ybase = base3(ct, y1, y2, y3, y4);\n    const comb = xbase * xbase + ybase * ybase;\n    sum += Cvalues[i] * Math.sqrt(comb);\n  }\n  return z2 * sum;\n};\n\nconst curveDim = function (x0, y0, x1, y1, x2, y2, x3, y3) {\n  const tvalues = [];\n  const bounds = [[], []];\n  let a;\n  let b;\n  let c;\n  let t;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i === 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n    if (Math.abs(a) < 1e-12) {\n      if (Math.abs(b) < 1e-12) {\n        continue;\n      }\n      t = -c / b;\n      if (t > 0 && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    const sqrtb2ac = Math.sqrt(b2ac);\n    if (b2ac < 0) {\n      continue;\n    }\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (t1 > 0 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (t2 > 0 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  let mt;\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n    bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n  }\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n\n  return {\n    min: {\n      x: Math.min.apply(0, bounds[0]),\n      y: Math.min.apply(0, bounds[1]),\n    },\n    max: {\n      x: Math.max.apply(0, bounds[0]),\n      y: Math.max.apply(0, bounds[1]),\n    },\n  };\n};\n\nconst intersect = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (\n    Math.max(x1, x2) < Math.min(x3, x4) ||\n    Math.min(x1, x2) > Math.max(x3, x4) ||\n    Math.max(y1, y2) < Math.min(y3, y4) ||\n    Math.min(y1, y2) > Math.max(y3, y4)\n  ) {\n    return;\n  }\n  const nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n  const ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n  const denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n  if (!denominator) {\n    return;\n  }\n  const px = nx / denominator;\n  const py = ny / denominator;\n  const px2 = +px.toFixed(2);\n  const py2 = +py.toFixed(2);\n  if (\n    px2 < +Math.min(x1, x2).toFixed(2) ||\n    px2 > +Math.max(x1, x2).toFixed(2) ||\n    px2 < +Math.min(x3, x4).toFixed(2) ||\n    px2 > +Math.max(x3, x4).toFixed(2) ||\n    py2 < +Math.min(y1, y2).toFixed(2) ||\n    py2 > +Math.max(y1, y2).toFixed(2) ||\n    py2 < +Math.min(y3, y4).toFixed(2) ||\n    py2 > +Math.max(y3, y4).toFixed(2)\n  ) {\n    return;\n  }\n  return {\n    x: px,\n    y: py,\n  };\n};\n\nconst isPointInsideBBox = function (bbox, x, y) {\n  return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n};\n\nconst rectPath = function (x, y, w, h, r?) {\n  if (r) {\n    return [\n      ['M', +x + +r, y],\n      ['l', w - r * 2, 0],\n      ['a', r, r, 0, 0, 1, r, r],\n      ['l', 0, h - r * 2],\n      ['a', r, r, 0, 0, 1, -r, r],\n      ['l', r * 2 - w, 0],\n      ['a', r, r, 0, 0, 1, -r, -r],\n      ['l', 0, r * 2 - h],\n      ['a', r, r, 0, 0, 1, r, -r],\n      ['z'],\n    ];\n  }\n  const res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];\n  // @ts-ignore\n  res.parsePathArray = parsePathArray;\n  return res;\n};\n\nconst box = function (x?, y?, width?, height?) {\n  if (x === null) {\n    x = y = width = height = 0;\n  }\n  if (y === null) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n  return {\n    x,\n    y,\n    width,\n    w: width,\n    height,\n    h: height,\n    x2: x + width,\n    y2: y + height,\n    cx: x + width / 2,\n    cy: y + height / 2,\n    r1: Math.min(width, height) / 2,\n    r2: Math.max(width, height) / 2,\n    r0: Math.sqrt(width * width + height * height) / 2,\n    path: rectPath(x, y, width, height),\n    vb: [x, y, width, height].join(' '),\n  };\n};\n\nconst isBBoxIntersect = function (bbox1, bbox2) {\n  bbox1 = box(bbox1);\n  bbox2 = box(bbox2);\n  return (\n    isPointInsideBBox(bbox2, bbox1.x, bbox1.y) ||\n    isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) ||\n    isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) ||\n    isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) ||\n    isPointInsideBBox(bbox1, bbox2.x, bbox2.y) ||\n    isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) ||\n    isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) ||\n    isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) ||\n    (((bbox1.x < bbox2.x2 && bbox1.x > bbox2.x) || (bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)) &&\n      ((bbox1.y < bbox2.y2 && bbox1.y > bbox2.y) || (bbox2.y < bbox1.y2 && bbox2.y > bbox1.y)))\n  );\n};\n\nconst bezierBBox = function (p1x, p1y?, c1x?, c1y?, c2x?, c2y?, p2x?, p2y?) {\n  if (!isArray(p1x)) {\n    p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n  }\n  const bbox = curveDim.apply(null, p1x);\n  return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);\n};\n\nconst findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  const t1 = 1 - t;\n  const t13 = Math.pow(t1, 3);\n  const t12 = Math.pow(t1, 2);\n  const t2 = t * t;\n  const t3 = t2 * t;\n  const x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;\n  const y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n  const mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);\n  const my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);\n  const nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);\n  const ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);\n  const ax = t1 * p1x + t * c1x;\n  const ay = t1 * p1y + t * c1y;\n  const cx = t1 * c2x + t * p2x;\n  const cy = t1 * c2y + t * p2y;\n  const alpha = 90 - (Math.atan2(mx - nx, my - ny) * 180) / Math.PI;\n  // (mx > nx || my < ny) && (alpha += 180);\n  return {\n    x,\n    y,\n    m: {\n      x: mx,\n      y: my,\n    },\n    n: {\n      x: nx,\n      y: ny,\n    },\n    start: {\n      x: ax,\n      y: ay,\n    },\n    end: {\n      x: cx,\n      y: cy,\n    },\n    alpha,\n  };\n};\n\nconst interHelper = function (bez1, bez2, justCount) {\n  const bbox1 = bezierBBox(bez1);\n  const bbox2 = bezierBBox(bez2);\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n  const l1 = bezlen.apply(0, bez1);\n  const l2 = bezlen.apply(0, bez2);\n  const n1 = ~~(l1 / 8);\n  const n2 = ~~(l2 / 8);\n  const dots1 = [];\n  const dots2 = [];\n  const xy = {};\n  let res = justCount ? 0 : [];\n  for (let i = 0; i < n1 + 1; i++) {\n    const d = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n    dots1.push({\n      x: d.x,\n      y: d.y,\n      t: i / n1,\n    });\n  }\n  for (let i = 0; i < n2 + 1; i++) {\n    const d = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n    dots2.push({\n      x: d.x,\n      y: d.y,\n      t: i / n2,\n    });\n  }\n  for (let i = 0; i < n1; i++) {\n    for (let j = 0; j < n2; j++) {\n      const di = dots1[i];\n      const di1 = dots1[i + 1];\n      const dj = dots2[j];\n      const dj1 = dots2[j + 1];\n      const ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';\n      const cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';\n      const is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n      if (is) {\n        if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {\n          continue;\n        }\n        xy[is.x.toFixed(4)] = is.y.toFixed(4);\n        const t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);\n        const t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n          if (justCount) {\n            // @ts-ignore\n            res += 1;\n          } else {\n            // @ts-ignore\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1,\n              t2,\n            });\n          }\n        }\n      }\n    }\n  }\n  return res;\n};\n\nconst interPathHelper = function (path1, path2, justCount?) {\n  path1 = pathToCurve(path1);\n  path2 = pathToCurve(path2);\n  let x1;\n  let y1;\n  let x2;\n  let y2;\n  let x1m;\n  let y1m;\n  let x2m;\n  let y2m;\n  let bez1;\n  let bez2;\n  let res = justCount ? 0 : [];\n  for (let i = 0, ii = path1.length; i < ii; i++) {\n    const pi = path1[i];\n    if (pi[0] === 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n      if (pi[0] === 'C') {\n        bez1 = [x1, y1].concat(pi.slice(1));\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n      for (let j = 0, jj = path2.length; j < jj; j++) {\n        const pj = path2[j];\n        if (pj[0] === 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n          if (pj[0] === 'C') {\n            bez2 = [x2, y2].concat(pj.slice(1));\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n          const intr = interHelper(bez1, bez2, justCount);\n          if (justCount) {\n            // @ts-ignore\n            res += intr;\n          } else {\n            // @ts-ignore\n            for (let k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            }\n            // @ts-ignore\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n  return res;\n};\n\nconst intersection = function (path1, path2) {\n  return interPathHelper(path1, path2);\n};\n\nfunction decasteljau(points, t) {\n  const left = [];\n  const right = [];\n\n  function recurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      const middlePoints = [];\n      for (let i = 0; i < points.length - 1; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n        if (i === points.length - 2) {\n          right.push(points[i + 1]);\n        }\n        middlePoints[i] = [\n          (1 - t) * points[i][0] + t * points[i + 1][0],\n          (1 - t) * points[i][1] + t * points[i + 1][1],\n        ];\n      }\n      recurse(middlePoints, t);\n    }\n  }\n  if (points.length) {\n    recurse(points, t);\n  }\n  return { left, right: right.reverse() };\n}\n\nfunction splitCurve(start, end, count) {\n  const points = [[start[1], start[2]]];\n  count = count || 2;\n  const segments = [];\n  if (end[0] === 'A') {\n    points.push(end[6]);\n    points.push(end[7]);\n  } else if (end[0] === 'C') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n    points.push([end[5], end[6]]);\n  } else if (end[0] === 'S' || end[0] === 'Q') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n  } else {\n    points.push([end[1], end[2]]);\n  }\n\n  let leftSegments = points;\n  const t = 1 / count;\n\n  for (let i = 0; i < count - 1; i++) {\n    const rt = t / (1 - t * i);\n    const split = decasteljau(leftSegments, rt);\n    segments.push(split.left);\n    leftSegments = split.right;\n  }\n  segments.push(leftSegments);\n  const result = segments.map((segment) => {\n    let cmd = [];\n    if (segment.length === 4) {\n      cmd.push('C');\n      cmd = cmd.concat(segment[2]);\n    }\n    if (segment.length >= 3) {\n      if (segment.length === 3) {\n        cmd.push('Q');\n      }\n      cmd = cmd.concat(segment[1]);\n    }\n    if (segment.length === 2) {\n      cmd.push('L');\n    }\n    cmd = cmd.concat(segment[segment.length - 1]);\n    return cmd;\n  });\n  return result;\n}\n\nconst splitSegment = function (start, end, count) {\n  if (count === 1) {\n    return [[].concat(start)];\n  }\n  let segments = [];\n  if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n    segments = segments.concat(splitCurve(start, end, count));\n  } else {\n    const temp = [].concat(start);\n    if (temp[0] === 'M') {\n      temp[0] = 'L';\n    }\n    for (let i = 0; i <= count - 1; i++) {\n      segments.push(temp);\n    }\n  }\n  return segments;\n};\n\nconst fillPath = function (source, target) {\n  if (source.length === 1) {\n    return source;\n  }\n  const sourceLen = source.length - 1;\n  const targetLen = target.length - 1;\n  const ratio = sourceLen / targetLen;\n  const segmentsToFill = [];\n  if (source.length === 1 && source[0][0] === 'M') {\n    for (let i = 0; i < targetLen - sourceLen; i++) {\n      source.push(source[0]);\n    }\n    return source;\n  }\n  for (let i = 0; i < targetLen; i++) {\n    const index = Math.floor(ratio * i);\n    segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n  }\n  const filled = segmentsToFill.reduce((filled, count, i) => {\n    if (i === sourceLen) {\n      return filled.concat(source[sourceLen]);\n    }\n    return filled.concat(splitSegment(source[i], source[i + 1], count));\n  }, []);\n  filled.unshift(source[0]);\n  if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n    filled.push('Z');\n  }\n  return filled;\n};\n\nconst isEqual = function (obj1, obj2) {\n  if (obj1.length !== obj2.length) {\n    return false;\n  }\n  let result = true;\n  each(obj1, (item, i) => {\n    if (item !== obj2[i]) {\n      result = false;\n      return false;\n    }\n  });\n  return result;\n};\nfunction getMinDiff(del, add, modify) {\n  let type = null;\n  let min = modify;\n  if (add < min) {\n    min = add;\n    type = 'add';\n  }\n  if (del < min) {\n    min = del;\n    type = 'del';\n  }\n  return {\n    type,\n    min,\n  };\n}\n\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nconst levenshteinDistance = function (source, target) {\n  const sourceLen = source.length;\n  const targetLen = target.length;\n  let sourceSegment;\n  let targetSegment;\n  let temp = 0;\n  if (sourceLen === 0 || targetLen === 0) {\n    return null;\n  }\n  const dist = [];\n  for (let i = 0; i <= sourceLen; i++) {\n    dist[i] = [];\n    dist[i][0] = { min: i };\n  }\n  for (let j = 0; j <= targetLen; j++) {\n    dist[0][j] = { min: j };\n  }\n\n  for (let i = 1; i <= sourceLen; i++) {\n    sourceSegment = source[i - 1];\n    for (let j = 1; j <= targetLen; j++) {\n      targetSegment = target[j - 1];\n      if (isEqual(sourceSegment, targetSegment)) {\n        temp = 0;\n      } else {\n        temp = 1;\n      }\n      const del = dist[i - 1][j].min + 1;\n      const add = dist[i][j - 1].min + 1;\n      const modify = dist[i - 1][j - 1].min + temp;\n      dist[i][j] = getMinDiff(del, add, modify);\n    }\n  }\n  return dist;\n};\n\nconst fillPathByDiff = function (source, target) {\n  const diffMatrix = levenshteinDistance(source, target);\n  let sourceLen = source.length;\n  const targetLen = target.length;\n  const changes = [];\n  let index = 1;\n  let minPos = 1;\n  // 如果source和target不是完全不相等\n  if (diffMatrix[sourceLen][targetLen].min !== sourceLen) {\n    // 获取从source到target所需改动\n    for (let i = 1; i <= sourceLen; i++) {\n      let min = diffMatrix[i][i].min;\n      minPos = i;\n      for (let j = index; j <= targetLen; j++) {\n        if (diffMatrix[i][j].min < min) {\n          min = diffMatrix[i][j].min;\n          minPos = j;\n        }\n      }\n      index = minPos;\n      if (diffMatrix[i][index].type) {\n        changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n      }\n    }\n    // 对source进行增删path\n    for (let i = changes.length - 1; i >= 0; i--) {\n      index = changes[i].index;\n      if (changes[i].type === 'add') {\n        source.splice(index, 0, [].concat(source[index]));\n      } else {\n        source.splice(index, 1);\n      }\n    }\n  }\n  // source尾部补齐\n  sourceLen = source.length;\n  const diff = targetLen - sourceLen;\n  if (sourceLen < targetLen) {\n    for (let i = 0; i < diff; i++) {\n      if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n        source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n      } else {\n        source.push(source[sourceLen - 1]);\n      }\n      sourceLen += 1;\n    }\n  }\n  return source;\n};\n\n// 将两个点均分成count个点\nfunction _splitPoints(points, former, count) {\n  const result = [].concat(points);\n  let index;\n  let t = 1 / (count + 1);\n  const formerEnd = _getSegmentPoints(former)[0];\n  for (let i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [\n        formerEnd[0] * t + points[index][0] * (1 - t),\n        formerEnd[1] * t + points[index][1] * (1 - t),\n      ]);\n    }\n  }\n  return result;\n}\n\n/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n  const points = [];\n  switch (segment[0]) {\n    case 'M':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'L':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'A':\n      points.push([segment[6], segment[7]]);\n      break;\n    case 'Q':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'T':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'C':\n      points.push([segment[5], segment[6]]);\n      points.push([segment[1], segment[2]]);\n      points.push([segment[3], segment[4]]);\n      break;\n    case 'S':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'H':\n      points.push([segment[1], segment[1]]);\n      break;\n    case 'V':\n      points.push([segment[1], segment[1]]);\n      break;\n    default:\n  }\n  return points;\n}\n\nconst formatPath = function (fromPath, toPath) {\n  if (fromPath.length <= 1) {\n    return fromPath;\n  }\n  let points;\n  for (let i = 0; i < toPath.length; i++) {\n    if (fromPath[i][0] !== toPath[i][0]) {\n      // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n      points = _getSegmentPoints(fromPath[i]);\n      switch (toPath[i][0]) {\n        case 'M':\n          fromPath[i] = ['M'].concat(points[0]);\n          break;\n        case 'L':\n          fromPath[i] = ['L'].concat(points[0]);\n          break;\n        case 'A':\n          fromPath[i] = [].concat(toPath[i]);\n          fromPath[i][6] = points[0][0];\n          fromPath[i][7] = points[0][1];\n          break;\n        case 'Q':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['Q'].concat(\n            points.reduce((arr, i) => {\n              return arr.concat(i);\n            }, [])\n          );\n          break;\n        case 'T':\n          fromPath[i] = ['T'].concat(points[0]);\n          break;\n        case 'C':\n          if (points.length < 3) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 2);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['C'].concat(\n            points.reduce((arr, i) => {\n              return arr.concat(i);\n            }, [])\n          );\n          break;\n        case 'S':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['S'].concat(\n            points.reduce((arr, i) => {\n              return arr.concat(i);\n            }, [])\n          );\n          break;\n        default:\n          fromPath[i] = toPath[i];\n      }\n    }\n  }\n  return fromPath;\n};\n\nexport {\n  catmullRomToBezier,\n  fillPath,\n  fillPathByDiff,\n  formatPath,\n  intersection,\n  parsePathArray,\n  parsePathString,\n  pathToAbsolute,\n  pathToCurve,\n  rectPath,\n};\n"],"names":["SPACES","PATH_COMMAND","RegExp","PATH_VALUES","parsePathString","pathString","isArray","paramCounts","a","c","o","h","l","m","r","q","s","t","v","u","z","data","String","replace","b","params","name","toLowerCase","push","length","concat","splice","catmullRomToBezier","crp","d","i","iLen","p","x","y","ellipsePath","rx","ry","res","rad","Math","PI","x1","cos","x2","sin","pathToAbsolute","pathArray","pa0","dots","mx","my","start","crz","toUpperCase","pa","ii","j","jj","slice","pop","k","kk","l2c","y1","y2","q2c","ax","ay","_13","_23","a2c","angle","large_arc_flag","sweep_flag","recursive","xy","f1","f2","cx","cy","_120","rotate","sqrt","rx2","ry2","abs","asin","toFixed","df","f2old","x2old","y2old","c1","s1","c2","s2","tan","hx","hy","m1","m2","m3","m4","newres","join","split","pathToCurve","path","path2","p2","attrs","bx","by","X","Y","qx","qy","attrs2","pcoms1","pcoms2","pfirst","pcom","processPath","nx","ny","T","Q","apply","fixArc","pp","shift","pi","max","fixM","path1","a1","a2","seg","seg2","seglen","seg2len","parseFloat","p2s","parsePathArray","base3","p1","p3","p4","bezlen","x3","y3","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","curveDim","x0","y0","tvalues","bounds","b2ac","sqrtb2ac","t1","t2","mt","jlen","min","intersect","denominator","px","py","px2","py2","isPointInsideBBox","bbox","width","height","rectPath","w","box","r1","r2","r0","vb","bezierBBox","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","findDotsAtSegment","t13","pow","t12","t3","n","end","alpha","atan2","interHelper","bez1","bez2","justCount","bbox1","bbox2","isBBoxIntersect","n1","n2","dots1","dots2","di","di1","dj","dj1","ci","cj","is","intersection","x1m","y1m","x2m","y2m","pj","intr","segment1","segment2","interPathHelper","decasteljau","points","left","right","recurse","middlePoints","reverse","splitSegment","count","segments","leftSegments","map","segment","cmd","splitCurve","temp","fillPath","source","target","sourceLen","targetLen","ratio","segmentsToFill","index","floor","filled","reduce","unshift","isEqual","obj1","obj2","result","each","item","getMinDiff","del","add","modify","type","fillPathByDiff","diffMatrix","sourceSegment","targetSegment","dist","levenshteinDistance","changes","minPos","diff","_splitPoints","former","formerEnd","_getSegmentPoints","formatPath","fromPath","toPath","arr"],"sourceRoot":""}