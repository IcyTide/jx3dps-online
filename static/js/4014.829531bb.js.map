{"version":3,"file":"static/js/4014.829531bb.js","mappings":"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","sources":["../node_modules/@antv/g2/src/interaction/action/base.ts","../node_modules/@antv/g2/src/interaction/action/callback.ts","../node_modules/@antv/g2/src/interaction/action/component/axis/axis-description.ts","../node_modules/@antv/g2/src/interaction/action/component/list-active.ts","../node_modules/@antv/g2/src/interaction/action/component/list-checked.ts","../node_modules/@antv/g2/src/interaction/action/component/list-focus.ts","../node_modules/@antv/g2/src/interaction/action/component/list-highlight-util.ts","../node_modules/@antv/g2/src/interaction/action/component/list-highlight.ts","../node_modules/@antv/g2/src/interaction/action/component/list-radio.ts","../node_modules/@antv/g2/src/interaction/action/component/list-selected.ts","../node_modules/@antv/g2/src/interaction/action/component/list-state.ts","../node_modules/@antv/g2/src/interaction/action/component/list-unchecked.ts","../node_modules/@antv/g2/src/interaction/action/component/tooltip/ellipsis-text.ts","../node_modules/@antv/g2/src/interaction/action/component/tooltip/geometry.ts","../node_modules/@antv/g2/src/interaction/action/component/tooltip/sibling.ts","../node_modules/@antv/g2/src/interaction/action/cursor.ts"],"sourcesContent":["import { assign } from '@antv/util';\nimport { IAction, IInteractionContext, LooseObject } from '../../interface';\n\n/**\n * Action 的基类\n */\nabstract class Action<T = LooseObject> implements IAction {\n  /** Action 名字 */\n  public name;\n  /** 上下文对象 */\n  public context: IInteractionContext;\n  /** Action 配置 */\n  protected cfg: T;\n  /** 配置项的字段，自动负值到 this 上 */\n  protected cfgFields: string[];\n\n  constructor(context: IInteractionContext, cfg?: T) {\n    this.context = context;\n    this.cfg = cfg;\n    context.addAction(this);\n  }\n\n  /**\n   * 设置配置项传入的值\n   * @param cfg\n   */\n  protected applyCfg(cfg) {\n    assign(this, cfg);\n  }\n\n  /**\n   * Inits action，提供给子类用于继承\n   */\n  public init() {\n    this.applyCfg(this.cfg);\n  }\n\n  /**\n   * Destroys action\n   */\n  public destroy() {\n    // 移除 action\n    this.context.removeAction(this);\n    // 清空\n    this.context = null;\n  }\n}\n\nexport default Action;\n","import { ActionCallback } from '../../interface';\nimport Action from './base';\n\n/** 回调函数构建的 Action */\nexport default class CallbackAction extends Action {\n  /**\n   * 回调函数\n   */\n  public callback: ActionCallback;\n  /**\n   * 执行\n   */\n  public execute() {\n    if (this.callback) {\n      this.callback(this.context);\n    }\n  }\n  /**\n   * 销毁\n   */\n  public destroy() {\n    super.destroy();\n    this.callback = null;\n  }\n}\n","import { TOOLTIP_CSS_CONST } from '@antv/component';\nimport { deepMix } from '@antv/util';\nimport { HtmlTooltip } from '../../../../dependents';\nimport Action from '../../base';\nimport { getDelegationObject } from '../../util';\nimport cx from 'classnames';\n\nconst AXIS_DESCRIPTION_TOOLTIP = 'aixs-description-tooltip';\n\nclass AxisDescription extends Action {\n  private tooltip;\n\n  public show() {\n    const context = this.context;\n    const { axis } = getDelegationObject(context);\n    const { description, text, descriptionTooltipStyle } = axis.cfg.title;\n    const { x, y } = context.event;\n    if (!this.tooltip) {\n      this.renderTooltip();\n    }\n    this.tooltip.update({\n      title: text || '',\n      customContent: () => {\n        return `\n          <div class=\"${TOOLTIP_CSS_CONST.CONTAINER_CLASS}\" style={${descriptionTooltipStyle}}>\n            <div class=\"${TOOLTIP_CSS_CONST.TITLE_CLASS}\">\n              字段说明：${description}\n            </div>\n          </div>\n        `;\n      },\n      x,\n      y,\n    });\n    this.tooltip.show();\n  }\n\n  public destroy() {\n    super.destroy();\n    this.tooltip && this.tooltip.destroy();\n  }\n\n  public hide() {\n    this.tooltip && this.tooltip.hide();\n  }\n\n  public renderTooltip() {\n    const view = this.context.view;\n    const canvas = view.canvas;\n    const region = {\n      start: { x: 0, y: 0 },\n      end: { x: canvas.get('width'), y: canvas.get('height') },\n    };\n    const tooltip = new HtmlTooltip({\n      parent: canvas.get('el').parentNode,\n      region,\n      visible: false,\n      containerId: AXIS_DESCRIPTION_TOOLTIP,\n      domStyles: {\n        ...deepMix(\n          {},\n          {\n            // 超长的时候，tooltip tip 最大宽度为 50%，然后可以换行\n            [TOOLTIP_CSS_CONST.CONTAINER_CLASS]: {\n              'max-width': '50%',\n              padding: '10px',\n              'line-height': '15px',\n              'font-size': '12px',\n              color: 'rgba(0, 0, 0, .65)',\n            },\n            [TOOLTIP_CSS_CONST.TITLE_CLASS]: {\n              'word-break': 'break-all',\n              'margin-bottom': '3px',\n            },\n          }\n        ),\n      },\n    });\n    tooltip.init();\n    tooltip.setCapture(false);\n    this.tooltip = tooltip;\n  }\n}\nexport default AxisDescription;\n","import ListState from './list-state';\n\n/**\n * 列表项（图例项、坐标轴文本）激活的 Action\n * @class\n * @ignore\n */\nclass ListActive extends ListState {\n  protected stateName: string = 'active';\n  /**\n   * 激活选项\n   */\n  public active() {\n    this.setState();\n  }\n}\n\nexport default ListActive;\n","import { each, some } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\nconst STATUS_CHECKED = 'checked';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nclass ListChecked extends ListState {\n  protected stateName: string = STATUS_CHECKED;\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    this.setCheckedBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 checked\n  private setCheckedBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  }\n\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      const allChecked = !some(list.getItems(), (t) => list.hasState(t, STATUS_UNCHECKED));\n\n      //\n      if (allChecked || list.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  }\n\n  /**\n   * checked 图例项\n   */\n  public checked() {\n    this.setState();\n  }\n\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  public reset() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  }\n}\n\nexport default ListChecked;\n","import ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\n\nclass ListFocus extends ListState {\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo?.item) {\n      const { list, item: clickedItem } = triggerInfo;\n      const items = list.getItems();\n      const checkedItems = items.filter((t) => !list.hasState(t, STATUS_UNCHECKED));\n      const uncheckedItems = items.filter((t) => list.hasState(t, STATUS_UNCHECKED));\n      const checkedItem = checkedItems[0]\n      /**\n       * 1. 初始化，全部 checked。此时，点击 radio, clickItem 进入聚焦\n       * 2. 当前只选中一个\n       *    2.1 且选中 item 等于 clickItem，退出聚焦，全部重新选中\n       *    2.2 替换聚焦的 item\n       * 3. 其它，同 2.2\n       */\n      if (items.length === checkedItems.length) {\n        for (const item of items) list.setItemState(item, STATUS_UNCHECKED, item.id !== clickedItem.id);\n      } else if (items.length - uncheckedItems.length === 1) {\n        if (checkedItem.id === clickedItem.id) {\n          for (const item of items) list.setItemState(item, STATUS_UNCHECKED, false);\n        } else {\n          for (const item of items) list.setItemState(item, STATUS_UNCHECKED, item.id !== clickedItem.id);\n        }\n      } else {\n        for (const item of items) list.setItemState(item, STATUS_UNCHECKED, item.id !== clickedItem.id);\n      }\n    }\n  }\n}\n\nexport default ListFocus;\n","import { IList } from '@antv/component';\nimport { each } from '@antv/util';\n\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\n\n/**\n * 清理图例的 Highlight 效果\n * @param list 列表组件，图例或者坐标轴\n * @ignore\n */\nexport function clearList(list: IList) {\n  const items = list.getItems();\n  each(items, (item) => {\n    if (list.hasState(item, STATUS_ACTIVE)) {\n      list.setItemState(item, STATUS_ACTIVE, false);\n    }\n    if (list.hasState(item, STATUS_UNACTIVE)) {\n      list.setItemState(item, STATUS_UNACTIVE, false);\n    }\n  });\n}\n","import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n","import ListState from './list-state';\nimport { isEqual } from '@antv/util';\nimport { TOOLTIP_CSS_CONST } from '@antv/component';\nimport { HtmlTooltip } from '../../../dependents';\nimport { Point } from '../../../interface';\n\nconst STATUS_SHOW = 'showRadio';\nconst TIP_ID = 'legend-radio-tip';\n\nclass ListRadio extends ListState {\n  public show() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo?.item) {\n      const { list, item } = triggerInfo;\n      list.setItemState(item, STATUS_SHOW, true);\n    }\n  }\n\n  public hide() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo?.item) {\n      const { list, item } = triggerInfo;\n      list.setItemState(item, STATUS_SHOW, false);\n    }\n  }\n\n  private timeStamp: number = 0;\n  private location: Point;\n  private tooltip;\n\n  public destroy() {\n    super.destroy();\n    this.tooltip && this.tooltip.destroy();\n  }\n\n  /**\n   * 显示 Tooltip (展示在上方)\n   * @returns\n   */\n  public showTip() {\n    const context = this.context;\n    const ev = context.event;\n    const lastTimeStamp = this.timeStamp;\n    const timeStamp = +new Date();\n\n    const target = this.context.event.target;\n    if (timeStamp - lastTimeStamp > 16 && target.get('name') === 'legend-item-radio') {\n      const preLoc = this.location;\n      const curLoc = { x: ev.x, y: ev.y };\n      this.timeStamp = timeStamp;\n      this.location = curLoc;      \n      if (!preLoc || !isEqual(preLoc, curLoc)) {\n        this.showTooltip(curLoc);\n      }\n    }\n  }\n\n  /**\n   * 隐藏 Tooltip。\n   * @returns\n   */\n  public hideTip() {\n    this.hideTooltip();\n    this.location = null;\n  }\n\n  protected showTooltip(curLoc: Point) {\n    const context = this.context;\n    const ev = context.event;\n    const target = ev.target;\n\n    if (target && target.get('tip')) {\n      if (!this.tooltip) {\n        this.renderTooltip(); // 延迟生成\n      }\n      // 展示 tooltip\n      const { x: offsetX, y: offsetY } = context.view.getCanvas().get('el').getBoundingClientRect();\n      this.tooltip.update({\n        title: target.get('tip'),\n        ...curLoc,\n        x: curLoc.x + offsetX,\n        y: curLoc.y + offsetY,\n      });\n      this.tooltip.show();\n    }\n  }\n\n  protected hideTooltip() {\n    this.tooltip && this.tooltip.hide();\n  }\n\n  private renderTooltip() {\n    const tooltipStyles = {\n      [TOOLTIP_CSS_CONST.CONTAINER_CLASS]: {\n        padding: '6px 8px',\n        transform: 'translate(-50%, -80%)',\n        background: 'rgba(0,0,0,0.75)',\n        color: '#fff',\n        'border-radius': '2px',\n        // 避免遮挡，如果还不够的话，再考虑开放用户配置\n        'z-index': 100,\n      },\n      [TOOLTIP_CSS_CONST.TITLE_CLASS]: {\n        'font-size': '12px',\n        'line-height': '14px',\n        'margin-bottom': 0,\n        'word-break': 'break-all',\n      }\n    };\n    if (document.getElementById(TIP_ID)) {\n      document.body.removeChild(document.getElementById(TIP_ID));\n    }\n    const tooltip = new HtmlTooltip({\n      parent: document.body,\n      // tooltip 限制的区域\n      region: null,\n      visible: false,\n      crosshairs: null,\n      domStyles: tooltipStyles,\n      containerId: TIP_ID,\n    });\n    tooltip.init();\n    tooltip.setCapture(false); // 不允许捕获事件\n    this.tooltip = tooltip;\n  }\n}\n\nexport default ListRadio;\n","import ListState from './list-state';\n\n/**\n * 图例项和坐标轴文本选中的 Action\n * @ignore\n */\nclass ListSelected extends ListState {\n  protected stateName: string = 'selected';\n  public selected() {\n    this.setState();\n  }\n}\n\nexport default ListSelected;\n","import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element';\nimport { LooseObject } from '../../../interface';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n\n/** @ignore */\ninterface ListStateCfg {\n  componentNames: string[];\n}\n\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nclass ListState extends Action<ListStateCfg> {\n  protected stateName: string = '';\n  protected ignoreItemStates = [];\n\n  /** 获取触发的列表组件 */\n  protected getTriggerListInfo() {\n    const delegateObject = getDelegationObject(this.context);\n    let info: LooseObject = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component,\n      };\n    }\n    return info;\n  }\n  // 获取所有允许执行 Action 的组件\n  protected getAllowComponents() {\n    const view = this.context.view;\n    const components = getComponents(view);\n    const rst = [];\n    each(components, (component) => {\n      if (component.isList() && this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  }\n\n  /** 是否存在指定的状态 */\n  protected hasState(list: IList, item: ListItem) {\n    return list.hasState(item, this.stateName);\n  }\n\n  /** 清理组件的状态 */\n  protected clearAllComponentsState() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(this.stateName);\n    });\n  }\n\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  protected allowSetStateByElement(component): boolean {\n    const field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      const name = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name) === -1) {\n        return false;\n      }\n    }\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }\n  // 检测是否允许触发对应的状态改变事件\n  private allowSetStateByItem(item: ListItem, list: IList) {\n    const ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      const filterStates = ignoreStates.filter((state) => {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  }\n\n  // 设置组件的 item active\n  private setStateByElement(component, element: Element, enable: boolean) {\n    const field = component.get('field');\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    const text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }\n\n  // 设置状态\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      const delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }\n\n  // 多个 item 设置状态\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    const items = list.getItems();\n    each(items, (item) => {\n      if (item.name === name) {\n        this.setItemState(list, item, enable);\n      }\n    });\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    list.setItemState(item, this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 取消状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n      const enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  }\n\n  /**\n   * 取消状态\n   */\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  }\n}\n\nexport default ListState;\n","import ListState from './list-state';\n\n/**\n * 图例项取消勾选的 Action\n * @ignore\n */\nclass ListUnchecked extends ListState {\n  protected stateName: string = 'unchecked';\n  /**\n   * 取消勾选\n   */\n  public unchecked() {\n    this.setState();\n  }\n}\n\nexport default ListUnchecked;\n","import { isEqual, get, deepMix } from '@antv/util';\nimport { TOOLTIP_CSS_CONST } from '@antv/component';\nimport { Point } from '../../../../interface';\nimport Action from '../../base';\nimport { HtmlTooltip } from '../../../../dependents';\n\n/**\n * 用于组件文本省略后需要展示完整信息的 Tooltip Action\n * @ignore\n */\nexport default class EllipsisText extends Action {\n  private timeStamp: number = 0;\n  private location: Point;\n  private tooltip;\n\n  public destroy() {\n    super.destroy();\n    this.tooltip && this.tooltip.destroy();\n  }\n\n  /**\n   * 显示 Tooltip\n   * @returns\n   */\n  public show() {\n    const context = this.context;\n    const ev = context.event;\n    const lastTimeStamp = this.timeStamp;\n    const timeStamp = +new Date();\n\n    if (timeStamp - lastTimeStamp > 16) {\n      const preLoc = this.location;\n      const curLoc = { x: ev.x, y: ev.y };\n      if (!preLoc || !isEqual(preLoc, curLoc)) {\n        this.showTooltip(curLoc);\n      }\n      this.timeStamp = timeStamp;\n      this.location = curLoc;\n    }\n  }\n\n  /**\n   * 隐藏 Tooltip。\n   * @returns\n   */\n  public hide() {\n    this.hideTooltip();\n    this.location = null;\n  }\n\n  protected showTooltip(curLoc: Point) {\n    const context = this.context;\n    const ev = context.event;\n    const target = ev.target;\n\n    if (target && target.get('tip')) {\n      if (!this.tooltip) {\n        this.renderTooltip(); // 延迟生成\n      }\n      const tipContent = target.get('tip');\n      // 展示 tooltip\n      this.tooltip.update({\n        title: tipContent,\n        ...curLoc,\n      });\n      this.tooltip.show();\n    }\n  }\n\n  protected hideTooltip() {\n    this.tooltip && this.tooltip.hide();\n  }\n\n  private renderTooltip() {\n    const view = this.context.view;\n    const canvas = view.canvas;\n\n    const region = {\n      start: { x: 0, y: 0 },\n      end: { x: canvas.get('width'), y: canvas.get('height') },\n    };\n\n    const theme = view.getTheme();\n    const tooltipStyles = get(theme, ['components', 'tooltip', 'domStyles'], {}); // 获取 tooltip 样式\n    const tooltip = new HtmlTooltip({\n      parent: canvas.get('el').parentNode,\n      region,\n      visible: false,\n      crosshairs: null,\n      domStyles: {\n        ...deepMix({}, tooltipStyles, {\n          // 超长的时候，tooltip tip 最大宽度为 50%，然后可以换行\n          [TOOLTIP_CSS_CONST.CONTAINER_CLASS]: { 'max-width': '50%' },\n          [TOOLTIP_CSS_CONST.TITLE_CLASS]: { 'word-break': 'break-all' },\n        }),\n      },\n    });\n    tooltip.init();\n    tooltip.setCapture(false); // 不允许捕获事件\n    this.tooltip = tooltip;\n  }\n}\n","import { isEqual, get } from '@antv/util';\nimport { View } from '../../../../chart';\nimport { Point } from '../../../../interface';\nimport Action from '../../base';\nimport Tooltip from '../../../../chart/controller/tooltip';\n\n/**\n * Tooltip 展示隐藏的 Action\n * @ignore\n */\nclass TooltipAction extends Action {\n  private timeStamp: number = 0;\n  private location: Point;\n\n  /**\n   * 显示 Tooltip\n   * @returns\n   */\n  public show() {\n    const context = this.context;\n    const ev = context.event;\n    const view = context.view;\n    const isTooltipLocked = view.isTooltipLocked();\n    if (isTooltipLocked) {\n      // 锁定时不移动 tooltip\n      return;\n    }\n    const lastTimeStamp = this.timeStamp;\n    const timeStamp = +new Date();\n\n    // 在 showDelay 毫秒（默认 16ms）内到 tooltip 上可以实现 enterable（调参工程师）\n    const showDelay = get(context.view.getOptions(), 'tooltip.showDelay', 16);\n    if (timeStamp - lastTimeStamp > showDelay) {\n      const preLoc = this.location;\n      const curLoc = { x: ev.x, y: ev.y };\n      if (!preLoc || !isEqual(preLoc, curLoc)) {\n        this.showTooltip(view, curLoc);\n      }\n      this.timeStamp = timeStamp;\n      this.location = curLoc;\n    }\n  }\n\n  /**\n   * 隐藏 Tooltip。\n   * @returns\n   */\n  public hide() {\n    const view = this.context.view;\n\n    const tooltip = view.getController('tooltip');\n    const { clientX, clientY } = this.context.event;\n\n    // 如果已经 enterable + 已经在 tooltip 上，那么不隐藏\n    if (tooltip.isCursorEntered({ x: clientX, y: clientY })) {\n      return;\n    }\n\n    // 锁定 tooltip 时不隐藏\n    if (view.isTooltipLocked()) {\n      return;\n    }\n    this.hideTooltip(view);\n    this.location = null;\n  }\n\n  protected showTooltip(view: View, point: Point) {\n    // 相同位置不重复展示\n    view.showTooltip(point);\n  }\n\n  protected hideTooltip(view) {\n    view.hideTooltip();\n  }\n}\n\nexport default TooltipAction;\n","import { each } from '@antv/util';\nimport { View } from '../../../../chart';\nimport { Point } from '../../../../interface';\nimport { getSiblingPoint, getSilbings } from '../../util';\nimport TooltipAction from './geometry';\n\n/**\n * 存在多个 view 时，控制其他 view 上的 tooltip 显示\n * @ignore\n */\nclass SiblingTooltip extends TooltipAction {\n  /**\n   * 所有同一层级的 tooltip 显示\n   * @param view\n   * @param point\n   */\n  protected showTooltip(view: View, point: Point) {\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const siblingPoint = getSiblingPoint(view, sibling, point);\n      sibling.showTooltip(siblingPoint);\n    });\n  }\n  /**\n   * 隐藏同一层级的 tooltip\n   * @param view\n   */\n  protected hideTooltip(view) {\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      sibling.hideTooltip();\n    });\n  }\n}\n\nexport default SiblingTooltip;\n","/**\n * @fileoverview 设置画布的箭头，参看：https://www.w3school.com.cn/jsref/prop_style_cursor.asp\n * @author dxq613\n */\nimport Action from './base';\n\n/**\n * 鼠标形状的 Action\n * @ignore\n */\nclass CursorAction extends Action {\n  private setCursor(cursor) {\n    const view = this.context.view;\n    view.getCanvas().setCursor(cursor);\n  }\n\n  /**\n   * 默认光标（通常是一个箭头）\n   */\n  public default() {\n    this.setCursor('default');\n  }\n\n  /** 光标呈现为指示链接的指针（一只手） */\n  public pointer() {\n    this.setCursor('pointer');\n  }\n  /** 此光标指示某对象可被移动。 */\n  public move() {\n    this.setCursor('move');\n  }\n  /** 光标呈现为十字线。 */\n  public crosshair() {\n    this.setCursor('crosshair');\n  }\n  /** 此光标指示程序正忙（通常是一只表或沙漏）。 */\n  public wait() {\n    this.setCursor('wait');\n  }\n\n  /** 此光标指示可用的帮助（通常是一个问号或一个气球）。 */\n  public help() {\n    this.setCursor('help');\n  }\n\n  /** 此光标指示文本。 */\n  public text() {\n    this.setCursor('text');\n  }\n\n  /**\n   * 此光标指示矩形框的边缘可被向右（东）移动。\n   */\n  public eResize() {\n    this.setCursor('e-resize');\n  }\n\n  /**\n   * 此光标指示矩形框的边缘可被向左（西）移动。\n   */\n  public wResize() {\n    this.setCursor('w-resize');\n  }\n\n  /**\n   * 此光标指示矩形框的边缘可被向上（北）移动。\n   */\n  public nResize() {\n    this.setCursor('n-resize');\n  }\n\n  /**\n   * 此光标指示矩形框的边缘可被向下（南）移动。\n   */\n  public sResize() {\n    this.setCursor('s-resize');\n  }\n  /**\n   * 光标指示可移动的方向 右上方（东北）\n   */\n  public neResize() {\n    this.setCursor('ne-resize');\n  }\n  /**\n   * 光标指示可移动的方向 左上方（西北）\n   */\n  public nwResize() {\n    this.setCursor('nw-resize');\n  }\n  /**\n   * 光标指示可移动的方向右下方（东南）\n   */\n  public seResize() {\n    this.setCursor('se-resize');\n  }\n  /**\n   * 光标指示可移动的方向左下方（西南）\n   */\n  public swResize() {\n    this.setCursor('sw-resize');\n  }\n\n  /**\n   * 光标指示可以在上下方向移动\n   */\n  public nsResize() {\n    this.setCursor('ns-resize');\n  }\n  /**\n   * 光标指示可以在左右方向移动\n   */\n  public ewResize() {\n    this.setCursor('ew-resize');\n  }\n  /**\n   * 光标显示可以被放大\n   */\n  public zoomIn() {\n    this.setCursor('zoom-in');\n  }\n  /**\n   * 光标显示可以缩小尺寸\n   */\n  public zoomOut() {\n    this.setCursor('zoom-out');\n  }\n}\n\nexport default CursorAction;\n"],"names":["context","cfg","this","addAction","Action","assign","applyCfg","removeAction","__extends","CallbackAction","callback","_super","destroy","call","AxisDescription","getDelegationObject","axis","title","description","text","descriptionTooltipStyle","event","x","y","tooltip","renderTooltip","update","customContent","TOOLTIP_CSS_CONST","concat","show","hide","canvas","view","region","start","end","get","HtmlTooltip","parent","parentNode","visible","containerId","domStyles","deepMix","_a","padding","color","init","setCapture","_this","ListActive","setState","ListState","STATUS_UNCHECKED","STATUS_CHECKED","ListChecked","list","item","enable","setCheckedBy","el","items","getItems","each","hasState","setItemState","triggerInfo","getTriggerListInfo","some","list_1","t","reset","components","getAllowComponents","component","clearItemsState","ListFocus","clickedItem","checkedItems","filter","uncheckedItems","checkedItem","length","items_1_1","id","items_2_1","items_3_1","items_4_1","STATUS_UNACTIVE","STATUS_ACTIVE","ListHighlight","name","setHighlightBy","activeItems","getItemsByState","allCancel_1","clear","clearList","STATUS_SHOW","TIP_ID","ListRadio","ev","lastTimeStamp","timeStamp","Date","target","preLoc","location","curLoc","isEqual","showTooltip","hideTooltip","getCanvas","getBoundingClientRect","offsetX","offsetY","__assign","tooltipStyles","transform","background","document","getElementById","body","removeChild","crosshairs","ListSelected","delegateObject","info","isList","getComponents","rst","allowSetStateByElement","push","stateName","field","componentNames","name_1","indexOf","scale","getScaleByField","isCategory","ignoreStates","ignoreItemStates","state","element","value","getElementValue","getText","setItemsState","getCurrentElement","setStateByElement","allowSetStateByItem","setStateEnable","clearAllComponentsState","ListUnchecked","EllipsisText","tipContent","theme","getTheme","TooltipAction","isTooltipLocked","getOptions","getController","clientX","clientY","isCursorEntered","point","SiblingTooltip","siblings","getSilbings","sibling","siblingPoint","getSiblingPoint","CursorAction","cursor","setCursor"],"sourceRoot":""}