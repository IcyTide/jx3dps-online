{"version":3,"file":"static/js/6131.f724e4fc.js","mappings":"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","sources":["../node_modules/@antv/g-svg/src/defs/gradient.ts","../node_modules/@antv/g-svg/src/defs/shadow.ts","../node_modules/@antv/g-svg/src/defs/arrow.ts","../node_modules/@antv/g-svg/src/defs/clip.ts","../node_modules/@antv/g-svg/src/defs/pattern.ts","../node_modules/@antv/g-svg/src/defs/index.ts","../node_modules/@antv/g-svg/src/canvas.ts","../node_modules/@antv/g-svg/src/constant.ts","../node_modules/@antv/g-svg/src/group.ts","../node_modules/@antv/g-svg/src/index.ts","../node_modules/@antv/g-svg/src/shape/base.ts","../node_modules/@antv/g-svg/src/shape/circle.ts","../node_modules/@antv/g-svg/src/shape/dom.ts","../node_modules/@antv/g-svg/src/shape/ellipse.ts"],"sourcesContent":["/**\n * @fileoverview gradient\n * @author dengfuping_develop@163.com\n */\n\nimport { each, mod, toRadian, uniqueId } from '@antv/util';\nimport { createSVGElement } from '../util/dom';\n\nconst regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nconst regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nconst regexColorStop = /[\\d.]+:(#[^\\s]+|[^)]+\\))/gi;\n\nfunction addStop(steps) {\n  const arr = steps.match(regexColorStop);\n  if (!arr) {\n    return '';\n  }\n  let stops = '';\n  arr.sort((a, b) => {\n    a = a.split(':');\n    b = b.split(':');\n    return Number(a[0]) - Number(b[0]);\n  });\n  each(arr, (item: any) => {\n    item = item.split(':');\n    stops += `<stop offset=\"${item[0]}\" stop-color=\"${item[1]}\"></stop>`;\n  });\n  return stops;\n}\n\nfunction parseLineGradient(color, el) {\n  const arr = regexLG.exec(color);\n  const angle = mod(toRadian(parseFloat(arr[1])), Math.PI * 2);\n  const steps = arr[2];\n  let start;\n  let end;\n\n  if (angle >= 0 && angle < 0.5 * Math.PI) {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 1,\n      y: 1,\n    };\n  } else if (0.5 * Math.PI <= angle && angle < Math.PI) {\n    start = {\n      x: 1,\n      y: 0,\n    };\n    end = {\n      x: 0,\n      y: 1,\n    };\n  } else if (Math.PI <= angle && angle < 1.5 * Math.PI) {\n    start = {\n      x: 1,\n      y: 1,\n    };\n    end = {\n      x: 0,\n      y: 0,\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 1,\n    };\n    end = {\n      x: 1,\n      y: 0,\n    };\n  }\n\n  const tanTheta = Math.tan(angle);\n  const tanTheta2 = tanTheta * tanTheta;\n\n  const x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;\n  const y = (tanTheta * (end.x - start.x + tanTheta * (end.y - start.y))) / (tanTheta2 + 1) + start.y;\n  el.setAttribute('x1', start.x);\n  el.setAttribute('y1', start.y);\n  el.setAttribute('x2', x);\n  el.setAttribute('y2', y);\n  el.innerHTML = addStop(steps);\n}\n\nfunction parseRadialGradient(color, self) {\n  const arr = regexRG.exec(color);\n  const cx = parseFloat(arr[1]);\n  const cy = parseFloat(arr[2]);\n  const r = parseFloat(arr[3]);\n  const steps = arr[4];\n  self.setAttribute('cx', cx);\n  self.setAttribute('cy', cy);\n  self.setAttribute('r', r);\n  self.innerHTML = addStop(steps);\n}\n\nclass Gradient {\n  el: SVGGradientElement;\n  id: string;\n  cfg: {\n    [key: string]: any;\n  } = {};\n\n  constructor(cfg) {\n    let el = null;\n    const id = uniqueId('gradient_');\n    if (cfg.toLowerCase()[0] === 'l') {\n      el = createSVGElement('linearGradient');\n      parseLineGradient(cfg, el);\n    } else {\n      el = createSVGElement('radialGradient');\n      parseRadialGradient(cfg, el);\n    }\n    el.setAttribute('id', id);\n    this.el = el;\n    this.id = id;\n    this.cfg = cfg;\n    return this;\n  }\n\n  match(type, attr) {\n    return this.cfg === attr;\n  }\n}\n\nexport default Gradient;\n","/**\n * @fileoverview shadow\n * @author dengfuping_develop@163.com\n */\n\nimport { each, uniqueId } from '@antv/util';\nimport { createSVGElement } from '../util/dom';\n\nconst ATTR_MAP = {\n  shadowColor: 'color',\n  shadowOpacity: 'opacity',\n  shadowBlur: 'blur',\n  shadowOffsetX: 'dx',\n  shadowOffsetY: 'dy',\n};\n\nconst SHADOW_DIMENSION = {\n  x: '-40%',\n  y: '-40%',\n  width: '200%',\n  height: '200%',\n};\n\nclass Shadow {\n  type: string = 'filter';\n  id: string;\n  el: SVGFilterElement;\n  cfg: {\n    [key: string]: any;\n  } = {};\n\n  constructor(cfg) {\n    this.type = 'filter';\n    const el = createSVGElement('filter') as SVGFilterElement;\n    // expand the filter region to fill in shadows\n    each(SHADOW_DIMENSION, (v, k) => {\n      el.setAttribute(k, v);\n    });\n    this.el = el;\n    this.id = uniqueId('filter_');\n    this.el.id = this.id;\n    this.cfg = cfg;\n    this._parseShadow(cfg, el);\n    return this;\n  }\n\n  match(type, cfg) {\n    if (this.type !== type) {\n      return false;\n    }\n    let flag = true;\n    const config = this.cfg;\n    each(Object.keys(config), (attr) => {\n      if (config[attr] !== cfg[attr]) {\n        flag = false;\n        return false;\n      }\n    });\n    return flag;\n  }\n\n  update(name, value) {\n    const config = this.cfg;\n    config[ATTR_MAP[name]] = value;\n    this._parseShadow(config, this.el);\n    return this;\n  }\n\n  _parseShadow(config, el) {\n    const child = `<feDropShadow\n      dx=\"${config.dx || 0}\"\n      dy=\"${config.dy || 0}\"\n      stdDeviation=\"${config.blur ? config.blur / 10 : 0}\"\n      flood-color=\"${config.color ? config.color : '#000'}\"\n      flood-opacity=\"${config.opacity ? config.opacity : 1}\"\n      />`;\n    el.innerHTML = child;\n  }\n}\n\nexport default Shadow;\n","/**\n * @fileoverview arrow\n * @author dengfuping_develop@163.com\n */\n\nimport { isArray, uniqueId } from '@antv/util';\nimport { createSVGElement } from '../util/dom';\n\nclass Arrow {\n  id: string;\n  el: SVGMarkerElement;\n  child: SVGPathElement | any; // TODO G.Shape, not any\n  stroke: string;\n  cfg: {\n    [key: string]: any;\n  } = {};\n\n  constructor(attrs, type) {\n    const el = createSVGElement('marker') as SVGMarkerElement;\n    const id = uniqueId('marker_');\n    el.setAttribute('id', id);\n    const shape = createSVGElement('path');\n    shape.setAttribute('stroke', attrs.stroke || 'none');\n    shape.setAttribute('fill', attrs.fill || 'none');\n    el.appendChild(shape);\n    el.setAttribute('overflow', 'visible');\n    el.setAttribute('orient', 'auto-start-reverse');\n    this.el = el;\n    this.child = shape;\n    this.id = id;\n    const cfg = attrs[type === 'marker-start' ? 'startArrow' : 'endArrow'];\n    this.stroke = attrs.stroke || '#000';\n    if (cfg === true) {\n      this._setDefaultPath(type, shape);\n    } else {\n      this.cfg = cfg; // when arrow config exists\n      this._setMarker(attrs.lineWidth, shape);\n    }\n    return this;\n  }\n\n  match() {\n    return false;\n  }\n\n  _setDefaultPath(type, el) {\n    const parent = this.el;\n    // 默认箭头的边长为 10，夹角为 60 度\n    el.setAttribute('d', `M0,0 L${10 * Math.cos(Math.PI / 6)},5 L0,10`);\n    parent.setAttribute('refX', `${10 * Math.cos(Math.PI / 6)}`);\n    parent.setAttribute('refY', `${5}`);\n  }\n\n  _setMarker(r, el) {\n    const parent = this.el;\n    let path = this.cfg.path;\n    const d = this.cfg.d;\n\n    if (isArray(path)) {\n      path = path\n        .map((segment) => {\n          return segment.join(' ');\n        })\n        .join('');\n    }\n    el.setAttribute('d', path);\n    parent.appendChild(el);\n    if (d) {\n      parent.setAttribute('refX', `${d / r}`);\n    }\n  }\n\n  update(fill) {\n    const child = this.child;\n    if (child.attr) {\n      child.attr('fill', fill);\n    } else {\n      child.setAttribute('fill', fill);\n    }\n  }\n}\n\nexport default Arrow;\n","/**\n * @fileoverview clip\n * @author dengfuping_develop@163.com\n */\n\nimport { uniqueId } from '@antv/util';\nimport { createSVGElement } from '../util/dom';\n\nclass Clip {\n  type: string = 'clip';\n  id: string;\n  el: SVGClipPathElement;\n  cfg: {\n    [key: string]: any;\n  } = {};\n\n  constructor(cfg) {\n    const el = createSVGElement('clipPath') as SVGClipPathElement;\n    this.el = el;\n    this.id = uniqueId('clip_');\n    el.id = this.id;\n    const shapeEl = cfg.cfg.el;\n    el.appendChild(shapeEl);\n    this.cfg = cfg;\n    return this;\n  }\n\n  match() {\n    return false;\n  }\n\n  remove() {\n    const el = this.el;\n    el.parentNode.removeChild(el);\n  }\n}\n\nexport default Clip;\n","/**\n * @fileoverview pattern\n * @author dengfuping_develop@163.com\n */\n\nimport { uniqueId } from '@antv/util';\nimport { createSVGElement } from '../util/dom';\n\nconst regexPR = /^p\\s*\\(\\s*([axyn])\\s*\\)\\s*(.*)/i;\n\nclass Pattern {\n  el: SVGPatternElement;\n  id: string;\n  cfg: {\n    [key: string]: any;\n  } = {};\n\n  constructor(cfg) {\n    const el = createSVGElement('pattern') as SVGPatternElement;\n    el.setAttribute('patternUnits', 'userSpaceOnUse');\n    const child = createSVGElement('image');\n    el.appendChild(child);\n    const id = uniqueId('pattern_');\n    el.id = id;\n    this.el = el;\n    this.id = id;\n    this.cfg = cfg;\n    const arr = regexPR.exec(cfg);\n    const source = arr[2];\n    child.setAttribute('href', source);\n    const img = new Image();\n    if (!source.match(/^data:/i)) {\n      img.crossOrigin = 'Anonymous';\n    }\n    img.src = source;\n    function onload() {\n      el.setAttribute('width', `${img.width}`);\n      el.setAttribute('height', `${img.height}`);\n    }\n    if (img.complete) {\n      onload();\n    } else {\n      img.onload = onload;\n      // Fix onload() bug in IE9\n      img.src = img.src;\n    }\n\n    return this;\n  }\n\n  match(type, attr) {\n    return this.cfg === attr;\n  }\n}\n\nexport default Pattern;\n","/**\n * @fileoverview defs\n * @author dengfuping_develop@163.com\n */\n\nimport { uniqueId } from '@antv/util';\nimport Gradient from './gradient';\nimport Shadow from './shadow';\nimport Arrow from './arrow';\nimport Clip from './clip';\nimport Pattern from './pattern';\nimport { createSVGElement } from '../util/dom';\n\nclass Defs {\n  id: string;\n  defaultArrow: {};\n  children: any[];\n  el: SVGDefsElement;\n  canvas: SVGSVGElement;\n\n  constructor(canvas) {\n    const el = createSVGElement('defs') as SVGDefsElement;\n    const id = uniqueId('defs_');\n    el.id = id;\n    canvas.appendChild(el);\n    this.children = [];\n    this.defaultArrow = {};\n    this.el = el;\n    this.canvas = canvas;\n  }\n\n  find(type, attr) {\n    const children = this.children;\n    let result = null;\n    for (let i = 0; i < children.length; i++) {\n      if (children[i].match(type, attr)) {\n        result = children[i].id;\n        break;\n      }\n    }\n    return result;\n  }\n\n  findById(id) {\n    const children = this.children;\n    let flag = null;\n    for (let i = 0; i < children.length; i++) {\n      if (children[i].id === id) {\n        flag = children[i];\n        break;\n      }\n    }\n    return flag;\n  }\n\n  add(item) {\n    this.children.push(item);\n    item.canvas = this.canvas;\n    item.parent = this;\n  }\n\n  getDefaultArrow(attrs, name) {\n    const stroke = attrs.stroke || attrs.strokeStyle;\n    if (this.defaultArrow[stroke]) {\n      return this.defaultArrow[stroke].id;\n    }\n    const arrow = new Arrow(attrs, name);\n    this.defaultArrow[stroke] = arrow;\n    this.el.appendChild(arrow.el);\n    this.add(arrow);\n    return arrow.id;\n  }\n\n  addGradient(cfg) {\n    const gradient = new Gradient(cfg);\n    this.el.appendChild(gradient.el);\n    this.add(gradient);\n    return gradient.id;\n  }\n\n  addArrow(attrs, name) {\n    const arrow = new Arrow(attrs, name);\n    this.el.appendChild(arrow.el);\n    this.add(arrow);\n    return arrow.id;\n  }\n\n  addShadow(cfg) {\n    const shadow = new Shadow(cfg);\n    this.el.appendChild(shadow.el);\n    this.add(shadow);\n    return shadow.id;\n  }\n\n  addPattern(cfg) {\n    const pattern = new Pattern(cfg);\n    this.el.appendChild(pattern.el);\n    this.add(pattern);\n    return pattern.id;\n  }\n\n  addClip(cfg) {\n    const clip = new Clip(cfg);\n    this.el.appendChild(clip.el);\n    this.add(clip);\n    return clip.id;\n  }\n}\n\nexport default Defs;\n","import { AbstractCanvas, IShape } from '@antv/g-base';\nimport { ChangeType } from '@antv/g-base';\nimport { IElement } from './interfaces';\nimport { SHAPE_TO_TAGS } from './constant';\nimport { drawChildren } from './util/draw';\nimport { setTransform, setClip } from './util/svg';\nimport { sortDom, createSVGElement } from './util/dom';\nimport * as Shape from './shape';\nimport Group from './group';\nimport Defs from './defs';\n\nclass Canvas extends AbstractCanvas {\n  constructor(cfg) {\n    super({\n      ...cfg,\n      autoDraw: true,\n      // 设置渲染引擎为 canvas，只读属性\n      renderer: 'svg',\n    });\n  }\n\n  getShapeBase() {\n    return Shape;\n  }\n\n  getGroupBase() {\n    return Group;\n  }\n\n  // 覆盖 Container 中通过遍历的方式获取 shape 对象的逻辑，直接走 SVG 的 dom 拾取即可\n  getShape(x: number, y: number, ev: Event): IShape {\n    let target = <Element>ev.target || <Element>ev.srcElement;\n    if (!SHAPE_TO_TAGS[target.tagName]) {\n      let parent = <Element>target.parentNode;\n      while (parent && !SHAPE_TO_TAGS[parent.tagName]) {\n        parent = <Element>parent.parentNode;\n      }\n      target = parent;\n    }\n    return this.find((child) => child.get('el') === target) as IShape;\n  }\n\n  // 复写基类的方法生成标签\n  createDom() {\n    const element = createSVGElement('svg') as SVGSVGElement;\n    const context = new Defs(element);\n    element.setAttribute('width', `${this.get('width')}`);\n    element.setAttribute('height', `${this.get('height')}`);\n    // 缓存 context 对象\n    this.set('context', context);\n    return element;\n  }\n\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  onCanvasChange(changeType: ChangeType) {\n    const context = this.get('context');\n    const el = this.get('el');\n    if (changeType === 'sort') {\n      const children = this.get('children');\n      if (children && children.length) {\n        sortDom(this, (a: IElement, b: IElement) => {\n          return children.indexOf(a) - children.indexOf(b) ? 1 : 0;\n        });\n      }\n    } else if (changeType === 'clear') {\n      // el maybe null for canvas\n      if (el) {\n        // 清空 SVG 元素\n        el.innerHTML = '';\n        const defsEl = context.el;\n        // 清空 defs 元素\n        defsEl.innerHTML = '';\n        // 将清空后的 defs 元素挂载到 el 下\n        el.appendChild(defsEl);\n      }\n    } else if (changeType === 'matrix') {\n      setTransform(this);\n    } else if (changeType === 'clip') {\n      setClip(this, context);\n    } else if (changeType === 'changeSize') {\n      el.setAttribute('width', `${this.get('width')}`);\n      el.setAttribute('height', `${this.get('height')}`);\n    }\n  }\n\n  // 复写基类的 draw 方法\n  draw() {\n    const context = this.get('context');\n    const children = this.getChildren() as IElement[];\n    setClip(this, context);\n    if (children.length) {\n      drawChildren(context, children);\n    }\n  }\n}\n\nexport default Canvas;\n","export const SHAPE_TO_TAGS = {\n  rect: 'path',\n  circle: 'circle',\n  line: 'line',\n  path: 'path',\n  marker: 'path',\n  text: 'text',\n  polyline: 'polyline',\n  polygon: 'polygon',\n  image: 'image',\n  ellipse: 'ellipse',\n  dom: 'foreignObject',\n};\n\nexport const SVG_ATTR_MAP = {\n  opacity: 'opacity',\n  fillStyle: 'fill',\n  fill: 'fill',\n  fillOpacity: 'fill-opacity',\n  strokeStyle: 'stroke',\n  strokeOpacity: 'stroke-opacity',\n  stroke: 'stroke',\n  x: 'x',\n  y: 'y',\n  r: 'r',\n  rx: 'rx',\n  ry: 'ry',\n  width: 'width',\n  height: 'height',\n  x1: 'x1',\n  x2: 'x2',\n  y1: 'y1',\n  y2: 'y2',\n  lineCap: 'stroke-linecap',\n  lineJoin: 'stroke-linejoin',\n  lineWidth: 'stroke-width',\n  lineDash: 'stroke-dasharray',\n  lineDashOffset: 'stroke-dashoffset',\n  miterLimit: 'stroke-miterlimit',\n  font: 'font',\n  fontSize: 'font-size',\n  fontStyle: 'font-style',\n  fontVariant: 'font-variant',\n  fontWeight: 'font-weight',\n  fontFamily: 'font-family',\n  startArrow: 'marker-start',\n  endArrow: 'marker-end',\n  path: 'd',\n  class: 'class',\n  id: 'id',\n  style: 'style',\n  preserveAspectRatio: 'preserveAspectRatio',\n};\n\nexport const EVENTS = [\n  'click',\n  'mousedown',\n  'mouseup',\n  'dblclick',\n  'contextmenu',\n  'mouseenter',\n  'mouseleave',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'wheel',\n];\n","import { AbstractGroup } from '@antv/g-base';\nimport { ChangeType } from '@antv/g-base';\nimport { each } from '@antv/util';\nimport { IElement, IGroup } from './interfaces';\nimport * as Shape from './shape';\nimport Defs from './defs';\nimport { drawChildren, refreshElement } from './util/draw';\nimport { setClip, setTransform } from './util/svg';\nimport { SVG_ATTR_MAP } from './constant';\nimport { createSVGElement } from './util/dom';\n\nclass Group extends AbstractGroup {\n  // SVG 中分组对应实体标签 <g>\n  isEntityGroup() {\n    return true;\n  }\n\n  createDom() {\n    const element = createSVGElement('g');\n    this.set('el', element);\n    const parent = this.getParent();\n    if (parent) {\n      let parentNode = parent.get('el');\n      if (parentNode) {\n        parentNode.appendChild(element);\n      } else {\n        // parentNode maybe null for group\n        parentNode = (parent as IGroup).createDom();\n        parent.set('el', parentNode);\n        parentNode.appendChild(element);\n      }\n    }\n    return element;\n  }\n\n  // 覆盖基类的 afterAttrsChange 方法\n  afterAttrsChange(targetAttrs) {\n    super.afterAttrsChange(targetAttrs);\n    const canvas = this.get('canvas');\n    // 只有挂载到画布下，才对元素进行实际渲染\n    if (canvas && canvas.get('autoDraw')) {\n      const context = canvas.get('context');\n      this.createPath(context, targetAttrs);\n    }\n  }\n\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  onCanvasChange(changeType: ChangeType) {\n    refreshElement(this, changeType);\n  }\n\n  getShapeBase() {\n    return Shape;\n  }\n\n  getGroupBase() {\n    return Group;\n  }\n\n  draw(context: Defs) {\n    const children = this.getChildren() as IElement[];\n    const el = this.get('el');\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        this.createDom();\n      }\n      setClip(this, context);\n      this.createPath(context);\n      if (children.length) {\n        drawChildren(context, children);\n      }\n    }\n  }\n\n  /**\n   * 绘制分组的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n  createPath(context: Defs, targetAttrs?) {\n    const attrs = this.attr();\n    const el = this.get('el');\n    each(targetAttrs || attrs, (value, attr) => {\n      if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n    setTransform(this);\n  }\n}\n\nexport default Group;\n","import * as Shape from './shape';\n\nexport * from '@antv/g-base';\nexport { IElement, IGroup, IShape } from './interfaces';\nexport { default as Canvas } from './canvas';\nexport { default as Group } from './group';\nexport { Shape };\n\nexport const version = '0.5.6';\n","import { AbstractShape } from '@antv/g-base';\nimport { ShapeAttrs, ChangeType, BBox } from '@antv/g-base';\nimport { IShape } from '../interfaces';\nimport Defs from '../defs';\nimport { setShadow, setTransform, setClip } from '../util/svg';\nimport { createDom } from '../util/dom';\nimport { refreshElement } from '../util/draw';\nimport { SVG_ATTR_MAP } from '../constant';\nimport * as Shape from './index';\nimport Group from '../group';\nimport { getBBoxMethod } from '@antv/g-base';\n\nclass ShapeBase extends AbstractShape implements IShape {\n  type: string = 'svg';\n  canFill: boolean = false;\n  canStroke: boolean = false;\n\n  getDefaultAttrs() {\n    const attrs = super.getDefaultAttrs();\n    // 设置默认值\n    return {\n      ...attrs,\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1,\n    };\n  }\n\n  // 覆盖基类的 afterAttrsChange 方法\n  afterAttrsChange(targetAttrs: ShapeAttrs) {\n    super.afterAttrsChange(targetAttrs);\n    const canvas = this.get('canvas');\n    // 只有挂载到画布下，才对元素进行实际渲染\n    if (canvas && canvas.get('autoDraw')) {\n      const context = canvas.get('context');\n      this.draw(context, targetAttrs);\n    }\n  }\n\n  getShapeBase() {\n    return Shape;\n  }\n\n  getGroupBase() {\n    return Group;\n  }\n\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  onCanvasChange(changeType: ChangeType) {\n    refreshElement(this, changeType);\n  }\n\n  calculateBBox(): BBox {\n    const el = this.get('el');\n    let bbox = null;\n    // 包围盒计算依赖于绘制，如果还没有生成对应的 Dom 元素，则包围盒的长宽均为 0\n    if (el) {\n      bbox = el.getBBox();\n    } else {\n      const bboxMethod = getBBoxMethod(this.get('type'));\n      if (bboxMethod) {\n        bbox = bboxMethod(this);\n      }\n    }\n    if (bbox) {\n      const { x, y, width, height } = bbox;\n      const lineWidth = this.getHitLineWidth();\n      const halfWidth = lineWidth / 2;\n      const minX = x - halfWidth;\n      const minY = y - halfWidth;\n      const maxX = x + width + halfWidth;\n      const maxY = y + height + halfWidth;\n      return {\n        x: minX,\n        y: minY,\n        minX,\n        minY,\n        maxX,\n        maxY,\n        width: width + lineWidth,\n        height: height + lineWidth,\n      };\n    }\n    return {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  isFill() {\n    const { fill, fillStyle } = this.attr();\n    return (fill || fillStyle || this.isClipShape()) && this.canFill;\n  }\n\n  isStroke() {\n    const { stroke, strokeStyle } = this.attr();\n    return (stroke || strokeStyle) && this.canStroke;\n  }\n\n  draw(context, targetAttrs) {\n    const el = this.get('el');\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        createDom(this);\n      }\n      setClip(this, context);\n      this.createPath(context, targetAttrs);\n      this.shadow(context, targetAttrs);\n      this.strokeAndFill(context, targetAttrs);\n      this.transform(targetAttrs);\n    }\n  }\n\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n  createPath(context: Defs, targetAttrs?: ShapeAttrs) {}\n\n  // stroke and fill\n  strokeAndFill(context, targetAttrs?) {\n    const attrs = targetAttrs || this.attr();\n    const { fill, fillStyle, stroke, strokeStyle, fillOpacity, strokeOpacity, lineWidth } = attrs;\n    const el = this.get('el');\n\n    if (this.canFill) {\n      // 初次渲染和更新渲染的逻辑有所不同: 初次渲染值为空时，需要设置为 none，否则就会是黑色，而更新渲染则不需要\n      if (!targetAttrs) {\n        this._setColor(context, 'fill', fill || fillStyle);\n      } else if ('fill' in attrs) {\n        this._setColor(context, 'fill', fill);\n      } else if ('fillStyle' in attrs) {\n        // compatible with fillStyle\n        this._setColor(context, 'fill', fillStyle);\n      }\n      if (fillOpacity) {\n        el.setAttribute(SVG_ATTR_MAP['fillOpacity'], fillOpacity);\n      }\n    }\n\n    if (this.canStroke && lineWidth > 0) {\n      if (!targetAttrs) {\n        this._setColor(context, 'stroke', stroke || strokeStyle);\n      } else if ('stroke' in attrs) {\n        this._setColor(context, 'stroke', stroke);\n      } else if ('strokeStyle' in attrs) {\n        // compatible with strokeStyle\n        this._setColor(context, 'stroke', strokeStyle);\n      }\n      if (strokeOpacity) {\n        el.setAttribute(SVG_ATTR_MAP['strokeOpacity'], strokeOpacity);\n      }\n      if (lineWidth) {\n        el.setAttribute(SVG_ATTR_MAP['lineWidth'], lineWidth);\n      }\n    }\n  }\n\n  _setColor(context, attr, value) {\n    const el = this.get('el');\n    if (!value) {\n      // need to set `none` to avoid default value\n      el.setAttribute(SVG_ATTR_MAP[attr], 'none');\n      return;\n    }\n    value = value.trim();\n    if (/^[r,R,L,l]{1}[\\s]*\\(/.test(value)) {\n      let id = context.find('gradient', value);\n      if (!id) {\n        id = context.addGradient(value);\n      }\n      el.setAttribute(SVG_ATTR_MAP[attr], `url(#${id})`);\n    } else if (/^[p,P]{1}[\\s]*\\(/.test(value)) {\n      let id = context.find('pattern', value);\n      if (!id) {\n        id = context.addPattern(value);\n      }\n      el.setAttribute(SVG_ATTR_MAP[attr], `url(#${id})`);\n    } else {\n      el.setAttribute(SVG_ATTR_MAP[attr], value);\n    }\n  }\n\n  shadow(context, targetAttrs?) {\n    const attrs = this.attr();\n    const { shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor } = targetAttrs || attrs;\n    if (shadowOffsetX || shadowOffsetY || shadowBlur || shadowColor) {\n      setShadow(this, context);\n    }\n  }\n\n  transform(targetAttrs?) {\n    const attrs = this.attr();\n    const { matrix } = targetAttrs || attrs;\n    if (matrix) {\n      setTransform(this);\n    }\n  }\n\n  isInShape(refX: number, refY: number): boolean {\n    return this.isPointInPath(refX, refY);\n  }\n\n  isPointInPath(refX: number, refY: number): boolean {\n    const el = this.get('el');\n    const canvas = this.get('canvas');\n    const bbox = canvas.get('el').getBoundingClientRect();\n    const clientX = refX + bbox.left;\n    const clientY = refY + bbox.top;\n    const element = document.elementFromPoint(clientX, clientY);\n    if (element && element.isEqualNode(el)) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n  getHitLineWidth() {\n    const { lineWidth, lineAppendWidth } = this.attrs;\n    if (this.isStroke()) {\n      return lineWidth + lineAppendWidth;\n    }\n    return 0;\n  }\n}\n\nexport default ShapeBase;\n","/**\n * @fileoverview circle\n * @author dengfuping_develop@163.com\n */\n\nimport { each } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\n\nclass Circle extends ShapeBase {\n  type: string = 'circle';\n  canFill: boolean = true;\n  canStroke: boolean = true;\n\n  getDefaultAttrs() {\n    const attrs = super.getDefaultAttrs();\n    return {\n      ...attrs,\n      x: 0,\n      y: 0,\n      r: 0,\n    };\n  }\n\n  createPath(context, targetAttrs) {\n    const attrs = this.attr();\n    const el = this.get('el');\n    each(targetAttrs || attrs, (value, attr) => {\n      // 圆和椭圆的点坐标属性不是 x, y，而是 cx, cy\n      if (attr === 'x' || attr === 'y') {\n        el.setAttribute(`c${attr}`, value);\n      } else if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n  }\n}\n\nexport default Circle;\n","/**\n * @fileoverview dom\n * @author dengfuping_develop@163.com\n */\n\nimport { each } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\n\nclass Dom extends ShapeBase {\n  type: string = 'dom';\n  canFill: boolean = false;\n  canStroke: boolean = false;\n\n  createPath(context, targetAttrs) {\n    const attrs = this.attr();\n    const el = this.get('el');\n    each(targetAttrs || attrs, (value, attr) => {\n      if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n    if (typeof attrs['html'] === 'function') {\n      const element = attrs['html'].call(this, attrs);\n      if (element instanceof Element || element instanceof HTMLDocument) {\n        const children = el.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n          el.removeChild(children[i]);\n        }\n        el.appendChild(element); // append to el if it's an element\n      } else {\n        el.innerHTML = element; // set innerHTML\n      }\n    } else {\n      el.innerHTML = attrs['html']; // set innerHTML\n    }\n  }\n}\n\nexport default Dom;\n","/**\n * @fileoverview ellipse\n * @author dengfuping_develop@163.com\n */\n\nimport { each } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\n\nclass Ellipse extends ShapeBase {\n  type: string = 'ellipse';\n  canFill: boolean = true;\n  canStroke: boolean = true;\n\n  getDefaultAttrs() {\n    const attrs = super.getDefaultAttrs();\n    return {\n      ...attrs,\n      x: 0,\n      y: 0,\n      rx: 0,\n      ry: 0,\n    };\n  }\n\n  createPath(context, targetAttrs) {\n    const attrs = this.attr();\n    const el = this.get('el');\n    each(targetAttrs || attrs, (value, attr) => {\n      // 圆和椭圆的点坐标属性不是 x, y，而是 cx, cy\n      if (attr === 'x' || attr === 'y') {\n        el.setAttribute(`c${attr}`, value);\n      } else if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n  }\n}\n\nexport default Ellipse;\n"],"names":["regexLG","regexRG","regexColorStop","addStop","steps","arr","match","stops","sort","a","b","split","Number","each","item","cfg","el","id","uniqueId","toLowerCase","color","start","end","exec","angle","mod","toRadian","parseFloat","Math","PI","x","y","tanTheta","tan","tanTheta2","setAttribute","innerHTML","parseLineGradient","createSVGElement","self","cx","cy","r","parseRadialGradient","this","Gradient","type","attr","ATTR_MAP","shadowColor","shadowOpacity","shadowBlur","shadowOffsetX","shadowOffsetY","SHADOW_DIMENSION","width","height","v","k","_parseShadow","Shadow","flag","config","Object","keys","name","value","child","dx","dy","blur","opacity","attrs","shape","stroke","fill","appendChild","_setDefaultPath","_setMarker","lineWidth","Arrow","parent","cos","path","d","isArray","map","segment","join","shapeEl","Clip","parentNode","removeChild","regexPR","source","img","Image","onload","crossOrigin","src","complete","Pattern","canvas","children","defaultArrow","Defs","result","i","length","push","strokeStyle","arrow","add","gradient","shadow","pattern","clip","_super","autoDraw","renderer","__extends","Canvas","Shape","Group","ev","target","srcElement","SHAPE_TO_TAGS","tagName","parent_1","find","get","element","context","set","changeType","children_1","sortDom","indexOf","defsEl","setTransform","setClip","getChildren","drawChildren","AbstractCanvas","rect","circle","line","marker","text","polyline","polygon","image","ellipse","dom","SVG_ATTR_MAP","fillStyle","fillOpacity","strokeOpacity","rx","ry","x1","x2","y1","y2","lineCap","lineJoin","lineDash","lineDashOffset","miterLimit","font","fontSize","fontStyle","fontVariant","fontWeight","fontFamily","startArrow","endArrow","class","style","preserveAspectRatio","getParent","createDom","targetAttrs","afterAttrsChange","call","createPath","refreshElement","AbstractGroup","version","_this","ShapeBase","getDefaultAttrs","lineAppendWidth","draw","bbox","getBBox","bboxMethod","getBBoxMethod","getHitLineWidth","halfWidth","minX","minY","maxX","maxY","isClipShape","canFill","canStroke","strokeAndFill","transform","_setColor","trim","test","addGradient","addPattern","setShadow","matrix","refX","refY","isPointInPath","getBoundingClientRect","clientX","left","clientY","top","document","elementFromPoint","isEqualNode","isStroke","AbstractShape","Circle","Dom","Element","HTMLDocument","childNodes","Ellipse"],"sourceRoot":""}